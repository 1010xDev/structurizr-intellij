{
  parserClass="com.github.guillaumetaffin.structurizr.intellij.dsl.parser.StructurizrDslParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="StructurizrDsl"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.guillaumetaffin.structurizr.intellij.dsl.psi"
  psiImplPackage="com.github.guillaumetaffin.structurizr.intellij.dsl.psi.impl"

  elementTypeHolderClass="com.github.guillaumetaffin.structurizr.intellij.dsl.psi.StructurizrDslTypes"
  elementTypeClass="com.github.guillaumetaffin.structurizr.intellij.dsl.psi.StructurizrDslElementType"
  tokenTypeClass="com.github.guillaumetaffin.structurizr.intellij.dsl.psi.StructurizrDslToken"

  parserImports=[
      "static com.github.guillaumetaffin.structurizr.intellij.dsl.psi.Tokens.*"
      "import static com.intellij.psi.TokenType.WHITE_SPACE;"
    ]

    generateTokens=false

  tokens = [
    EXTENDS="extends"
    WORKSPACE="workspace"
    MODEL="model"
    PERSON="person"
    SOFTWARE_SYSTEM="softwareSystem"
    CONTAINER="container"
    COMPONENT="component"
    GROUP="group"
    NAME="name"
    DESCRIPTION="description"
    PROPERTIES="properties"
    IDENTIFIERS="!identifiers"
    HIERARCHICAL="hierarchical"
    FLAT="flat"
    DOCS="!docs"
    ADRS="!adrs"
    VIEWS="views"
    CONFIGURATION="configuration"
    TAGS="tags"
    URL="url"
    PERSPECTIVES="perspectives"
    RELATION_ARROW="->"
    THIS="this"
    TECHNOLOGY="technology"

    EQ="="

    OPEN_PARENS="{"
    CLOSE_PARENS="}"

    QUOTED_TEXT='regexp:\"[^\"\r\n]*\"?'
    UNQUOTED_TEXT='regexp:[^\s\"\r\n{=]+'

    LINE_BREAK="regexp:[\n\r]"
    WHITE_SPACE="regexp:[ \t\f]+"
    space="regexp:[ \t\f]+"
  ]
}

structurizrFile ::= top_level_statements*

private top_level_statements ::= workspace_statement

workspace_statement ::= workspace_definition opening_block workspace_block_statements*  closing_block
workspace_definition ::= WORKSPACE ( a_name a_description? | "extends" any_text )?
private workspace_block_statements ::= name_statement
 | description_statement
 | properties_statement
 | identifiers_statement
 | docs_statement
 | adrs_statement
 | model_statement
 | views_statement
 | configuration_statement

 name_statement ::= "name" any_text LINE_BREAK+
 description_statement ::= "description" any_text LINE_BREAK+
 properties_statement ::= "properties" opening_block property_statement* closing_block
 property_statement ::= any_text any_text LINE_BREAK+
 identifiers_statement ::= "!identifiers" ("hierarchical" | "flat") LINE_BREAK+
 docs_statement ::= '!docs' any_text any_text? LINE_BREAK+
 adrs_statement ::= '!adrs' any_text any_text? LINE_BREAK+
 tags_statement ::= 'tags' any_text+ LINE_BREAK+
 url_statement ::= 'url' any_text LINE_BREAK+
 perspectives_statement ::= "perspectives" opening_block perspective_statement* closing_block
 perspective_statement ::= any_text any_text any_text? LINE_BREAK+
 technology_statement ::= 'technology' any_text LINE_BREAK+

model_statement ::= "model" opening_block model_block_statement* closing_block
private model_block_statement ::= person_statement
 | software_system_statement
 | identifiers_statement
 | <<group_statements model_block_statement>>

views_statement ::= "views" opening_block closing_block

configuration_statement ::= "configuration" opening_block closing_block

person_statement ::= <<taggable_element_definition "person">> (person_block | LINE_BREAK+)
person_block ::= opening_block person_block_statement* closing_block
private person_block_statement ::= description_statement
 | tags_statement
 | url_statement
 | properties_statement
 | perspectives_statement
 | relation_statement

software_system_statement ::= <<taggable_element_definition "softwareSystem" >> (software_system_block | LINE_BREAK+)
software_system_block ::= opening_block software_system_block_statement* closing_block
private software_system_block_statement ::= container_statement
 | docs_statement
 | adrs_statement
 | <<group_statements software_system_block_statement>>
 | description_statement
 | tags_statement
 | url_statement
 | properties_statement
 | perspectives_statement
 | relation_statement

container_statement ::= <<tech_taggable_element_definition "container" >> (container_block | LINE_BREAK+)
container_block ::= opening_block container_block_statement* closing_block
private container_block_statement ::= component_statement
 | docs_statement
 | adrs_statement
 | <<group_statements container_block_statement>>
 | description_statement
 | technology_statement
 | tags_statement
 | url_statement
 | properties_statement
 | perspectives_statement
 | relation_statement

component_statement ::= <<tech_taggable_element_definition "component" >> (component_block | LINE_BREAK+)
component_block ::= opening_block component_block_statement*  closing_block
private component_block_statement ::= docs_statement
 | adrs_statement
 | description_statement
 | technology_statement
 | tags_statement
 | url_statement
 | properties_statement
 | perspectives_statement
 | relation_statement

relation_statement ::= lhs_relation_statement '->' rhs_relation_statement (relation_block | LINE_BREAK+)
rhs_relation_statement ::= ('this' | id) a_description? technology? tag?
lhs_relation_statement ::= ('this' | id) ?
relation_block ::= opening_block relation_block_statements closing_block
private relation_block_statements ::= tags_statement | url_statement | properties_statement | perspective_statement

id ::= any_text
private any_text ::= UNQUOTED_TEXT | QUOTED_TEXT| any_keyword
private any_keyword ::= "workspace"
 | "model"
 | "softwareSystem"
 | "person"
 | "container"
 | "component"
 | "group"
 | "extends"
 | "name"
 | "description"
 | "properties"
 | "!identifiers"
 | "hierarchical"
 | "flat"
 | "!docs"
 | "!adrs"
 | "views"
 | "tags"
 | "url"
 | "perspectives"
 | "this"
 | "technology"

opening_block ::= "{" LINE_BREAK+
closing_block ::= "}" (LINE_BREAK+ | <<eof>>)

a_name ::= any_text
a_description ::= any_text
tag ::= any_text
technology ::= any_text

// META RULES
private meta taggable_element_definition ::= (id "=")? <<keyword>> a_name a_description? tag?
private meta tech_taggable_element_definition ::= (id "=")? <<keyword>> a_name a_description? technology? tag?

meta group_statements ::= "group" any_text opening_block <<level_statements>>* closing_block
