{
  parserClass="com.github.guillaumetaffin.structurizr.intellij.dsl.parser.StructurizrDslParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="StructurizrDsl"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.guillaumetaffin.structurizr.intellij.dsl.psi"
  psiImplPackage="com.github.guillaumetaffin.structurizr.intellij.dsl.psi.impl"

  elementTypeHolderClass="com.github.guillaumetaffin.structurizr.intellij.dsl.psi.StructurizrDslTypes"
  elementTypeClass="com.github.guillaumetaffin.structurizr.intellij.dsl.psi.StructurizrDslElementType"
  tokenTypeClass="com.github.guillaumetaffin.structurizr.intellij.dsl.psi.StructurizrDslToken"

  parserImports=[
      "static com.github.guillaumetaffin.structurizr.intellij.dsl.psi.Tokens.*"
      "import static com.intellij.psi.TokenType.WHITE_SPACE;"
    ]

    generateTokens=false

  tokens = [
    WORKSPACE="workspace"
    MODEL="model"
    PERSON="person"

    EQ="="

    OPEN_PARENS="{"
    CLOSE_PARENS="}"

    QUOTED_TEXT='regexp:\"[^\"\r\n]*\"?'
    UNQUOTED_TEXT='regexp:[^\s\"\r\n]+'

    LINE_BREAK="regexp:[\n\r]"
    WHITE_SPACE="regexp:[ \t\f]+"
    space="regexp:[ \t\f]+"
  ]
}

structurizrFile ::= top_level_statements*

private top_level_statements ::= workspace_statement

workspace_statement ::= workspace_definition opening_block workspace_block_statements  closing_block
workspace_definition ::= WORKSPACE
workspace_block_statements ::= model_statement?

model_statement ::= "model" opening_block model_block_statement* closing_block
model_block_statement ::= person_statement

person_statement ::= (id "=")? "person" any_text LINE_BREAK+

id ::= UNQUOTED_TEXT
any_text ::= UNQUOTED_TEXT | QUOTED_TEXT

opening_block ::= "{" LINE_BREAK+
closing_block ::= "}" (LINE_BREAK+ | <<eof>>)