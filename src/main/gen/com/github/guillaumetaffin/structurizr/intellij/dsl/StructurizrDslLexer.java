/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.github.guillaumetaffin.structurizr.intellij.dsl;

import com.github.guillaumetaffin.structurizr.intellij.dsl.psi.Tokens;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;

import static com.intellij.psi.TokenType.WHITE_SPACE;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>structurizr-dsl.flex</tt>
 */
class StructurizrDslLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\1\4\1\1\1\2\22\0\1\1\1\32\1\3\7\0\1\46\2\0\1\35\17\0\1\62\1"+
    "\36\3\0\1\47\1\43\1\56\1\37\1\53\1\40\1\51\1\42\2\0\1\44\1\55\1\41\1\0\1\52"+
    "\1\0\1\50\1\25\3\0\1\54\11\0\1\20\1\45\1\21\1\11\1\5\1\24\1\30\1\33\1\27\1"+
    "\0\1\16\1\23\1\22\1\10\1\14\1\17\1\0\1\15\1\12\1\7\1\31\1\34\1\13\1\6\1\26"+
    "\1\57\1\60\1\0\1\61\7\0\1\4\32\0\1\4\337\0\1\4\177\0\13\4\35\0\2\4\5\0\1\4"+
    "\57\0\1\4\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\31\1\1\6"+
    "\7\1\1\7\1\10\1\11\1\4\7\1\1\12\15\1"+
    "\1\13\12\1\1\14\17\1\1\15\4\1\1\16\72\1"+
    "\1\17\15\1\1\20\14\1\1\21\1\22\1\1\1\23"+
    "\1\24\40\1\1\25\4\1\1\26\23\1\1\27\7\1"+
    "\1\30\10\1\1\31\2\1\1\32\1\1\1\33\2\1"+
    "\1\34\11\1\1\35\4\1\1\36\1\1\1\37\4\1"+
    "\1\40\1\41\1\42\1\43\4\1\1\44\7\1\1\45"+
    "\14\1\1\46\1\47\1\1\1\50\1\51\5\1\1\52"+
    "\10\1\1\53\11\1\1\54\4\1\1\55\1\56\3\1"+
    "\1\57\1\60\2\1\1\61\1\62\1\63\3\1\1\64"+
    "\1\65\5\1\1\66\12\1\1\67\3\1\1\70\4\1"+
    "\1\71\4\1\1\72\15\1\1\73\5\1\1\74\1\75"+
    "\1\76\6\1\1\77\13\1\1\100\3\1\1\101\1\1"+
    "\1\102\1\1\1\103\1\104\4\1\1\105\4\1\1\106"+
    "\1\1\1\107\6\1\1\110\1\111\6\1\1\112\1\113"+
    "\1\114\1\1\1\115\3\1\1\116\11\1\1\117\10\1"+
    "\1\120\1\121\3\1\1\122\1\123\5\1\1\124\2\1"+
    "\1\125\5\1\1\126\1\127\6\1\1\130\1\1\1\131"+
    "\14\1\1\132\5\1\1\133\11\1\1\134\1\135\1\1"+
    "\1\136\1\137";

  private static int [] zzUnpackAction() {
    int [] result = new int[570];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\231\0\377\0\u0132"+
    "\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca"+
    "\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462"+
    "\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7\0\63"+
    "\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c\0\231"+
    "\0\63\0\231\0\231\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b"+
    "\0\u085e\0\u0891\0\63\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990"+
    "\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28"+
    "\0\63\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d"+
    "\0\u0cc0\0\u0cf3\0\u0d26\0\63\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2"+
    "\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a"+
    "\0\u0fbd\0\u0ff0\0\u1023\0\63\0\u1056\0\u1089\0\u10bc\0\u10ef"+
    "\0\63\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254"+
    "\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9\0\u13ec"+
    "\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u1584"+
    "\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c"+
    "\0\u174f\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881\0\u18b4"+
    "\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u1a19\0\u1a4c"+
    "\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4"+
    "\0\u1c17\0\u1c4a\0\u1c7d\0\63\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49"+
    "\0\u1d7c\0\u1daf\0\u1de2\0\u1e15\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1"+
    "\0\u1f14\0\63\0\u1f47\0\u1f7a\0\u1fad\0\u1fe0\0\u2013\0\u2046"+
    "\0\u2079\0\u20ac\0\u20df\0\u2112\0\u2145\0\u2178\0\63\0\63"+
    "\0\u21ab\0\63\0\63\0\u21de\0\u2211\0\u2244\0\u2277\0\u22aa"+
    "\0\u22dd\0\u2310\0\u2343\0\u2376\0\u23a9\0\u23dc\0\u240f\0\u2442"+
    "\0\u2475\0\u24a8\0\u24db\0\u250e\0\u2541\0\u2574\0\u25a7\0\u25da"+
    "\0\u260d\0\u2640\0\u2673\0\u26a6\0\u26d9\0\u270c\0\u273f\0\u2772"+
    "\0\u27a5\0\u27d8\0\u280b\0\63\0\u283e\0\u2871\0\u28a4\0\u28d7"+
    "\0\63\0\u290a\0\u293d\0\u2970\0\u29a3\0\u29d6\0\u2a09\0\u2a3c"+
    "\0\u2a6f\0\u2aa2\0\u2ad5\0\u2b08\0\u2b3b\0\u2b6e\0\u2ba1\0\u2bd4"+
    "\0\u2c07\0\u2c3a\0\u2c6d\0\u2ca0\0\63\0\u2cd3\0\u2d06\0\u2d39"+
    "\0\u2d6c\0\u2d9f\0\u2dd2\0\u2e05\0\63\0\u2e38\0\u2e6b\0\u2e9e"+
    "\0\u2ed1\0\u2f04\0\u2f37\0\u2f6a\0\u2f9d\0\63\0\u2fd0\0\u3003"+
    "\0\63\0\u3036\0\63\0\u3069\0\u309c\0\63\0\u30cf\0\u3102"+
    "\0\u3135\0\u3168\0\u319b\0\u31ce\0\u3201\0\u3234\0\u3267\0\63"+
    "\0\u329a\0\u32cd\0\u3300\0\u3333\0\63\0\u3366\0\63\0\u3399"+
    "\0\u33cc\0\u33ff\0\u3432\0\63\0\63\0\63\0\63\0\u3465"+
    "\0\u3498\0\u34cb\0\u34fe\0\63\0\u3531\0\u3564\0\u3597\0\u35ca"+
    "\0\u35fd\0\u3630\0\u3663\0\63\0\u3696\0\u36c9\0\u36fc\0\u372f"+
    "\0\u3762\0\u3795\0\u37c8\0\u37fb\0\u382e\0\u3861\0\u3894\0\u38c7"+
    "\0\63\0\63\0\u38fa\0\u392d\0\63\0\u3960\0\u3993\0\u39c6"+
    "\0\u39f9\0\u3a2c\0\63\0\u3a5f\0\u3a92\0\u3ac5\0\u3af8\0\u3b2b"+
    "\0\u3b5e\0\u3b91\0\u3bc4\0\63\0\u3bf7\0\u3c2a\0\u3c5d\0\u3c90"+
    "\0\u3cc3\0\u3cf6\0\u3d29\0\u3d5c\0\u3d8f\0\63\0\u3dc2\0\u3df5"+
    "\0\u3e28\0\u3e5b\0\63\0\63\0\u3e8e\0\u3ec1\0\u3ef4\0\63"+
    "\0\63\0\u3f27\0\u3f5a\0\63\0\63\0\63\0\u3f8d\0\u3fc0"+
    "\0\u3ff3\0\63\0\63\0\u4026\0\u4059\0\u408c\0\u40bf\0\u40f2"+
    "\0\63\0\u4125\0\u4158\0\u418b\0\u41be\0\u41f1\0\u4224\0\u4257"+
    "\0\u428a\0\u42bd\0\u42f0\0\63\0\u4323\0\u4356\0\u4389\0\63"+
    "\0\u43bc\0\u43ef\0\u4422\0\u4455\0\63\0\u4488\0\u44bb\0\u44ee"+
    "\0\u4521\0\63\0\u4554\0\u4587\0\u45ba\0\u45ed\0\u4620\0\u4653"+
    "\0\u4686\0\u46b9\0\u46ec\0\u471f\0\u4752\0\u4785\0\u47b8\0\63"+
    "\0\u47eb\0\u481e\0\u4851\0\u4884\0\u48b7\0\63\0\63\0\63"+
    "\0\u48ea\0\u491d\0\u4950\0\u4983\0\u49b6\0\u49e9\0\63\0\u4a1c"+
    "\0\u4a4f\0\u4a82\0\u4ab5\0\u4ae8\0\u4b1b\0\u4b4e\0\u4b81\0\u4bb4"+
    "\0\u4be7\0\u4c1a\0\63\0\u4c4d\0\u4c80\0\u4cb3\0\63\0\u4ce6"+
    "\0\u4d19\0\u4d4c\0\63\0\63\0\u4d7f\0\u4db2\0\u4de5\0\u4e18"+
    "\0\63\0\u4e4b\0\u4e7e\0\u4eb1\0\u4ee4\0\63\0\u4f17\0\u4f4a"+
    "\0\u4f7d\0\u4fb0\0\u4fe3\0\u5016\0\u5049\0\u507c\0\63\0\63"+
    "\0\u50af\0\u50e2\0\u5115\0\u5148\0\u517b\0\u51ae\0\63\0\63"+
    "\0\63\0\u51e1\0\63\0\u5214\0\u5247\0\u527a\0\63\0\u52ad"+
    "\0\u52e0\0\u5313\0\u5346\0\u5379\0\u53ac\0\u53df\0\u5412\0\u5445"+
    "\0\63\0\u5478\0\u54ab\0\u54de\0\u5511\0\u5544\0\u5577\0\u55aa"+
    "\0\u55dd\0\63\0\63\0\u5610\0\u5643\0\u5676\0\63\0\63"+
    "\0\u56a9\0\u56dc\0\u570f\0\u5742\0\u5775\0\63\0\u57a8\0\u57db"+
    "\0\63\0\u580e\0\u5841\0\u5874\0\u58a7\0\u58da\0\63\0\u590d"+
    "\0\u5940\0\u5973\0\u59a6\0\u59d9\0\u5a0c\0\u5a3f\0\63\0\u5a72"+
    "\0\63\0\u5aa5\0\u5ad8\0\u5b0b\0\u5b3e\0\u5b71\0\u5ba4\0\u5bd7"+
    "\0\u5c0a\0\u5c3d\0\u5c70\0\u5ca3\0\u5cd6\0\63\0\u5d09\0\u5d3c"+
    "\0\u5d6f\0\u5da2\0\u5dd5\0\63\0\u5e08\0\u5e3b\0\u5e6e\0\u5ea1"+
    "\0\u5ed4\0\u5f07\0\u5f3a\0\u5f6d\0\u5fa0\0\63\0\63\0\u5fd3"+
    "\0\63\0\63";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[570];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\2\2\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\2\1\35\3\2"+
    "\1\36\1\2\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\2\2\1\50\1\51\1\52\1\2"+
    "\4\0\53\2\1\0\1\2\2\0\1\3\144\0\2\5"+
    "\1\0\1\53\57\5\1\2\4\0\1\2\1\54\14\2"+
    "\1\55\34\2\1\0\1\2\1\0\1\2\4\0\1\56"+
    "\7\2\1\57\2\2\1\60\6\2\1\61\3\2\1\62"+
    "\11\2\1\63\12\2\1\0\1\2\1\0\1\2\4\0"+
    "\13\2\1\64\37\2\1\0\1\2\1\0\1\2\4\0"+
    "\1\65\6\2\1\66\3\2\1\67\5\2\1\70\31\2"+
    "\1\0\1\2\1\0\1\2\4\0\2\2\1\71\4\2"+
    "\1\72\11\2\1\73\4\2\1\74\24\2\1\0\1\2"+
    "\1\0\1\2\4\0\7\2\1\75\12\2\1\76\30\2"+
    "\1\0\1\2\1\0\1\2\4\0\12\2\1\77\40\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\100\15\2\1\101"+
    "\34\2\1\0\1\2\1\0\1\2\4\0\10\2\1\102"+
    "\42\2\1\0\1\2\1\0\1\2\4\0\1\103\7\2"+
    "\1\104\5\2\1\105\34\2\1\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\106\20\2\1\107\26\2\1\0\1\2"+
    "\1\0\1\2\4\0\7\2\1\110\14\2\1\111\26\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\112\6\2\1\113"+
    "\43\2\1\0\1\2\1\0\1\2\4\0\10\2\1\114"+
    "\42\2\1\0\1\2\1\0\1\2\4\0\7\2\1\115"+
    "\3\2\1\116\2\2\1\117\3\2\1\120\30\2\1\0"+
    "\1\2\1\0\1\2\4\0\3\2\1\121\10\2\1\122"+
    "\1\123\35\2\1\0\1\2\1\0\1\2\4\0\10\2"+
    "\1\124\42\2\1\0\1\2\1\0\1\2\4\0\10\2"+
    "\1\125\42\2\1\0\1\2\1\0\1\2\4\0\4\2"+
    "\1\126\6\2\1\127\6\2\1\130\30\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\131\21\2\1\132\30\2\1\0"+
    "\1\2\1\0\1\2\4\0\22\2\1\133\30\2\1\0"+
    "\1\2\1\0\1\2\4\0\31\2\1\134\21\2\1\0"+
    "\1\2\1\0\1\2\4\0\16\2\1\135\34\2\1\0"+
    "\1\2\1\0\1\2\4\0\7\2\1\136\11\2\1\137"+
    "\1\140\30\2\1\0\1\2\1\0\1\2\4\0\2\2"+
    "\1\141\4\2\1\142\3\2\1\143\37\2\1\0\1\2"+
    "\1\0\1\2\4\0\7\2\1\144\43\2\1\0\1\2"+
    "\1\0\1\2\4\0\7\2\1\145\43\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\146\52\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\147\21\2\1\150\30\2\1\0\1\2"+
    "\1\0\1\2\4\0\7\2\1\151\43\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\152\52\2\1\0\1\2\1\0"+
    "\1\2\4\0\7\2\1\153\43\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\154\11\2\1\155\36\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\156\52\2\1\0\1\2"+
    "\1\0\1\2\4\0\14\2\1\157\36\2\1\0\1\2"+
    "\1\0\1\2\4\0\24\2\1\160\26\2\1\0\1\2"+
    "\1\0\1\2\4\0\23\2\1\161\27\2\1\0\1\2"+
    "\1\0\1\2\4\0\2\2\1\162\50\2\1\0\1\2"+
    "\1\0\1\2\4\0\22\2\1\163\30\2\1\0\1\2"+
    "\1\0\1\2\4\0\15\2\1\164\35\2\1\0\1\2"+
    "\1\0\1\2\4\0\5\2\1\165\4\2\1\166\4\2"+
    "\1\167\33\2\1\0\1\2\1\0\1\2\4\0\2\2"+
    "\1\170\50\2\1\0\1\2\1\0\1\2\4\0\5\2"+
    "\1\171\45\2\1\0\1\2\1\0\1\2\4\0\3\2"+
    "\1\172\47\2\1\0\1\2\1\0\1\2\4\0\10\2"+
    "\1\173\10\2\1\174\31\2\1\0\1\2\1\0\1\2"+
    "\4\0\16\2\1\175\1\176\33\2\1\0\1\2\1\0"+
    "\1\2\4\0\5\2\1\177\45\2\1\0\1\2\1\0"+
    "\1\2\4\0\13\2\1\200\37\2\1\0\1\2\1\0"+
    "\1\2\4\0\10\2\1\201\42\2\1\0\1\2\1\0"+
    "\1\2\4\0\4\2\1\202\46\2\1\0\1\2\1\0"+
    "\1\2\4\0\13\2\1\203\37\2\1\0\1\2\1\0"+
    "\1\2\4\0\16\2\1\204\34\2\1\0\1\2\1\0"+
    "\1\2\4\0\7\2\1\205\43\2\1\0\1\2\1\0"+
    "\1\2\4\0\10\2\1\206\42\2\1\0\1\2\1\0"+
    "\1\2\4\0\7\2\1\207\43\2\1\0\1\2\1\0"+
    "\1\2\4\0\13\2\1\210\37\2\1\0\1\2\1\0"+
    "\1\2\4\0\22\2\1\211\30\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\212\50\2\1\0\1\2\1\0"+
    "\1\2\4\0\3\2\1\213\11\2\1\214\1\215\34\2"+
    "\1\0\1\2\1\0\1\2\4\0\5\2\1\216\45\2"+
    "\1\0\1\2\1\0\1\2\4\0\2\2\1\217\5\2"+
    "\1\220\42\2\1\0\1\2\1\0\1\2\4\0\4\2"+
    "\1\221\46\2\1\0\1\2\1\0\1\2\4\0\3\2"+
    "\1\222\47\2\1\0\1\2\1\0\1\2\4\0\16\2"+
    "\1\223\34\2\1\0\1\2\1\0\1\2\4\0\13\2"+
    "\1\224\37\2\1\0\1\2\1\0\1\2\4\0\16\2"+
    "\1\225\34\2\1\0\1\2\1\0\1\2\4\0\5\2"+
    "\1\226\6\2\1\227\2\2\1\230\33\2\1\0\1\2"+
    "\1\0\1\2\4\0\7\2\1\231\43\2\1\0\1\2"+
    "\1\0\1\2\4\0\13\2\1\232\37\2\1\0\1\2"+
    "\1\0\1\2\4\0\7\2\1\233\43\2\1\0\1\2"+
    "\1\0\1\2\4\0\16\2\1\234\34\2\1\0\1\2"+
    "\1\0\1\2\4\0\7\2\1\235\43\2\1\0\1\2"+
    "\1\0\1\2\4\0\4\2\1\236\46\2\1\0\1\2"+
    "\1\0\1\2\4\0\4\2\1\237\46\2\1\0\1\2"+
    "\1\0\1\2\4\0\13\2\1\240\6\2\1\241\30\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\242\52\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\243\52\2\1\0\1\2"+
    "\1\0\1\2\4\0\16\2\1\244\34\2\1\0\1\2"+
    "\1\0\1\2\4\0\15\2\1\245\35\2\1\0\1\2"+
    "\1\0\1\2\4\0\16\2\1\246\34\2\1\0\1\2"+
    "\1\0\1\2\4\0\10\2\1\247\42\2\1\0\1\2"+
    "\1\0\1\2\4\0\10\2\1\250\42\2\1\0\1\2"+
    "\1\0\1\2\4\0\14\2\1\251\36\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\2\1\252\51\2\1\0\1\2"+
    "\1\0\1\2\4\0\24\2\1\253\13\2\1\254\12\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\2\1\255\51\2"+
    "\1\0\1\2\1\0\1\2\4\0\10\2\1\256\42\2"+
    "\1\0\1\2\1\0\1\2\4\0\12\2\1\257\40\2"+
    "\1\0\1\2\1\0\1\2\4\0\16\2\1\260\34\2"+
    "\1\0\1\2\1\0\1\2\4\0\40\2\1\261\12\2"+
    "\1\0\1\2\1\0\1\2\4\0\40\2\1\262\12\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\263\52\2\1\0"+
    "\1\2\1\0\1\2\4\0\16\2\1\264\34\2\1\0"+
    "\1\2\1\0\1\2\4\0\15\2\1\265\35\2\1\0"+
    "\1\2\1\0\1\2\4\0\26\2\1\266\24\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\267\52\2\1\0\1\2"+
    "\1\0\1\2\4\0\5\2\1\270\45\2\1\0\1\2"+
    "\1\0\1\2\4\0\16\2\1\271\34\2\1\0\1\2"+
    "\1\0\1\2\4\0\5\2\1\272\45\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\273\52\2\1\0\1\2\1\0"+
    "\1\2\4\0\14\2\1\274\36\2\1\0\1\2\1\0"+
    "\1\2\4\0\16\2\1\275\34\2\1\0\1\2\1\0"+
    "\1\2\4\0\13\2\1\276\37\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\277\50\2\1\0\1\2\1\0"+
    "\1\2\4\0\26\2\1\300\24\2\1\0\1\2\1\0"+
    "\1\2\4\0\13\2\1\301\37\2\1\0\1\2\1\0"+
    "\1\2\4\0\7\2\1\302\43\2\1\0\1\2\1\0"+
    "\1\2\4\0\16\2\1\303\34\2\1\0\1\2\1\0"+
    "\1\2\4\0\22\2\1\304\30\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\305\50\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\306\50\2\1\0\1\2\1\0"+
    "\1\2\4\0\12\2\1\307\40\2\1\0\1\2\1\0"+
    "\1\2\4\0\11\2\1\310\41\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\311\50\2\1\0\1\2\1\0"+
    "\1\2\4\0\14\2\1\312\36\2\1\0\1\2\1\0"+
    "\1\2\4\0\13\2\1\313\37\2\1\0\1\2\1\0"+
    "\1\2\4\0\11\2\1\314\41\2\1\0\1\2\1\0"+
    "\1\2\4\0\5\2\1\315\45\2\1\0\1\2\1\0"+
    "\1\2\4\0\12\2\1\316\40\2\1\0\1\2\1\0"+
    "\1\2\4\0\3\2\1\317\47\2\1\0\1\2\1\0"+
    "\1\2\4\0\15\2\1\320\35\2\1\0\1\2\1\0"+
    "\1\2\4\0\7\2\1\321\43\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\322\14\2\1\323\33\2\1\0"+
    "\1\2\1\0\1\2\4\0\12\2\1\324\40\2\1\0"+
    "\1\2\1\0\1\2\4\0\7\2\1\325\43\2\1\0"+
    "\1\2\1\0\1\2\4\0\2\2\1\326\50\2\1\0"+
    "\1\2\1\0\1\2\4\0\13\2\1\327\37\2\1\0"+
    "\1\2\1\0\1\2\4\0\15\2\1\330\35\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\331\52\2\1\0\1\2"+
    "\1\0\1\2\4\0\2\2\1\332\50\2\1\0\1\2"+
    "\1\0\1\2\4\0\5\2\1\333\45\2\1\0\1\2"+
    "\1\0\1\2\4\0\2\2\1\334\50\2\1\0\1\2"+
    "\1\0\1\2\4\0\2\2\1\335\50\2\1\0\1\2"+
    "\1\0\1\2\4\0\2\2\1\336\50\2\1\0\1\2"+
    "\1\0\1\2\4\0\16\2\1\337\34\2\1\0\1\2"+
    "\1\0\1\2\4\0\10\2\1\340\42\2\1\0\1\2"+
    "\1\0\1\2\4\0\3\2\1\341\47\2\1\0\1\2"+
    "\1\0\1\2\4\0\23\2\1\342\27\2\1\0\1\2"+
    "\1\0\1\2\4\0\24\2\1\343\26\2\1\0\1\2"+
    "\1\0\1\2\4\0\14\2\1\344\36\2\1\0\1\2"+
    "\1\0\1\2\4\0\10\2\1\345\42\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\346\52\2\1\0\1\2\1\0"+
    "\1\2\4\0\16\2\1\347\34\2\1\0\1\2\1\0"+
    "\1\2\4\0\23\2\1\350\27\2\1\0\1\2\1\0"+
    "\1\2\4\0\10\2\1\351\42\2\1\0\1\2\1\0"+
    "\1\2\4\0\6\2\1\352\44\2\1\0\1\2\1\0"+
    "\1\2\4\0\22\2\1\353\30\2\1\0\1\2\1\0"+
    "\1\2\4\0\12\2\1\354\40\2\1\0\1\2\1\0"+
    "\1\2\4\0\22\2\1\355\30\2\1\0\1\2\1\0"+
    "\1\2\4\0\14\2\1\356\36\2\1\0\1\2\1\0"+
    "\1\2\4\0\4\2\1\357\46\2\1\0\1\2\1\0"+
    "\1\2\4\0\11\2\1\360\41\2\1\0\1\2\1\0"+
    "\1\2\4\0\3\2\1\361\47\2\1\0\1\2\1\0"+
    "\1\2\4\0\7\2\1\362\43\2\1\0\1\2\1\0"+
    "\1\2\4\0\13\2\1\363\37\2\1\0\1\2\1\0"+
    "\1\2\4\0\5\2\1\364\45\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\365\52\2\1\0\1\2\1\0\1\2"+
    "\4\0\4\2\1\366\46\2\1\0\1\2\1\0\1\2"+
    "\4\0\42\2\1\367\10\2\1\0\1\2\1\0\1\2"+
    "\4\0\22\2\1\370\30\2\1\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\371\47\2\1\0\1\2\1\0\1\2"+
    "\4\0\24\2\1\372\26\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\373\52\2\1\0\1\2\1\0\1\2\4\0"+
    "\3\2\1\374\47\2\1\0\1\2\1\0\1\2\4\0"+
    "\1\375\52\2\1\0\1\2\1\0\1\2\4\0\10\2"+
    "\1\376\42\2\1\0\1\2\1\0\1\2\4\0\7\2"+
    "\1\377\43\2\1\0\1\2\1\0\1\2\4\0\24\2"+
    "\1\u0100\26\2\1\0\1\2\1\0\1\2\4\0\1\u0101"+
    "\52\2\1\0\1\2\1\0\1\2\4\0\1\u0102\52\2"+
    "\1\0\1\2\1\0\1\2\4\0\15\2\1\u0103\35\2"+
    "\1\0\1\2\1\0\1\2\4\0\11\2\1\u0104\41\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\u0105\52\2\1\0"+
    "\1\2\1\0\1\2\4\0\4\2\1\u0106\46\2\1\0"+
    "\1\2\1\0\1\2\4\0\6\2\1\u0107\44\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\u0108\52\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\u0109\52\2\1\0\1\2\1\0"+
    "\1\2\4\0\5\2\1\u010a\45\2\1\0\1\2\1\0"+
    "\1\2\4\0\26\2\1\u010b\24\2\1\0\1\2\1\0"+
    "\1\2\4\0\22\2\1\u010c\30\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\u010d\50\2\1\0\1\2\1\0"+
    "\1\2\4\0\22\2\1\u010e\30\2\1\0\1\2\1\0"+
    "\1\2\4\0\7\2\1\u010f\2\2\1\u0110\40\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\u0111\52\2\1\0\1\2"+
    "\1\0\1\2\4\0\2\2\1\u0112\50\2\1\0\1\2"+
    "\1\0\1\2\4\0\13\2\1\u0113\37\2\1\0\1\2"+
    "\1\0\1\2\4\0\16\2\1\u0114\34\2\1\0\1\2"+
    "\1\0\1\2\4\0\13\2\1\u0115\37\2\1\0\1\2"+
    "\1\0\1\2\4\0\22\2\1\u0116\30\2\1\0\1\2"+
    "\1\0\1\2\4\0\7\2\1\u0117\43\2\1\0\1\2"+
    "\1\0\1\2\4\0\10\2\1\u0118\13\2\1\u0119\26\2"+
    "\1\0\1\2\1\0\1\2\4\0\7\2\1\u011a\43\2"+
    "\1\0\1\2\1\0\1\2\4\0\4\2\1\u011b\46\2"+
    "\1\0\1\2\1\0\1\2\4\0\13\2\1\u011c\37\2"+
    "\1\0\1\2\1\0\1\2\4\0\16\2\1\u011d\34\2"+
    "\1\0\1\2\1\0\1\2\4\0\20\2\1\u011e\32\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\u011f\52\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\u0120\52\2\1\0\1\2"+
    "\1\0\1\2\4\0\13\2\1\u0121\37\2\1\0\1\2"+
    "\1\0\1\2\4\0\24\2\1\u0122\26\2\1\0\1\2"+
    "\1\0\1\2\4\0\13\2\1\u0123\37\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\u0124\52\2\1\0\1\2\1\0"+
    "\1\2\4\0\12\2\1\u0125\40\2\1\0\1\2\1\0"+
    "\1\2\4\0\5\2\1\u0126\45\2\1\0\1\2\1\0"+
    "\1\2\4\0\5\2\1\u0127\45\2\1\0\1\2\1\0"+
    "\1\2\4\0\3\2\1\u0128\47\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\u0129\50\2\1\0\1\2\1\0"+
    "\1\2\4\0\26\2\1\u012a\24\2\1\0\1\2\1\0"+
    "\1\2\4\0\13\2\1\u012b\37\2\1\0\1\2\1\0"+
    "\1\2\4\0\5\2\1\u012c\45\2\1\0\1\2\1\0"+
    "\1\2\4\0\12\2\1\u012d\40\2\1\0\1\2\1\0"+
    "\1\2\4\0\7\2\1\u012e\43\2\1\0\1\2\1\0"+
    "\1\2\4\0\3\2\1\u012f\47\2\1\0\1\2\1\0"+
    "\1\2\4\0\16\2\1\u0130\34\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\u0131\52\2\1\0\1\2\1\0\1\2"+
    "\4\0\23\2\1\u0132\27\2\1\0\1\2\1\0\1\2"+
    "\4\0\4\2\1\u0133\46\2\1\0\1\2\1\0\1\2"+
    "\4\0\2\2\1\u0134\50\2\1\0\1\2\1\0\1\2"+
    "\4\0\23\2\1\u0135\27\2\1\0\1\2\1\0\1\2"+
    "\4\0\7\2\1\u0136\43\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\u0137\52\2\1\0\1\2\1\0\1\2\4\0"+
    "\10\2\1\u0138\42\2\1\0\1\2\1\0\1\2\4\0"+
    "\16\2\1\u0139\34\2\1\0\1\2\1\0\1\2\4\0"+
    "\4\2\1\u013a\46\2\1\0\1\2\1\0\1\2\4\0"+
    "\4\2\1\u013b\46\2\1\0\1\2\1\0\1\2\4\0"+
    "\3\2\1\u013c\47\2\1\0\1\2\1\0\1\2\4\0"+
    "\7\2\1\u013d\43\2\1\0\1\2\1\0\1\2\4\0"+
    "\22\2\1\u013e\30\2\1\0\1\2\1\0\1\2\4\0"+
    "\21\2\1\u013f\31\2\1\0\1\2\1\0\1\2\4\0"+
    "\16\2\1\u0140\34\2\1\0\1\2\1\0\1\2\4\0"+
    "\4\2\1\u0141\46\2\1\0\1\2\1\0\1\2\4\0"+
    "\4\2\1\u0142\46\2\1\0\1\2\1\0\1\2\4\0"+
    "\22\2\1\u0143\30\2\1\0\1\2\1\0\1\2\4\0"+
    "\1\u0144\52\2\1\0\1\2\1\0\1\2\4\0\5\2"+
    "\1\u0145\45\2\1\0\1\2\1\0\1\2\4\0\13\2"+
    "\1\u0146\37\2\1\0\1\2\1\0\1\2\4\0\15\2"+
    "\1\u0147\35\2\1\0\1\2\1\0\1\2\4\0\12\2"+
    "\1\u0148\40\2\1\0\1\2\1\0\1\2\4\0\2\2"+
    "\1\u0149\50\2\1\0\1\2\1\0\1\2\4\0\22\2"+
    "\1\u014a\30\2\1\0\1\2\1\0\1\2\4\0\3\2"+
    "\1\u014b\47\2\1\0\1\2\1\0\1\2\4\0\1\u014c"+
    "\52\2\1\0\1\2\1\0\1\2\4\0\10\2\1\u014d"+
    "\42\2\1\0\1\2\1\0\1\2\4\0\24\2\1\u014e"+
    "\26\2\1\0\1\2\1\0\1\2\4\0\2\2\1\u014f"+
    "\50\2\1\0\1\2\1\0\1\2\4\0\13\2\1\u0150"+
    "\37\2\1\0\1\2\1\0\1\2\4\0\22\2\1\u0151"+
    "\30\2\1\0\1\2\1\0\1\2\4\0\23\2\1\u0152"+
    "\27\2\1\0\1\2\1\0\1\2\4\0\3\2\1\u0153"+
    "\47\2\1\0\1\2\1\0\1\2\4\0\10\2\1\u0118"+
    "\42\2\1\0\1\2\1\0\1\2\4\0\15\2\1\u0154"+
    "\35\2\1\0\1\2\1\0\1\2\4\0\13\2\1\u0155"+
    "\37\2\1\0\1\2\1\0\1\2\4\0\22\2\1\u0156"+
    "\30\2\1\0\1\2\1\0\1\2\4\0\22\2\1\u0157"+
    "\30\2\1\0\1\2\1\0\1\2\4\0\10\2\1\u0158"+
    "\42\2\1\0\1\2\1\0\1\2\4\0\3\2\1\u0159"+
    "\47\2\1\0\1\2\1\0\1\2\4\0\4\2\1\u015a"+
    "\46\2\1\0\1\2\1\0\1\2\4\0\5\2\1\u015b"+
    "\45\2\1\0\1\2\1\0\1\2\4\0\2\2\1\u015c"+
    "\50\2\1\0\1\2\1\0\1\2\4\0\26\2\1\u015d"+
    "\24\2\1\0\1\2\1\0\1\2\4\0\2\2\1\u015e"+
    "\50\2\1\0\1\2\1\0\1\2\4\0\10\2\1\u015f"+
    "\42\2\1\0\1\2\1\0\1\2\4\0\5\2\1\u0160"+
    "\45\2\1\0\1\2\1\0\1\2\4\0\3\2\1\u0161"+
    "\47\2\1\0\1\2\1\0\1\2\4\0\4\2\1\u0162"+
    "\46\2\1\0\1\2\1\0\1\2\4\0\1\u0163\52\2"+
    "\1\0\1\2\1\0\1\2\4\0\10\2\1\u0164\42\2"+
    "\1\0\1\2\1\0\1\2\4\0\10\2\1\u0165\42\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\u0166\52\2\1\0"+
    "\1\2\1\0\1\2\4\0\7\2\1\u0167\43\2\1\0"+
    "\1\2\1\0\1\2\4\0\3\2\1\u0168\47\2\1\0"+
    "\1\2\1\0\1\2\4\0\10\2\1\u0169\42\2\1\0"+
    "\1\2\1\0\1\2\4\0\7\2\1\u016a\43\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\u016b\52\2\1\0\1\2"+
    "\1\0\1\2\4\0\5\2\1\u016c\45\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\u016d\52\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\u016e\50\2\1\0\1\2\1\0"+
    "\1\2\4\0\16\2\1\u016f\34\2\1\0\1\2\1\0"+
    "\1\2\4\0\12\2\1\u0170\40\2\1\0\1\2\1\0"+
    "\1\2\4\0\15\2\1\u0171\35\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\u0172\50\2\1\0\1\2\1\0"+
    "\1\2\4\0\14\2\1\u0173\36\2\1\0\1\2\1\0"+
    "\1\2\4\0\47\2\1\u0174\3\2\1\0\1\2\1\0"+
    "\1\2\4\0\10\2\1\u0175\42\2\1\0\1\2\1\0"+
    "\1\2\4\0\36\2\1\u0176\1\u0177\13\2\1\0\1\2"+
    "\1\0\1\2\4\0\13\2\1\u0178\37\2\1\0\1\2"+
    "\1\0\1\2\4\0\21\2\1\u0179\31\2\1\0\1\2"+
    "\1\0\1\2\4\0\7\2\1\u017a\43\2\1\0\1\2"+
    "\1\0\1\2\4\0\14\2\1\u017b\36\2\1\0\1\2"+
    "\1\0\1\2\4\0\2\2\1\u017c\50\2\1\0\1\2"+
    "\1\0\1\2\4\0\15\2\1\u017d\35\2\1\0\1\2"+
    "\1\0\1\2\4\0\22\2\1\u017e\30\2\1\0\1\2"+
    "\1\0\1\2\4\0\21\2\1\u017f\31\2\1\0\1\2"+
    "\1\0\1\2\4\0\3\2\1\u0180\47\2\1\0\1\2"+
    "\1\0\1\2\4\0\24\2\1\u0181\26\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\u0182\52\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\u0183\50\2\1\0\1\2\1\0"+
    "\1\2\4\0\4\2\1\u0184\46\2\1\0\1\2\1\0"+
    "\1\2\4\0\52\2\1\u0185\1\0\1\2\1\0\1\2"+
    "\4\0\1\u0186\52\2\1\0\1\2\1\0\1\2\4\0"+
    "\14\2\1\u0187\36\2\1\0\1\2\1\0\1\2\4\0"+
    "\1\u0188\52\2\1\0\1\2\1\0\1\2\4\0\2\2"+
    "\1\u0189\50\2\1\0\1\2\1\0\1\2\4\0\22\2"+
    "\1\u018a\30\2\1\0\1\2\1\0\1\2\4\0\36\2"+
    "\1\u018b\14\2\1\0\1\2\1\0\1\2\4\0\14\2"+
    "\1\u018c\36\2\1\0\1\2\1\0\1\2\4\0\1\u018d"+
    "\52\2\1\0\1\2\1\0\1\2\4\0\1\u018e\52\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\u018f\52\2\1\0"+
    "\1\2\1\0\1\2\4\0\7\2\1\u0190\43\2\1\0"+
    "\1\2\1\0\1\2\4\0\4\2\1\u0191\46\2\1\0"+
    "\1\2\1\0\1\2\4\0\3\2\1\u0192\47\2\1\0"+
    "\1\2\1\0\1\2\4\0\6\2\1\u0193\44\2\1\0"+
    "\1\2\1\0\1\2\4\0\51\2\1\u0194\1\2\1\0"+
    "\1\2\1\0\1\2\4\0\7\2\1\u0195\43\2\1\0"+
    "\1\2\1\0\1\2\4\0\2\2\1\u0196\50\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\u0197\52\2\1\0\1\2"+
    "\1\0\1\2\4\0\22\2\1\u0198\30\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\u0199\52\2\1\0\1\2\1\0"+
    "\1\2\4\0\7\2\1\u019a\43\2\1\0\1\2\1\0"+
    "\1\2\4\0\13\2\1\u019b\37\2\1\0\1\2\1\0"+
    "\1\2\4\0\14\2\1\u019c\36\2\1\0\1\2\1\0"+
    "\1\2\4\0\3\2\1\u019d\47\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\u019e\50\2\1\0\1\2\1\0"+
    "\1\2\4\0\22\2\1\u019f\30\2\1\0\1\2\1\0"+
    "\1\2\4\0\16\2\1\u01a0\34\2\1\0\1\2\1\0"+
    "\1\2\4\0\7\2\1\u01a1\43\2\1\0\1\2\1\0"+
    "\1\2\4\0\7\2\1\u01a2\43\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\u01a3\52\2\1\0\1\2\1\0\1\2"+
    "\4\0\10\2\1\u01a4\42\2\1\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\u01a5\47\2\1\0\1\2\1\0\1\2"+
    "\4\0\13\2\1\u01a6\37\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\u01a7\52\2\1\0\1\2\1\0\1\2\4\0"+
    "\4\2\1\u01a8\46\2\1\0\1\2\1\0\1\2\4\0"+
    "\1\u01a9\52\2\1\0\1\2\1\0\1\2\4\0\10\2"+
    "\1\u01aa\42\2\1\0\1\2\1\0\1\2\4\0\17\2"+
    "\1\u01ab\33\2\1\0\1\2\1\0\1\2\4\0\26\2"+
    "\1\u01ac\24\2\1\0\1\2\1\0\1\2\4\0\26\2"+
    "\1\u01ad\24\2\1\0\1\2\1\0\1\2\4\0\3\2"+
    "\1\u01ae\47\2\1\0\1\2\1\0\1\2\4\0\10\2"+
    "\1\u01af\42\2\1\0\1\2\1\0\1\2\4\0\24\2"+
    "\1\u01b0\26\2\1\0\1\2\1\0\1\2\4\0\42\2"+
    "\1\u01b1\10\2\1\0\1\2\1\0\1\2\4\0\5\2"+
    "\1\u01b2\45\2\1\0\1\2\1\0\1\2\4\0\1\u01b3"+
    "\52\2\1\0\1\2\1\0\1\2\4\0\23\2\1\u01b4"+
    "\27\2\1\0\1\2\1\0\1\2\4\0\22\2\1\u01b5"+
    "\30\2\1\0\1\2\1\0\1\2\4\0\3\2\1\u01b6"+
    "\47\2\1\0\1\2\1\0\1\2\4\0\4\2\1\u01b7"+
    "\46\2\1\0\1\2\1\0\1\2\4\0\20\2\1\u01b8"+
    "\32\2\1\0\1\2\1\0\1\2\4\0\3\2\1\u01b9"+
    "\47\2\1\0\1\2\1\0\1\2\4\0\3\2\1\u01ba"+
    "\47\2\1\0\1\2\1\0\1\2\4\0\1\u01bb\52\2"+
    "\1\0\1\2\1\0\1\2\4\0\5\2\1\u01bc\45\2"+
    "\1\0\1\2\1\0\1\2\4\0\22\2\1\u01bd\30\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\u01be\52\2\1\0"+
    "\1\2\1\0\1\2\4\0\3\2\1\u01bf\47\2\1\0"+
    "\1\2\1\0\1\2\4\0\24\2\1\u01c0\26\2\1\0"+
    "\1\2\1\0\1\2\4\0\10\2\1\u01c1\42\2\1\0"+
    "\1\2\1\0\1\2\4\0\13\2\1\u01c2\37\2\1\0"+
    "\1\2\1\0\1\2\4\0\2\2\1\u01c3\50\2\1\0"+
    "\1\2\1\0\1\2\4\0\5\2\1\u01c4\45\2\1\0"+
    "\1\2\1\0\1\2\4\0\24\2\1\u01c5\26\2\1\0"+
    "\1\2\1\0\1\2\4\0\22\2\1\u01c6\30\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\u01c7\52\2\1\0\1\2"+
    "\1\0\1\2\4\0\22\2\1\u01c8\30\2\1\0\1\2"+
    "\1\0\1\2\4\0\2\2\1\u01c9\50\2\1\0\1\2"+
    "\1\0\1\2\4\0\3\2\1\u01ca\47\2\1\0\1\2"+
    "\1\0\1\2\4\0\7\2\1\u01cb\43\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\u01cc\52\2\1\0\1\2\1\0"+
    "\1\2\4\0\27\2\1\u01cd\23\2\1\0\1\2\1\0"+
    "\1\2\4\0\21\2\1\u01ce\31\2\1\0\1\2\1\0"+
    "\1\2\4\0\7\2\1\u01cf\43\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\u01d0\50\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\u01d1\50\2\1\0\1\2\1\0"+
    "\1\2\4\0\21\2\1\u01d2\31\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\u01d3\50\2\1\0\1\2\1\0"+
    "\1\2\4\0\4\2\1\u01d4\46\2\1\0\1\2\1\0"+
    "\1\2\4\0\26\2\1\u01d5\24\2\1\0\1\2\1\0"+
    "\1\2\4\0\27\2\1\u01d6\23\2\1\0\1\2\1\0"+
    "\1\2\4\0\5\2\1\u01d7\45\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\u01d8\50\2\1\0\1\2\1\0"+
    "\1\2\4\0\35\2\1\u01d9\15\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\u01da\50\2\1\0\1\2\1\0"+
    "\1\2\4\0\14\2\1\u01db\36\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\u01dc\52\2\1\0\1\2\1\0\1\2"+
    "\4\0\14\2\1\u01dd\36\2\1\0\1\2\1\0\1\2"+
    "\4\0\14\2\1\u01de\36\2\1\0\1\2\1\0\1\2"+
    "\4\0\4\2\1\u01df\46\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\2\1\u01e0\51\2\1\0\1\2\1\0\1\2"+
    "\4\0\10\2\1\u01e1\42\2\1\0\1\2\1\0\1\2"+
    "\4\0\22\2\1\u01e2\30\2\1\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\u01e3\47\2\1\0\1\2\1\0\1\2"+
    "\4\0\32\2\1\u01e4\1\u01e5\1\u01e6\16\2\1\0\1\2"+
    "\1\0\1\2\4\0\26\2\1\u01e7\24\2\1\0\1\2"+
    "\1\0\1\2\4\0\5\2\1\u01e8\45\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\u01e9\52\2\1\0\1\2\1\0"+
    "\1\2\4\0\5\2\1\u01ea\45\2\1\0\1\2\1\0"+
    "\1\2\4\0\22\2\1\u01eb\30\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\u01ec\52\2\1\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\u01ed\47\2\1\0\1\2\1\0\1\2"+
    "\4\0\22\2\1\u01ee\30\2\1\0\1\2\1\0\1\2"+
    "\4\0\2\2\1\u01ef\50\2\1\0\1\2\1\0\1\2"+
    "\4\0\10\2\1\u01f0\42\2\1\0\1\2\1\0\1\2"+
    "\4\0\11\2\1\u01f1\41\2\1\0\1\2\1\0\1\2"+
    "\4\0\13\2\1\u01f2\37\2\1\0\1\2\1\0\1\2"+
    "\4\0\14\2\1\u01f3\36\2\1\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\u01f4\47\2\1\0\1\2\1\0\1\2"+
    "\4\0\10\2\1\u01f5\42\2\1\0\1\2\1\0\1\2"+
    "\4\0\7\2\1\u01f6\43\2\1\0\1\2\1\0\1\2"+
    "\4\0\2\2\1\u01f7\50\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\2\1\u01f8\51\2\1\0\1\2\1\0\1\2"+
    "\4\0\14\2\1\u01f9\36\2\1\0\1\2\1\0\1\2"+
    "\4\0\12\2\1\u01fa\40\2\1\0\1\2\1\0\1\2"+
    "\4\0\5\2\1\u01fb\45\2\1\0\1\2\1\0\1\2"+
    "\4\0\5\2\1\u01fc\45\2\1\0\1\2\1\0\1\2"+
    "\4\0\7\2\1\u01fd\43\2\1\0\1\2\1\0\1\2"+
    "\4\0\24\2\1\u01fe\26\2\1\0\1\2\1\0\1\2"+
    "\4\0\5\2\1\u01ff\45\2\1\0\1\2\1\0\1\2"+
    "\4\0\16\2\1\u0200\34\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\u0201\52\2\1\0\1\2\1\0\1\2\4\0"+
    "\27\2\1\u0202\23\2\1\0\1\2\1\0\1\2\4\0"+
    "\7\2\1\u0203\43\2\1\0\1\2\1\0\1\2\4\0"+
    "\4\2\1\u0204\46\2\1\0\1\2\1\0\1\2\4\0"+
    "\1\u0205\52\2\1\0\1\2\1\0\1\2\4\0\2\2"+
    "\1\u0206\50\2\1\0\1\2\1\0\1\2\4\0\13\2"+
    "\1\u0207\37\2\1\0\1\2\1\0\1\2\4\0\2\2"+
    "\1\u0208\50\2\1\0\1\2\1\0\1\2\4\0\3\2"+
    "\1\u0209\47\2\1\0\1\2\1\0\1\2\4\0\10\2"+
    "\1\u020a\42\2\1\0\1\2\1\0\1\2\4\0\37\2"+
    "\1\u020b\5\2\1\u020c\5\2\1\0\1\2\1\0\1\2"+
    "\4\0\22\2\1\u020d\30\2\1\0\1\2\1\0\1\2"+
    "\4\0\24\2\1\u020e\26\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\u020f\52\2\1\0\1\2\1\0\1\2\4\0"+
    "\15\2\1\u0210\35\2\1\0\1\2\1\0\1\2\4\0"+
    "\12\2\1\u0211\40\2\1\0\1\2\1\0\1\2\4\0"+
    "\13\2\1\u0212\37\2\1\0\1\2\1\0\1\2\4\0"+
    "\1\u0213\52\2\1\0\1\2\1\0\1\2\4\0\13\2"+
    "\1\u0214\37\2\1\0\1\2\1\0\1\2\4\0\7\2"+
    "\1\u0215\43\2\1\0\1\2\1\0\1\2\4\0\10\2"+
    "\1\u0216\42\2\1\0\1\2\1\0\1\2\4\0\12\2"+
    "\1\u0217\40\2\1\0\1\2\1\0\1\2\4\0\35\2"+
    "\1\u0218\15\2\1\0\1\2\1\0\1\2\4\0\1\u0219"+
    "\52\2\1\0\1\2\1\0\1\2\4\0\3\2\1\u021a"+
    "\47\2\1\0\1\2\1\0\1\2\4\0\34\2\1\u021b"+
    "\16\2\1\0\1\2\1\0\1\2\4\0\3\2\1\u021c"+
    "\47\2\1\0\1\2\1\0\1\2\4\0\10\2\1\u021d"+
    "\42\2\1\0\1\2\1\0\1\2\4\0\7\2\1\u021e"+
    "\43\2\1\0\1\2\1\0\1\2\4\0\3\2\1\u021f"+
    "\47\2\1\0\1\2\1\0\1\2\4\0\14\2\1\u0220"+
    "\36\2\1\0\1\2\1\0\1\2\4\0\7\2\1\u0221"+
    "\43\2\1\0\1\2\1\0\1\2\4\0\4\2\1\u0222"+
    "\46\2\1\0\1\2\1\0\1\2\4\0\2\2\1\u0223"+
    "\50\2\1\0\1\2\1\0\1\2\4\0\3\2\1\u0224"+
    "\47\2\1\0\1\2\1\0\1\2\4\0\5\2\1\u0225"+
    "\45\2\1\0\1\2\1\0\1\2\4\0\1\u0226\52\2"+
    "\1\0\1\2\1\0\1\2\4\0\4\2\1\u0227\46\2"+
    "\1\0\1\2\1\0\1\2\4\0\5\2\1\u0228\45\2"+
    "\1\0\1\2\1\0\1\2\4\0\10\2\1\u0229\42\2"+
    "\1\0\1\2\1\0\1\2\4\0\15\2\1\u022a\35\2"+
    "\1\0\1\2\1\0\1\2\4\0\2\2\1\u022b\50\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\u022c\52\2\1\0"+
    "\1\2\1\0\1\2\4\0\14\2\1\u022d\36\2\1\0"+
    "\1\2\1\0\1\2\4\0\13\2\1\u022e\37\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\u022f\52\2\1\0\1\2"+
    "\1\0\1\2\4\0\13\2\1\u0230\37\2\1\0\1\2"+
    "\1\0\1\2\4\0\13\2\1\u0231\37\2\1\0\1\2"+
    "\1\0\1\2\4\0\22\2\1\u0232\30\2\1\0\1\2"+
    "\1\0\1\2\4\0\3\2\1\u0233\47\2\1\0\1\2"+
    "\1\0\1\2\4\0\3\2\1\u0234\47\2\1\0\1\2"+
    "\1\0\1\2\4\0\12\2\1\u0235\40\2\1\0\1\2"+
    "\1\0\1\2\4\0\2\2\1\u0236\50\2\1\0\1\2"+
    "\1\0\1\2\4\0\2\2\1\u0237\50\2\1\0\1\2"+
    "\1\0\1\2\4\0\14\2\1\u0238\36\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\u0239\52\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\u023a\52\2\1\0\1\2\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24582];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\11\1\1\1\11\41\1\1\11\1\1"+
    "\2\11\u020f\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[570];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  StructurizrDslLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return Tokens.UNQUOTED_TEXT;
            } 
            // fall through
          case 96: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 97: break;
          case 3: 
            { return Tokens.LINE_BREAK;
            } 
            // fall through
          case 98: break;
          case 4: 
            { return Tokens.QUOTED_TEXT;
            } 
            // fall through
          case 99: break;
          case 5: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 100: break;
          case 6: 
            { return Tokens.STAR;
            } 
            // fall through
          case 101: break;
          case 7: 
            { return Tokens.OPEN_PARENS;
            } 
            // fall through
          case 102: break;
          case 8: 
            { return Tokens.CLOSE_PARENS;
            } 
            // fall through
          case 103: break;
          case 9: 
            { return Tokens.EQ;
            } 
            // fall through
          case 104: break;
          case 10: 
            { return Tokens.TB;
            } 
            // fall through
          case 105: break;
          case 11: 
            { return Tokens.RL;
            } 
            // fall through
          case 106: break;
          case 12: 
            { return Tokens.LR;
            } 
            // fall through
          case 107: break;
          case 13: 
            { return Tokens.RELATION_ARROW;
            } 
            // fall through
          case 108: break;
          case 14: 
            { return Tokens.BT;
            } 
            // fall through
          case 109: break;
          case 15: 
            { return Tokens.URL;
            } 
            // fall through
          case 110: break;
          case 16: 
            { return Tokens.BOX;
            } 
            // fall through
          case 111: break;
          case 17: 
            { return Tokens.TRUE;
            } 
            // fall through
          case 112: break;
          case 18: 
            { return Tokens.TAGS;
            } 
            // fall through
          case 113: break;
          case 19: 
            { return Tokens.THIS;
            } 
            // fall through
          case 114: break;
          case 20: 
            { return Tokens.NAME;
            } 
            // fall through
          case 115: break;
          case 21: 
            { return Tokens.FLAT;
            } 
            // fall through
          case 116: break;
          case 22: 
            { return Tokens.ICON;
            } 
            // fall through
          case 117: break;
          case 23: 
            { return Tokens.PIPE;
            } 
            // fall through
          case 118: break;
          case 24: 
            { return Tokens.TITLE;
            } 
            // fall through
          case 119: break;
          case 25: 
            { return Tokens.SOLID;
            } 
            // fall through
          case 120: break;
          case 26: 
            { return Tokens.SHAPE;
            } 
            // fall through
          case 121: break;
          case 27: 
            { return Tokens.WIDTH;
            } 
            // fall through
          case 122: break;
          case 28: 
            { return Tokens.KROKI;
            } 
            // fall through
          case 123: break;
          case 29: 
            { return Tokens.COLOR;
            } 
            // fall through
          case 124: break;
          case 30: 
            { return Tokens.MODEL;
            } 
            // fall through
          case 125: break;
          case 31: 
            { return Tokens.FALSE;
            } 
            // fall through
          case 126: break;
          case 32: 
            { return Tokens.IMAGE;
            } 
            // fall through
          case 127: break;
          case 33: 
            { return Tokens.GROUP;
            } 
            // fall through
          case 128: break;
          case 34: 
            { return Tokens.DOCS;
            } 
            // fall through
          case 129: break;
          case 35: 
            { return Tokens.ADRS;
            } 
            // fall through
          case 130: break;
          case 36: 
            { return Tokens.VIEWS;
            } 
            // fall through
          case 131: break;
          case 37: 
            { return Tokens.ROBOT;
            } 
            // fall through
          case 132: break;
          case 38: 
            { return Tokens.DOTTED;
            } 
            // fall through
          case 133: break;
          case 39: 
            { return Tokens.DASHED;
            } 
            // fall through
          case 134: break;
          case 40: 
            { return Tokens.STROKE;
            } 
            // fall through
          case 135: break;
          case 41: 
            { return Tokens.STYLES;
            } 
            // fall through
          case 136: break;
          case 42: 
            { return Tokens.PERSON;
            } 
            // fall through
          case 137: break;
          case 43: 
            { return Tokens.CUSTOM;
            } 
            // fall through
          case 138: break;
          case 44: 
            { return Tokens.HEIGHT;
            } 
            // fall through
          case 139: break;
          case 45: 
            { return Tokens.CIRCLE;
            } 
            // fall through
          case 140: break;
          case 46: 
            { return Tokens.BORDER;
            } 
            // fall through
          case 141: break;
          case 47: 
            { return Tokens.PERSON_SHAPE;
            } 
            // fall through
          case 142: break;
          case 48: 
            { return Tokens.FOLDER;
            } 
            // fall through
          case 143: break;
          case 49: 
            { return Tokens.EXTENDS;
            } 
            // fall through
          case 144: break;
          case 50: 
            { return Tokens.EXCLUDE;
            } 
            // fall through
          case 145: break;
          case 51: 
            { return Tokens.ELEMENT;
            } 
            // fall through
          case 146: break;
          case 52: 
            { return Tokens.DEFAULT;
            } 
            // fall through
          case 147: break;
          case 53: 
            { return Tokens.DYNAMIC;
            } 
            // fall through
          case 148: break;
          case 54: 
            { return Tokens.OPACITY;
            } 
            // fall through
          case 149: break;
          case 55: 
            { return Tokens.MERMAID;
            } 
            // fall through
          case 150: break;
          case 56: 
            { return Tokens.INCLUDE;
            } 
            // fall through
          case 151: break;
          case 57: 
            { return Tokens.ELLIPSE;
            } 
            // fall through
          case 152: break;
          case 58: 
            { return Tokens.HEXAGON;
            } 
            // fall through
          case 153: break;
          case 59: 
            { return Tokens.PLANTUML;
            } 
            // fall through
          case 154: break;
          case 60: 
            { return Tokens.METADATA;
            } 
            // fall through
          case 155: break;
          case 61: 
            { return Tokens.FONT_SIZE;
            } 
            // fall through
          case 156: break;
          case 62: 
            { return Tokens.FILTERED;
            } 
            // fall through
          case 157: break;
          case 63: 
            { return Tokens.CYLINDER;
            } 
            // fall through
          case 158: break;
          case 64: 
            { return Tokens.WORKSPACE;
            } 
            // fall through
          case 159: break;
          case 65: 
            { return Tokens.ANIMATION;
            } 
            // fall through
          case 160: break;
          case 66: 
            { return Tokens.CONTAINER;
            } 
            // fall through
          case 161: break;
          case 67: 
            { return Tokens.COMPONENT;
            } 
            // fall through
          case 162: break;
          case 68: 
            { return Tokens.INSTANCES;
            } 
            // fall through
          case 163: break;
          case 69: 
            { return Tokens.COMPONENT_SHAPE;
            } 
            // fall through
          case 164: break;
          case 70: 
            { return Tokens.TECHNOLOGY;
            } 
            // fall through
          case 165: break;
          case 71: 
            { return Tokens.DEPLOYMENT;
            } 
            // fall through
          case 166: break;
          case 72: 
            { return Tokens.PROPERTIES;
            } 
            // fall through
          case 167: break;
          case 73: 
            { return Tokens.AUTOLAYOUT;
            } 
            // fall through
          case 168: break;
          case 74: 
            { return Tokens.BACKGROUND;
            } 
            // fall through
          case 169: break;
          case 75: 
            { return Tokens.ROUNDED_BOX;
            } 
            // fall through
          case 170: break;
          case 76: 
            { return Tokens.WEB_BROWSER;
            } 
            // fall through
          case 171: break;
          case 77: 
            { return Tokens.DESCRIPTION;
            } 
            // fall through
          case 172: break;
          case 78: 
            { return Tokens.STROKE_WIDTH;
            } 
            // fall through
          case 173: break;
          case 79: 
            { return Tokens.HEALTH_CHECK;
            } 
            // fall through
          case 174: break;
          case 80: 
            { return Tokens.RELATIONSHIP;
            } 
            // fall through
          case 175: break;
          case 81: 
            { return Tokens.PERSPECTIVES;
            } 
            // fall through
          case 176: break;
          case 82: 
            { return Tokens.IDENTIFIERS;
            } 
            // fall through
          case 177: break;
          case 83: 
            { return Tokens.HIERARCHICAL;
            } 
            // fall through
          case 178: break;
          case 84: 
            { return Tokens.SYSTEM_CONTEXT;
            } 
            // fall through
          case 179: break;
          case 85: 
            { return Tokens.CONFIGURATION;
            } 
            // fall through
          case 180: break;
          case 86: 
            { return Tokens.DEPLOYMENT_NODE;
            } 
            // fall through
          case 181: break;
          case 87: 
            { return Tokens.SOFTWARE_SYSTEM;
            } 
            // fall through
          case 182: break;
          case 88: 
            { return Tokens.DEPLOYMENT_GROUP;
            } 
            // fall through
          case 183: break;
          case 89: 
            { return Tokens.SYSTEM_LANDSCAPE;
            } 
            // fall through
          case 184: break;
          case 90: 
            { return Tokens.CONTAINER_INSTANCE;
            } 
            // fall through
          case 185: break;
          case 91: 
            { return Tokens.INFRASTRUCTURE_NODE;
            } 
            // fall through
          case 186: break;
          case 92: 
            { return Tokens.MOBILE_DEVICE_PORTRAIT;
            } 
            // fall through
          case 187: break;
          case 93: 
            { return Tokens.DEPLOYMENT_ENVIRONMENT;
            } 
            // fall through
          case 188: break;
          case 94: 
            { return Tokens.MOBILE_DEVICE_LANDSCAPE;
            } 
            // fall through
          case 189: break;
          case 95: 
            { return Tokens.SOFTWARE_SYSTEM_INSTANCE;
            } 
            // fall through
          case 190: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
