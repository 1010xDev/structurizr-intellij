/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.github.guillaumetaffin.structurizr.intellij.dsl;

import com.github.guillaumetaffin.structurizr.intellij.dsl.psi.Tokens;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;

import static com.intellij.psi.TokenType.WHITE_SPACE;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>structurizr-dsl.flex</tt>
 */
class StructurizrDslLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\1\4\1\1\1\2\22\0\1\1\1\32\1\3\7\0\1\46\2\0\1\35\17\0\1\51\1"+
    "\36\4\0\1\43\1\0\1\37\1\0\1\40\1\0\1\42\2\0\1\44\1\0\1\41\4\0\1\25\15\0\1"+
    "\20\1\45\1\21\1\11\1\5\1\24\1\30\1\33\1\27\1\0\1\16\1\23\1\22\1\10\1\14\1"+
    "\17\1\0\1\15\1\12\1\7\1\31\1\34\1\13\1\6\1\26\1\0\1\47\1\0\1\50\7\0\1\4\32"+
    "\0\1\4\337\0\1\4\177\0\13\4\35\0\2\4\5\0\1\4\57\0\1\4\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\26\1\1\6"+
    "\1\7\1\10\1\11\1\4\6\1\1\12\6\1\1\13"+
    "\12\1\1\14\14\1\1\15\1\16\41\1\1\17\12\1"+
    "\1\20\1\1\1\21\1\22\23\1\1\23\20\1\1\24"+
    "\7\1\1\25\13\1\1\26\4\1\1\27\1\30\1\31"+
    "\1\32\3\1\1\33\13\1\1\34\10\1\1\35\10\1"+
    "\1\36\1\37\1\40\3\1\1\41\1\42\14\1\1\43"+
    "\2\1\1\44\15\1\1\45\5\1\1\46\13\1\1\47"+
    "\2\1\1\50\1\1\1\51\1\1\1\52\1\53\4\1"+
    "\1\54\1\1\1\55\4\1\1\56\1\57\6\1\1\60"+
    "\13\1\1\61\7\1\1\62\3\1\1\63\1\64\4\1"+
    "\1\65\2\1\1\66\3\1\1\67\1\70\4\1\1\71"+
    "\1\1\1\72\10\1\1\73\3\1\1\74\4\1\1\75"+
    "\1\1\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[367];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\176\0\322\0\374"+
    "\0\u0126\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c"+
    "\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c"+
    "\0\u03c6\0\u03f0\0\u041a\0\u0444\0\52\0\176\0\52\0\176"+
    "\0\176\0\u046e\0\u0498\0\u04c2\0\u04ec\0\u0516\0\u0540\0\52"+
    "\0\u056a\0\u0594\0\u05be\0\u05e8\0\u0612\0\u063c\0\52\0\u0666"+
    "\0\u0690\0\u06ba\0\u06e4\0\u070e\0\u0738\0\u0762\0\u078c\0\u07b6"+
    "\0\u07e0\0\52\0\u080a\0\u0834\0\u085e\0\u0888\0\u08b2\0\u08dc"+
    "\0\u0906\0\u0930\0\u095a\0\u0984\0\u09ae\0\u09d8\0\52\0\52"+
    "\0\u0a02\0\u0a2c\0\u0a56\0\u0a80\0\u0aaa\0\u0ad4\0\u0afe\0\u0b28"+
    "\0\u0b52\0\u0b7c\0\u0ba6\0\u0bd0\0\u0bfa\0\u0c24\0\u0c4e\0\u0c78"+
    "\0\u0ca2\0\u0ccc\0\u0cf6\0\u0d20\0\u0d4a\0\u0d74\0\u0d9e\0\u0dc8"+
    "\0\u0df2\0\u0e1c\0\u0e46\0\u0e70\0\u0e9a\0\u0ec4\0\u0eee\0\u0f18"+
    "\0\u0f42\0\52\0\u0f6c\0\u0f96\0\u0fc0\0\u0fea\0\u1014\0\u103e"+
    "\0\u1068\0\u1092\0\u10bc\0\u10e6\0\52\0\u1110\0\52\0\52"+
    "\0\u113a\0\u1164\0\u118e\0\u11b8\0\u11e2\0\u120c\0\u1236\0\u1260"+
    "\0\u128a\0\u12b4\0\u12de\0\u1308\0\u1332\0\u135c\0\u1386\0\u13b0"+
    "\0\u13da\0\u1404\0\u142e\0\52\0\u1458\0\u1482\0\u14ac\0\u14d6"+
    "\0\u1500\0\u152a\0\u1554\0\u157e\0\u15a8\0\u15d2\0\u15fc\0\u1626"+
    "\0\u1650\0\u167a\0\u16a4\0\u16ce\0\52\0\u16f8\0\u1722\0\u174c"+
    "\0\u1776\0\u17a0\0\u17ca\0\u17f4\0\52\0\u181e\0\u1848\0\u1872"+
    "\0\u189c\0\u18c6\0\u18f0\0\u191a\0\u1944\0\u196e\0\u1998\0\u19c2"+
    "\0\52\0\u19ec\0\u1a16\0\u1a40\0\u1a6a\0\52\0\52\0\52"+
    "\0\52\0\u1a94\0\u1abe\0\u1ae8\0\52\0\u1b12\0\u1b3c\0\u1b66"+
    "\0\u1b90\0\u1bba\0\u1be4\0\u1c0e\0\u1c38\0\u1c62\0\u1c8c\0\u1cb6"+
    "\0\52\0\u1ce0\0\u1d0a\0\u1d34\0\u1d5e\0\u1d88\0\u1db2\0\u1ddc"+
    "\0\u1e06\0\52\0\u1e30\0\u1e5a\0\u1e84\0\u1eae\0\u1ed8\0\u1f02"+
    "\0\u1f2c\0\u1f56\0\52\0\52\0\52\0\u1f80\0\u1faa\0\u1fd4"+
    "\0\52\0\52\0\u1ffe\0\u2028\0\u2052\0\u207c\0\u20a6\0\u20d0"+
    "\0\u20fa\0\u2124\0\u214e\0\u2178\0\u21a2\0\u21cc\0\52\0\u21f6"+
    "\0\u2220\0\52\0\u224a\0\u2274\0\u229e\0\u22c8\0\u22f2\0\u231c"+
    "\0\u2346\0\u2370\0\u239a\0\u23c4\0\u23ee\0\u2418\0\u2442\0\52"+
    "\0\u246c\0\u2496\0\u24c0\0\u24ea\0\u2514\0\52\0\u253e\0\u2568"+
    "\0\u2592\0\u25bc\0\u25e6\0\u2610\0\u263a\0\u2664\0\u268e\0\u26b8"+
    "\0\u26e2\0\52\0\u270c\0\u2736\0\52\0\u2760\0\u278a\0\u27b4"+
    "\0\52\0\52\0\u27de\0\u2808\0\u2832\0\u285c\0\52\0\u2886"+
    "\0\u28b0\0\u28da\0\u2904\0\u292e\0\u2958\0\52\0\52\0\u2982"+
    "\0\u29ac\0\u29d6\0\u2a00\0\u2a2a\0\u2a54\0\52\0\u2a7e\0\u2aa8"+
    "\0\u2ad2\0\u2afc\0\u2b26\0\u2b50\0\u2b7a\0\u2ba4\0\u2bce\0\u2bf8"+
    "\0\u2c22\0\52\0\u2c4c\0\u2c76\0\u2ca0\0\u2cca\0\u2cf4\0\u2d1e"+
    "\0\u2d48\0\52\0\u2d72\0\u2d9c\0\u2dc6\0\52\0\52\0\u2df0"+
    "\0\u2e1a\0\u2e44\0\u2e6e\0\52\0\u2e98\0\u2ec2\0\52\0\u2eec"+
    "\0\u2f16\0\u2f40\0\52\0\u2f6a\0\u2f94\0\u2fbe\0\u2fe8\0\u3012"+
    "\0\52\0\u303c\0\52\0\u3066\0\u3090\0\u30ba\0\u30e4\0\u310e"+
    "\0\u3138\0\u3162\0\u318c\0\52\0\u31b6\0\u31e0\0\u320a\0\52"+
    "\0\u3234\0\u325e\0\u3288\0\u32b2\0\52\0\u32dc\0\52";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[367];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\14\1\2\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\2\2\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\7\2\1\34\1\35"+
    "\1\36\1\37\1\40\1\2\4\0\42\2\1\0\1\2"+
    "\2\0\1\3\122\0\2\5\1\0\1\41\46\5\1\2"+
    "\4\0\1\2\1\42\14\2\1\43\23\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\44\12\2\1\45\6\2\1\46"+
    "\3\2\1\47\11\2\1\50\1\2\1\0\1\2\1\0"+
    "\1\2\4\0\13\2\1\51\26\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\52\20\2\1\53\20\2\1\0\1\2"+
    "\1\0\1\2\4\0\7\2\1\54\11\2\1\55\20\2"+
    "\1\0\1\2\1\0\1\2\4\0\7\2\1\56\32\2"+
    "\1\0\1\2\1\0\1\2\4\0\16\2\1\57\23\2"+
    "\1\0\1\2\1\0\1\2\4\0\10\2\1\60\31\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\61\7\2\1\62"+
    "\5\2\1\63\23\2\1\0\1\2\1\0\1\2\4\0"+
    "\3\2\1\64\20\2\1\65\15\2\1\0\1\2\1\0"+
    "\1\2\4\0\7\2\1\66\14\2\1\67\15\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\70\6\2\1\71\32\2"+
    "\1\0\1\2\1\0\1\2\4\0\10\2\1\72\31\2"+
    "\1\0\1\2\1\0\1\2\4\0\16\2\1\73\3\2"+
    "\1\74\17\2\1\0\1\2\1\0\1\2\4\0\3\2"+
    "\1\75\11\2\1\76\24\2\1\0\1\2\1\0\1\2"+
    "\4\0\10\2\1\77\31\2\1\0\1\2\1\0\1\2"+
    "\4\0\10\2\1\100\31\2\1\0\1\2\1\0\1\2"+
    "\4\0\4\2\1\101\6\2\1\102\6\2\1\103\17\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\104\21\2\1\105"+
    "\17\2\1\0\1\2\1\0\1\2\4\0\22\2\1\106"+
    "\17\2\1\0\1\2\1\0\1\2\4\0\31\2\1\107"+
    "\10\2\1\0\1\2\1\0\1\2\4\0\2\2\1\110"+
    "\37\2\1\0\1\2\1\0\1\2\4\0\2\2\1\111"+
    "\11\2\1\112\25\2\1\0\1\2\1\0\1\2\4\0"+
    "\1\113\41\2\1\0\1\2\1\0\1\2\4\0\14\2"+
    "\1\114\25\2\1\0\1\2\1\0\1\2\4\0\23\2"+
    "\1\115\16\2\1\0\1\2\1\0\1\2\4\0\2\2"+
    "\1\116\37\2\1\0\1\2\1\0\1\2\4\0\22\2"+
    "\1\117\17\2\1\0\1\2\1\0\1\2\4\0\15\2"+
    "\1\120\24\2\1\0\1\2\1\0\1\2\4\0\5\2"+
    "\1\121\4\2\1\122\4\2\1\123\22\2\1\0\1\2"+
    "\1\0\1\2\4\0\3\2\1\124\36\2\1\0\1\2"+
    "\1\0\1\2\4\0\17\2\1\125\22\2\1\0\1\2"+
    "\1\0\1\2\4\0\5\2\1\126\34\2\1\0\1\2"+
    "\1\0\1\2\4\0\10\2\1\127\31\2\1\0\1\2"+
    "\1\0\1\2\4\0\7\2\1\130\32\2\1\0\1\2"+
    "\1\0\1\2\4\0\10\2\1\131\31\2\1\0\1\2"+
    "\1\0\1\2\4\0\7\2\1\132\32\2\1\0\1\2"+
    "\1\0\1\2\4\0\13\2\1\133\26\2\1\0\1\2"+
    "\1\0\1\2\4\0\22\2\1\134\17\2\1\0\1\2"+
    "\1\0\1\2\4\0\2\2\1\135\37\2\1\0\1\2"+
    "\1\0\1\2\4\0\3\2\1\136\11\2\1\137\24\2"+
    "\1\0\1\2\1\0\1\2\4\0\5\2\1\140\34\2"+
    "\1\0\1\2\1\0\1\2\4\0\10\2\1\141\31\2"+
    "\1\0\1\2\1\0\1\2\4\0\4\2\1\142\35\2"+
    "\1\0\1\2\1\0\1\2\4\0\13\2\1\143\26\2"+
    "\1\0\1\2\1\0\1\2\4\0\16\2\1\144\23\2"+
    "\1\0\1\2\1\0\1\2\4\0\5\2\1\145\6\2"+
    "\1\146\2\2\1\147\22\2\1\0\1\2\1\0\1\2"+
    "\4\0\13\2\1\150\26\2\1\0\1\2\1\0\1\2"+
    "\4\0\7\2\1\151\32\2\1\0\1\2\1\0\1\2"+
    "\4\0\16\2\1\152\23\2\1\0\1\2\1\0\1\2"+
    "\4\0\7\2\1\153\32\2\1\0\1\2\1\0\1\2"+
    "\4\0\4\2\1\154\35\2\1\0\1\2\1\0\1\2"+
    "\4\0\4\2\1\155\35\2\1\0\1\2\1\0\1\2"+
    "\4\0\13\2\1\156\26\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\157\41\2\1\0\1\2\1\0\1\2\4\0"+
    "\1\160\41\2\1\0\1\2\1\0\1\2\4\0\1\161"+
    "\41\2\1\0\1\2\1\0\1\2\4\0\16\2\1\162"+
    "\23\2\1\0\1\2\1\0\1\2\4\0\15\2\1\163"+
    "\24\2\1\0\1\2\1\0\1\2\4\0\26\2\1\164"+
    "\13\2\1\0\1\2\1\0\1\2\4\0\5\2\1\165"+
    "\34\2\1\0\1\2\1\0\1\2\4\0\16\2\1\166"+
    "\23\2\1\0\1\2\1\0\1\2\4\0\5\2\1\167"+
    "\34\2\1\0\1\2\1\0\1\2\4\0\1\170\41\2"+
    "\1\0\1\2\1\0\1\2\4\0\14\2\1\171\25\2"+
    "\1\0\1\2\1\0\1\2\4\0\16\2\1\172\23\2"+
    "\1\0\1\2\1\0\1\2\4\0\13\2\1\173\26\2"+
    "\1\0\1\2\1\0\1\2\4\0\13\2\1\174\26\2"+
    "\1\0\1\2\1\0\1\2\4\0\2\2\1\175\37\2"+
    "\1\0\1\2\1\0\1\2\4\0\2\2\1\176\37\2"+
    "\1\0\1\2\1\0\1\2\4\0\11\2\1\177\30\2"+
    "\1\0\1\2\1\0\1\2\4\0\11\2\1\200\30\2"+
    "\1\0\1\2\1\0\1\2\4\0\5\2\1\201\34\2"+
    "\1\0\1\2\1\0\1\2\4\0\12\2\1\202\27\2"+
    "\1\0\1\2\1\0\1\2\4\0\3\2\1\203\36\2"+
    "\1\0\1\2\1\0\1\2\4\0\15\2\1\204\24\2"+
    "\1\0\1\2\1\0\1\2\4\0\7\2\1\205\32\2"+
    "\1\0\1\2\1\0\1\2\4\0\2\2\1\206\14\2"+
    "\1\207\22\2\1\0\1\2\1\0\1\2\4\0\12\2"+
    "\1\210\27\2\1\0\1\2\1\0\1\2\4\0\2\2"+
    "\1\211\37\2\1\0\1\2\1\0\1\2\4\0\15\2"+
    "\1\212\24\2\1\0\1\2\1\0\1\2\4\0\1\213"+
    "\41\2\1\0\1\2\1\0\1\2\4\0\2\2\1\214"+
    "\37\2\1\0\1\2\1\0\1\2\4\0\2\2\1\215"+
    "\37\2\1\0\1\2\1\0\1\2\4\0\2\2\1\216"+
    "\37\2\1\0\1\2\1\0\1\2\4\0\16\2\1\217"+
    "\23\2\1\0\1\2\1\0\1\2\4\0\10\2\1\220"+
    "\31\2\1\0\1\2\1\0\1\2\4\0\23\2\1\221"+
    "\16\2\1\0\1\2\1\0\1\2\4\0\24\2\1\222"+
    "\15\2\1\0\1\2\1\0\1\2\4\0\14\2\1\223"+
    "\25\2\1\0\1\2\1\0\1\2\4\0\10\2\1\224"+
    "\31\2\1\0\1\2\1\0\1\2\4\0\1\225\41\2"+
    "\1\0\1\2\1\0\1\2\4\0\16\2\1\226\23\2"+
    "\1\0\1\2\1\0\1\2\4\0\10\2\1\227\31\2"+
    "\1\0\1\2\1\0\1\2\4\0\6\2\1\230\33\2"+
    "\1\0\1\2\1\0\1\2\4\0\3\2\1\231\36\2"+
    "\1\0\1\2\1\0\1\2\4\0\24\2\1\232\15\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\233\41\2\1\0"+
    "\1\2\1\0\1\2\4\0\3\2\1\234\36\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\235\41\2\1\0\1\2"+
    "\1\0\1\2\4\0\10\2\1\236\31\2\1\0\1\2"+
    "\1\0\1\2\4\0\7\2\1\237\32\2\1\0\1\2"+
    "\1\0\1\2\4\0\24\2\1\240\15\2\1\0\1\2"+
    "\1\0\1\2\4\0\15\2\1\241\24\2\1\0\1\2"+
    "\1\0\1\2\4\0\6\2\1\242\33\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\243\41\2\1\0\1\2\1\0"+
    "\1\2\4\0\5\2\1\244\34\2\1\0\1\2\1\0"+
    "\1\2\4\0\22\2\1\245\17\2\1\0\1\2\1\0"+
    "\1\2\4\0\7\2\1\246\2\2\1\247\27\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\250\41\2\1\0\1\2"+
    "\1\0\1\2\4\0\2\2\1\251\37\2\1\0\1\2"+
    "\1\0\1\2\4\0\13\2\1\252\26\2\1\0\1\2"+
    "\1\0\1\2\4\0\16\2\1\253\23\2\1\0\1\2"+
    "\1\0\1\2\4\0\13\2\1\254\26\2\1\0\1\2"+
    "\1\0\1\2\4\0\22\2\1\255\17\2\1\0\1\2"+
    "\1\0\1\2\4\0\7\2\1\256\32\2\1\0\1\2"+
    "\1\0\1\2\4\0\7\2\1\257\32\2\1\0\1\2"+
    "\1\0\1\2\4\0\13\2\1\260\26\2\1\0\1\2"+
    "\1\0\1\2\4\0\16\2\1\261\23\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\262\41\2\1\0\1\2\1\0"+
    "\1\2\4\0\13\2\1\263\26\2\1\0\1\2\1\0"+
    "\1\2\4\0\24\2\1\264\15\2\1\0\1\2\1\0"+
    "\1\2\4\0\13\2\1\265\26\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\266\41\2\1\0\1\2\1\0\1\2"+
    "\4\0\12\2\1\267\27\2\1\0\1\2\1\0\1\2"+
    "\4\0\5\2\1\270\34\2\1\0\1\2\1\0\1\2"+
    "\4\0\5\2\1\271\34\2\1\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\272\36\2\1\0\1\2\1\0\1\2"+
    "\4\0\2\2\1\273\37\2\1\0\1\2\1\0\1\2"+
    "\4\0\13\2\1\274\26\2\1\0\1\2\1\0\1\2"+
    "\4\0\5\2\1\275\34\2\1\0\1\2\1\0\1\2"+
    "\4\0\4\2\1\276\35\2\1\0\1\2\1\0\1\2"+
    "\4\0\4\2\1\277\35\2\1\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\300\36\2\1\0\1\2\1\0\1\2"+
    "\4\0\7\2\1\301\32\2\1\0\1\2\1\0\1\2"+
    "\4\0\22\2\1\302\17\2\1\0\1\2\1\0\1\2"+
    "\4\0\21\2\1\303\20\2\1\0\1\2\1\0\1\2"+
    "\4\0\16\2\1\304\23\2\1\0\1\2\1\0\1\2"+
    "\4\0\22\2\1\305\17\2\1\0\1\2\1\0\1\2"+
    "\4\0\13\2\1\306\26\2\1\0\1\2\1\0\1\2"+
    "\4\0\15\2\1\307\24\2\1\0\1\2\1\0\1\2"+
    "\4\0\12\2\1\310\27\2\1\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\311\36\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\312\41\2\1\0\1\2\1\0\1\2\4\0"+
    "\10\2\1\313\31\2\1\0\1\2\1\0\1\2\4\0"+
    "\24\2\1\314\15\2\1\0\1\2\1\0\1\2\4\0"+
    "\2\2\1\315\37\2\1\0\1\2\1\0\1\2\4\0"+
    "\13\2\1\316\26\2\1\0\1\2\1\0\1\2\4\0"+
    "\22\2\1\317\17\2\1\0\1\2\1\0\1\2\4\0"+
    "\23\2\1\320\16\2\1\0\1\2\1\0\1\2\4\0"+
    "\3\2\1\321\36\2\1\0\1\2\1\0\1\2\4\0"+
    "\15\2\1\322\24\2\1\0\1\2\1\0\1\2\4\0"+
    "\22\2\1\323\17\2\1\0\1\2\1\0\1\2\4\0"+
    "\10\2\1\324\31\2\1\0\1\2\1\0\1\2\4\0"+
    "\3\2\1\325\36\2\1\0\1\2\1\0\1\2\4\0"+
    "\4\2\1\326\35\2\1\0\1\2\1\0\1\2\4\0"+
    "\5\2\1\327\34\2\1\0\1\2\1\0\1\2\4\0"+
    "\2\2\1\330\37\2\1\0\1\2\1\0\1\2\4\0"+
    "\26\2\1\331\13\2\1\0\1\2\1\0\1\2\4\0"+
    "\10\2\1\332\31\2\1\0\1\2\1\0\1\2\4\0"+
    "\5\2\1\333\34\2\1\0\1\2\1\0\1\2\4\0"+
    "\1\334\41\2\1\0\1\2\1\0\1\2\4\0\2\2"+
    "\1\335\37\2\1\0\1\2\1\0\1\2\4\0\16\2"+
    "\1\336\23\2\1\0\1\2\1\0\1\2\4\0\12\2"+
    "\1\337\27\2\1\0\1\2\1\0\1\2\4\0\15\2"+
    "\1\340\24\2\1\0\1\2\1\0\1\2\4\0\2\2"+
    "\1\341\37\2\1\0\1\2\1\0\1\2\4\0\14\2"+
    "\1\342\25\2\1\0\1\2\1\0\1\2\4\0\10\2"+
    "\1\343\31\2\1\0\1\2\1\0\1\2\4\0\36\2"+
    "\1\344\1\345\2\2\1\0\1\2\1\0\1\2\4\0"+
    "\13\2\1\346\26\2\1\0\1\2\1\0\1\2\4\0"+
    "\14\2\1\347\25\2\1\0\1\2\1\0\1\2\4\0"+
    "\2\2\1\350\37\2\1\0\1\2\1\0\1\2\4\0"+
    "\15\2\1\351\24\2\1\0\1\2\1\0\1\2\4\0"+
    "\22\2\1\352\17\2\1\0\1\2\1\0\1\2\4\0"+
    "\21\2\1\353\20\2\1\0\1\2\1\0\1\2\4\0"+
    "\3\2\1\354\36\2\1\0\1\2\1\0\1\2\4\0"+
    "\24\2\1\355\15\2\1\0\1\2\1\0\1\2\4\0"+
    "\1\356\41\2\1\0\1\2\1\0\1\2\4\0\4\2"+
    "\1\357\35\2\1\0\1\2\1\0\1\2\4\0\1\360"+
    "\41\2\1\0\1\2\1\0\1\2\4\0\14\2\1\361"+
    "\25\2\1\0\1\2\1\0\1\2\4\0\1\362\41\2"+
    "\1\0\1\2\1\0\1\2\4\0\2\2\1\363\37\2"+
    "\1\0\1\2\1\0\1\2\4\0\22\2\1\364\17\2"+
    "\1\0\1\2\1\0\1\2\4\0\36\2\1\365\3\2"+
    "\1\0\1\2\1\0\1\2\4\0\14\2\1\366\25\2"+
    "\1\0\1\2\1\0\1\2\4\0\7\2\1\367\32\2"+
    "\1\0\1\2\1\0\1\2\4\0\2\2\1\370\37\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\371\41\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\372\41\2\1\0\1\2"+
    "\1\0\1\2\4\0\7\2\1\373\32\2\1\0\1\2"+
    "\1\0\1\2\4\0\13\2\1\374\26\2\1\0\1\2"+
    "\1\0\1\2\4\0\14\2\1\375\25\2\1\0\1\2"+
    "\1\0\1\2\4\0\2\2\1\376\37\2\1\0\1\2"+
    "\1\0\1\2\4\0\22\2\1\377\17\2\1\0\1\2"+
    "\1\0\1\2\4\0\16\2\1\u0100\23\2\1\0\1\2"+
    "\1\0\1\2\4\0\7\2\1\u0101\32\2\1\0\1\2"+
    "\1\0\1\2\4\0\7\2\1\u0102\32\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\u0103\41\2\1\0\1\2\1\0"+
    "\1\2\4\0\10\2\1\u0104\31\2\1\0\1\2\1\0"+
    "\1\2\4\0\3\2\1\u0105\36\2\1\0\1\2\1\0"+
    "\1\2\4\0\4\2\1\u0106\35\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\u0107\41\2\1\0\1\2\1\0\1\2"+
    "\4\0\10\2\1\u0108\31\2\1\0\1\2\1\0\1\2"+
    "\4\0\17\2\1\u0109\22\2\1\0\1\2\1\0\1\2"+
    "\4\0\26\2\1\u010a\13\2\1\0\1\2\1\0\1\2"+
    "\4\0\26\2\1\u010b\13\2\1\0\1\2\1\0\1\2"+
    "\4\0\23\2\1\u010c\16\2\1\0\1\2\1\0\1\2"+
    "\4\0\22\2\1\u010d\17\2\1\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\u010e\36\2\1\0\1\2\1\0\1\2"+
    "\4\0\20\2\1\u010f\21\2\1\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\u0110\36\2\1\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\u0111\36\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\u0112\41\2\1\0\1\2\1\0\1\2\4\0"+
    "\22\2\1\u0113\17\2\1\0\1\2\1\0\1\2\4\0"+
    "\1\u0114\41\2\1\0\1\2\1\0\1\2\4\0\3\2"+
    "\1\u0115\36\2\1\0\1\2\1\0\1\2\4\0\24\2"+
    "\1\u0116\15\2\1\0\1\2\1\0\1\2\4\0\10\2"+
    "\1\u0117\31\2\1\0\1\2\1\0\1\2\4\0\13\2"+
    "\1\u0118\26\2\1\0\1\2\1\0\1\2\4\0\2\2"+
    "\1\u0119\37\2\1\0\1\2\1\0\1\2\4\0\5\2"+
    "\1\u011a\34\2\1\0\1\2\1\0\1\2\4\0\24\2"+
    "\1\u011b\15\2\1\0\1\2\1\0\1\2\4\0\22\2"+
    "\1\u011c\17\2\1\0\1\2\1\0\1\2\4\0\1\u011d"+
    "\41\2\1\0\1\2\1\0\1\2\4\0\22\2\1\u011e"+
    "\17\2\1\0\1\2\1\0\1\2\4\0\21\2\1\u011f"+
    "\20\2\1\0\1\2\1\0\1\2\4\0\7\2\1\u0120"+
    "\32\2\1\0\1\2\1\0\1\2\4\0\2\2\1\u0121"+
    "\37\2\1\0\1\2\1\0\1\2\4\0\21\2\1\u0122"+
    "\20\2\1\0\1\2\1\0\1\2\4\0\2\2\1\u0123"+
    "\37\2\1\0\1\2\1\0\1\2\4\0\4\2\1\u0124"+
    "\35\2\1\0\1\2\1\0\1\2\4\0\27\2\1\u0125"+
    "\12\2\1\0\1\2\1\0\1\2\4\0\5\2\1\u0126"+
    "\34\2\1\0\1\2\1\0\1\2\4\0\2\2\1\u0127"+
    "\37\2\1\0\1\2\1\0\1\2\4\0\35\2\1\u0128"+
    "\4\2\1\0\1\2\1\0\1\2\4\0\2\2\1\u0129"+
    "\37\2\1\0\1\2\1\0\1\2\4\0\14\2\1\u012a"+
    "\25\2\1\0\1\2\1\0\1\2\4\0\1\u012b\41\2"+
    "\1\0\1\2\1\0\1\2\4\0\14\2\1\u012c\25\2"+
    "\1\0\1\2\1\0\1\2\4\0\14\2\1\u012d\25\2"+
    "\1\0\1\2\1\0\1\2\4\0\3\2\1\u012e\36\2"+
    "\1\0\1\2\1\0\1\2\4\0\32\2\1\u012f\1\u0130"+
    "\1\u0131\5\2\1\0\1\2\1\0\1\2\4\0\5\2"+
    "\1\u0132\34\2\1\0\1\2\1\0\1\2\4\0\1\u0133"+
    "\41\2\1\0\1\2\1\0\1\2\4\0\5\2\1\u0134"+
    "\34\2\1\0\1\2\1\0\1\2\4\0\1\u0135\41\2"+
    "\1\0\1\2\1\0\1\2\4\0\3\2\1\u0136\36\2"+
    "\1\0\1\2\1\0\1\2\4\0\22\2\1\u0137\17\2"+
    "\1\0\1\2\1\0\1\2\4\0\2\2\1\u0138\37\2"+
    "\1\0\1\2\1\0\1\2\4\0\10\2\1\u0139\31\2"+
    "\1\0\1\2\1\0\1\2\4\0\11\2\1\u013a\30\2"+
    "\1\0\1\2\1\0\1\2\4\0\13\2\1\u013b\26\2"+
    "\1\0\1\2\1\0\1\2\4\0\3\2\1\u013c\36\2"+
    "\1\0\1\2\1\0\1\2\4\0\10\2\1\u013d\31\2"+
    "\1\0\1\2\1\0\1\2\4\0\7\2\1\u013e\32\2"+
    "\1\0\1\2\1\0\1\2\4\0\2\2\1\u013f\37\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\2\1\u0140\40\2"+
    "\1\0\1\2\1\0\1\2\4\0\14\2\1\u0141\25\2"+
    "\1\0\1\2\1\0\1\2\4\0\5\2\1\u0142\34\2"+
    "\1\0\1\2\1\0\1\2\4\0\5\2\1\u0143\34\2"+
    "\1\0\1\2\1\0\1\2\4\0\7\2\1\u0144\32\2"+
    "\1\0\1\2\1\0\1\2\4\0\24\2\1\u0145\15\2"+
    "\1\0\1\2\1\0\1\2\4\0\5\2\1\u0146\34\2"+
    "\1\0\1\2\1\0\1\2\4\0\16\2\1\u0147\23\2"+
    "\1\0\1\2\1\0\1\2\4\0\27\2\1\u0148\12\2"+
    "\1\0\1\2\1\0\1\2\4\0\7\2\1\u0149\32\2"+
    "\1\0\1\2\1\0\1\2\4\0\4\2\1\u014a\35\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\u014b\41\2\1\0"+
    "\1\2\1\0\1\2\4\0\2\2\1\u014c\37\2\1\0"+
    "\1\2\1\0\1\2\4\0\13\2\1\u014d\26\2\1\0"+
    "\1\2\1\0\1\2\4\0\2\2\1\u014e\37\2\1\0"+
    "\1\2\1\0\1\2\4\0\3\2\1\u014f\36\2\1\0"+
    "\1\2\1\0\1\2\4\0\10\2\1\u0150\31\2\1\0"+
    "\1\2\1\0\1\2\4\0\22\2\1\u0151\17\2\1\0"+
    "\1\2\1\0\1\2\4\0\24\2\1\u0152\15\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\u0153\41\2\1\0\1\2"+
    "\1\0\1\2\4\0\15\2\1\u0154\24\2\1\0\1\2"+
    "\1\0\1\2\4\0\12\2\1\u0155\27\2\1\0\1\2"+
    "\1\0\1\2\4\0\13\2\1\u0156\26\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\u0157\41\2\1\0\1\2\1\0"+
    "\1\2\4\0\10\2\1\u0158\31\2\1\0\1\2\1\0"+
    "\1\2\4\0\12\2\1\u0159\27\2\1\0\1\2\1\0"+
    "\1\2\4\0\35\2\1\u015a\4\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\u015b\41\2\1\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\u015c\36\2\1\0\1\2\1\0\1\2"+
    "\4\0\34\2\1\u015d\5\2\1\0\1\2\1\0\1\2"+
    "\4\0\7\2\1\u015e\32\2\1\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\u015f\36\2\1\0\1\2\1\0\1\2"+
    "\4\0\14\2\1\u0160\25\2\1\0\1\2\1\0\1\2"+
    "\4\0\7\2\1\u0161\32\2\1\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\u0162\36\2\1\0\1\2\1\0\1\2"+
    "\4\0\5\2\1\u0163\34\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\u0164\41\2\1\0\1\2\1\0\1\2\4\0"+
    "\4\2\1\u0165\35\2\1\0\1\2\1\0\1\2\4\0"+
    "\15\2\1\u0166\24\2\1\0\1\2\1\0\1\2\4\0"+
    "\2\2\1\u0167\37\2\1\0\1\2\1\0\1\2\4\0"+
    "\1\u0168\41\2\1\0\1\2\1\0\1\2\4\0\1\u0169"+
    "\41\2\1\0\1\2\1\0\1\2\4\0\13\2\1\u016a"+
    "\26\2\1\0\1\2\1\0\1\2\4\0\3\2\1\u016b"+
    "\36\2\1\0\1\2\1\0\1\2\4\0\3\2\1\u016c"+
    "\36\2\1\0\1\2\1\0\1\2\4\0\2\2\1\u016d"+
    "\37\2\1\0\1\2\1\0\1\2\4\0\14\2\1\u016e"+
    "\25\2\1\0\1\2\1\0\1\2\4\0\1\u016f\41\2"+
    "\1\0\1\2\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13062];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\11\1\1\1\11\27\1\1\11\1\1"+
    "\2\11\u014e\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[367];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  StructurizrDslLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return Tokens.UNQUOTED_TEXT;
            } 
            // fall through
          case 63: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 64: break;
          case 3: 
            { return Tokens.LINE_BREAK;
            } 
            // fall through
          case 65: break;
          case 4: 
            { return Tokens.QUOTED_TEXT;
            } 
            // fall through
          case 66: break;
          case 5: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 67: break;
          case 6: 
            { return Tokens.STAR;
            } 
            // fall through
          case 68: break;
          case 7: 
            { return Tokens.OPEN_PARENS;
            } 
            // fall through
          case 69: break;
          case 8: 
            { return Tokens.CLOSE_PARENS;
            } 
            // fall through
          case 70: break;
          case 9: 
            { return Tokens.EQ;
            } 
            // fall through
          case 71: break;
          case 10: 
            { return Tokens.TB;
            } 
            // fall through
          case 72: break;
          case 11: 
            { return Tokens.RL;
            } 
            // fall through
          case 73: break;
          case 12: 
            { return Tokens.LR;
            } 
            // fall through
          case 74: break;
          case 13: 
            { return Tokens.RELATION_ARROW;
            } 
            // fall through
          case 75: break;
          case 14: 
            { return Tokens.BT;
            } 
            // fall through
          case 76: break;
          case 15: 
            { return Tokens.URL;
            } 
            // fall through
          case 77: break;
          case 16: 
            { return Tokens.TAGS;
            } 
            // fall through
          case 78: break;
          case 17: 
            { return Tokens.THIS;
            } 
            // fall through
          case 79: break;
          case 18: 
            { return Tokens.NAME;
            } 
            // fall through
          case 80: break;
          case 19: 
            { return Tokens.FLAT;
            } 
            // fall through
          case 81: break;
          case 20: 
            { return Tokens.TITLE;
            } 
            // fall through
          case 82: break;
          case 21: 
            { return Tokens.KROKI;
            } 
            // fall through
          case 83: break;
          case 22: 
            { return Tokens.MODEL;
            } 
            // fall through
          case 84: break;
          case 23: 
            { return Tokens.IMAGE;
            } 
            // fall through
          case 85: break;
          case 24: 
            { return Tokens.GROUP;
            } 
            // fall through
          case 86: break;
          case 25: 
            { return Tokens.DOCS;
            } 
            // fall through
          case 87: break;
          case 26: 
            { return Tokens.ADRS;
            } 
            // fall through
          case 88: break;
          case 27: 
            { return Tokens.VIEWS;
            } 
            // fall through
          case 89: break;
          case 28: 
            { return Tokens.PERSON;
            } 
            // fall through
          case 90: break;
          case 29: 
            { return Tokens.CUSTOM;
            } 
            // fall through
          case 91: break;
          case 30: 
            { return Tokens.EXTENDS;
            } 
            // fall through
          case 92: break;
          case 31: 
            { return Tokens.EXCLUDE;
            } 
            // fall through
          case 93: break;
          case 32: 
            { return Tokens.ELEMENT;
            } 
            // fall through
          case 94: break;
          case 33: 
            { return Tokens.DEFAULT;
            } 
            // fall through
          case 95: break;
          case 34: 
            { return Tokens.DYNAMIC;
            } 
            // fall through
          case 96: break;
          case 35: 
            { return Tokens.MERMAID;
            } 
            // fall through
          case 97: break;
          case 36: 
            { return Tokens.INCLUDE;
            } 
            // fall through
          case 98: break;
          case 37: 
            { return Tokens.PLANTUML;
            } 
            // fall through
          case 99: break;
          case 38: 
            { return Tokens.FILTERED;
            } 
            // fall through
          case 100: break;
          case 39: 
            { return Tokens.WORKSPACE;
            } 
            // fall through
          case 101: break;
          case 40: 
            { return Tokens.ANIMATION;
            } 
            // fall through
          case 102: break;
          case 41: 
            { return Tokens.CONTAINER;
            } 
            // fall through
          case 103: break;
          case 42: 
            { return Tokens.COMPONENT;
            } 
            // fall through
          case 104: break;
          case 43: 
            { return Tokens.INSTANCES;
            } 
            // fall through
          case 105: break;
          case 44: 
            { return Tokens.TECHNOLOGY;
            } 
            // fall through
          case 106: break;
          case 45: 
            { return Tokens.DEPLOYMENT;
            } 
            // fall through
          case 107: break;
          case 46: 
            { return Tokens.PROPERTIES;
            } 
            // fall through
          case 108: break;
          case 47: 
            { return Tokens.AUTOLAYOUT;
            } 
            // fall through
          case 109: break;
          case 48: 
            { return Tokens.DESCRIPTION;
            } 
            // fall through
          case 110: break;
          case 49: 
            { return Tokens.HEALTH_CHECK;
            } 
            // fall through
          case 111: break;
          case 50: 
            { return Tokens.PERSPECTIVES;
            } 
            // fall through
          case 112: break;
          case 51: 
            { return Tokens.IDENTIFIERS;
            } 
            // fall through
          case 113: break;
          case 52: 
            { return Tokens.HIERARCHICAL;
            } 
            // fall through
          case 114: break;
          case 53: 
            { return Tokens.SYSTEM_CONTEXT;
            } 
            // fall through
          case 115: break;
          case 54: 
            { return Tokens.CONFIGURATION;
            } 
            // fall through
          case 116: break;
          case 55: 
            { return Tokens.DEPLOYMENT_NODE;
            } 
            // fall through
          case 117: break;
          case 56: 
            { return Tokens.SOFTWARE_SYSTEM;
            } 
            // fall through
          case 118: break;
          case 57: 
            { return Tokens.DEPLOYMENT_GROUP;
            } 
            // fall through
          case 119: break;
          case 58: 
            { return Tokens.SYSTEM_LANDSCAPE;
            } 
            // fall through
          case 120: break;
          case 59: 
            { return Tokens.CONTAINER_INSTANCE;
            } 
            // fall through
          case 121: break;
          case 60: 
            { return Tokens.INFRASTRUCTURE_NODE;
            } 
            // fall through
          case 122: break;
          case 61: 
            { return Tokens.DEPLOYMENT_ENVIRONMENT;
            } 
            // fall through
          case 123: break;
          case 62: 
            { return Tokens.SOFTWARE_SYSTEM_INSTANCE;
            } 
            // fall through
          case 124: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
