/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.github.guillaumetaffin.structurizr.intellij.dsl;

import com.github.guillaumetaffin.structurizr.intellij.dsl.psi.Tokens;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;

import static com.intellij.psi.TokenType.WHITE_SPACE;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>structurizr-dsl.flex</tt>
 */
class StructurizrDslLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\1\4\1\1\1\2\22\0\1\1\1\32\1\3\7\0\1\46\2\0\1\35\17\0\1\63\1"+
    "\36\3\0\1\47\1\43\1\56\1\37\1\53\1\40\1\51\1\42\2\0\1\44\1\55\1\41\1\57\1"+
    "\52\1\0\1\50\1\25\3\0\1\54\11\0\1\20\1\45\1\21\1\11\1\5\1\24\1\30\1\33\1\27"+
    "\1\0\1\16\1\23\1\22\1\10\1\14\1\17\1\0\1\15\1\12\1\7\1\31\1\34\1\13\1\6\1"+
    "\26\1\60\1\61\1\0\1\62\7\0\1\4\32\0\1\4\337\0\1\4\177\0\13\4\35\0\2\4\5\0"+
    "\1\4\57\0\1\4\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\31\1\1\6"+
    "\11\1\1\7\1\10\1\11\1\4\7\1\1\12\16\1"+
    "\1\13\14\1\1\14\21\1\1\15\5\1\1\16\102\1"+
    "\1\17\21\1\1\20\17\1\1\21\1\22\2\1\1\23"+
    "\1\1\1\24\40\1\1\25\1\26\1\1\1\27\4\1"+
    "\1\30\4\1\1\31\22\1\1\32\12\1\1\33\1\34"+
    "\11\1\1\35\2\1\1\36\1\1\1\37\3\1\1\40"+
    "\12\1\1\41\4\1\1\42\1\1\1\43\4\1\1\44"+
    "\1\45\1\1\1\46\1\47\4\1\1\50\11\1\1\51"+
    "\14\1\1\52\4\1\1\53\1\54\1\1\1\55\1\56"+
    "\6\1\1\57\11\1\1\60\12\1\1\61\4\1\1\62"+
    "\1\63\1\64\4\1\1\65\1\66\2\1\1\67\1\1"+
    "\1\70\1\71\1\72\5\1\1\73\1\74\5\1\1\75"+
    "\1\1\1\76\12\1\1\77\3\1\1\100\1\1\1\101"+
    "\3\1\1\102\5\1\1\103\17\1\1\104\1\1\1\105"+
    "\5\1\1\106\1\107\1\110\6\1\1\111\1\112\7\1"+
    "\1\113\6\1\1\114\3\1\1\115\1\1\1\116\1\1"+
    "\1\117\1\120\4\1\1\121\6\1\1\122\1\1\1\123"+
    "\6\1\1\124\1\125\6\1\1\126\1\127\1\130\1\1"+
    "\1\131\1\132\1\133\3\1\1\134\11\1\1\135\10\1"+
    "\1\136\1\137\3\1\1\140\1\141\5\1\1\142\2\1"+
    "\1\143\5\1\1\144\1\145\6\1\1\146\1\1\1\147"+
    "\14\1\1\150\5\1\1\151\11\1\1\152\1\153\1\1"+
    "\1\154\1\155";

  private static int [] zzUnpackAction() {
    int [] result = new int[642];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\234\0\u0104\0\u0138"+
    "\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8"+
    "\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478"+
    "\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4\0\64"+
    "\0\u0618\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784"+
    "\0\u07b8\0\234\0\64\0\234\0\234\0\u07ec\0\u0820\0\u0854"+
    "\0\u0888\0\u08bc\0\u08f0\0\u0924\0\64\0\u0958\0\u098c\0\u09c0"+
    "\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60"+
    "\0\u0b94\0\u0bc8\0\u0bfc\0\64\0\u0c30\0\u0c64\0\u0c98\0\u0ccc"+
    "\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c"+
    "\0\64\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8"+
    "\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178"+
    "\0\u11ac\0\u11e0\0\64\0\u1214\0\u1248\0\u127c\0\u12b0\0\u12e4"+
    "\0\64\0\u1318\0\u134c\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u1450"+
    "\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0"+
    "\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u1790"+
    "\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u1894\0\u18c8\0\u18fc\0\u1930"+
    "\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0"+
    "\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70"+
    "\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74\0\u1da8\0\u1ddc\0\u1e10"+
    "\0\u1e44\0\u1e78\0\u1eac\0\u1ee0\0\u1f14\0\u1f48\0\u1f7c\0\u1fb0"+
    "\0\u1fe4\0\u2018\0\u204c\0\64\0\u2080\0\u20b4\0\u20e8\0\u211c"+
    "\0\u2150\0\u2184\0\u21b8\0\u21ec\0\u2220\0\u2254\0\u2288\0\u22bc"+
    "\0\u22f0\0\u2324\0\u2358\0\u238c\0\u23c0\0\64\0\u23f4\0\u2428"+
    "\0\u245c\0\u2490\0\u24c4\0\u24f8\0\u252c\0\u2560\0\u2594\0\u25c8"+
    "\0\u25fc\0\u2630\0\u2664\0\u2698\0\u26cc\0\64\0\64\0\u2700"+
    "\0\u2734\0\64\0\u2768\0\64\0\u279c\0\u27d0\0\u2804\0\u2838"+
    "\0\u286c\0\u28a0\0\u28d4\0\u2908\0\u293c\0\u2970\0\u29a4\0\u29d8"+
    "\0\u2a0c\0\u2a40\0\u2a74\0\u2aa8\0\u2adc\0\u2b10\0\u2b44\0\u2b78"+
    "\0\u2bac\0\u2be0\0\u2c14\0\u2c48\0\u2c7c\0\u2cb0\0\u2ce4\0\u2d18"+
    "\0\u2d4c\0\u2d80\0\u2db4\0\u2de8\0\64\0\u2e1c\0\u2e50\0\64"+
    "\0\u2e84\0\u2eb8\0\u2eec\0\u2f20\0\64\0\u2f54\0\u2f88\0\u2fbc"+
    "\0\u2ff0\0\64\0\u3024\0\u3058\0\u308c\0\u30c0\0\u30f4\0\u3128"+
    "\0\u315c\0\u3190\0\u31c4\0\u31f8\0\u322c\0\u3260\0\u3294\0\u32c8"+
    "\0\u32fc\0\u3330\0\u3364\0\u3398\0\64\0\u33cc\0\u3400\0\u3434"+
    "\0\u3468\0\u349c\0\u34d0\0\u3504\0\u3538\0\u356c\0\u35a0\0\64"+
    "\0\u35d4\0\u3608\0\u363c\0\u3670\0\u36a4\0\u36d8\0\u370c\0\u3740"+
    "\0\u3774\0\u37a8\0\64\0\u37dc\0\u3810\0\64\0\u3844\0\64"+
    "\0\u3878\0\u38ac\0\u38e0\0\64\0\u3914\0\u3948\0\u397c\0\u39b0"+
    "\0\u39e4\0\u3a18\0\u3a4c\0\u3a80\0\u3ab4\0\u3ae8\0\64\0\u3b1c"+
    "\0\u3b50\0\u3b84\0\u3bb8\0\64\0\u3bec\0\64\0\u3c20\0\u3c54"+
    "\0\u3c88\0\u3cbc\0\64\0\64\0\u3cf0\0\64\0\64\0\u3d24"+
    "\0\u3d58\0\u3d8c\0\u3dc0\0\64\0\u3df4\0\u3e28\0\u3e5c\0\u3e90"+
    "\0\u3ec4\0\u3ef8\0\u3f2c\0\u3f60\0\u3f94\0\64\0\u3fc8\0\u3ffc"+
    "\0\u4030\0\u4064\0\u4098\0\u40cc\0\u4100\0\u4134\0\u4168\0\u419c"+
    "\0\u41d0\0\u4204\0\64\0\u4238\0\u426c\0\u42a0\0\u42d4\0\64"+
    "\0\64\0\u4308\0\u433c\0\64\0\u4370\0\u43a4\0\u43d8\0\u440c"+
    "\0\u4440\0\u4474\0\64\0\u44a8\0\u44dc\0\u4510\0\u4544\0\u4578"+
    "\0\u45ac\0\u45e0\0\u4614\0\u4648\0\64\0\u467c\0\u46b0\0\u46e4"+
    "\0\u4718\0\u474c\0\u4780\0\u47b4\0\u47e8\0\u481c\0\u4850\0\64"+
    "\0\u4884\0\u48b8\0\u48ec\0\u4920\0\64\0\64\0\64\0\u4954"+
    "\0\u4988\0\u49bc\0\u49f0\0\64\0\64\0\u4a24\0\u4a58\0\64"+
    "\0\u4a8c\0\64\0\64\0\64\0\u4ac0\0\u4af4\0\u4b28\0\u4b5c"+
    "\0\u4b90\0\64\0\64\0\u4bc4\0\u4bf8\0\u4c2c\0\u4c60\0\u4c94"+
    "\0\64\0\u4cc8\0\64\0\u4cfc\0\u4d30\0\u4d64\0\u4d98\0\u4dcc"+
    "\0\u4e00\0\u4e34\0\u4e68\0\u4e9c\0\u4ed0\0\64\0\u4f04\0\u4f38"+
    "\0\u4f6c\0\64\0\u4fa0\0\64\0\u4fd4\0\u5008\0\u503c\0\64"+
    "\0\u5070\0\u50a4\0\u50d8\0\u510c\0\u5140\0\64\0\u5174\0\u51a8"+
    "\0\u51dc\0\u5210\0\u5244\0\u5278\0\u52ac\0\u52e0\0\u5314\0\u5348"+
    "\0\u537c\0\u53b0\0\u53e4\0\u5418\0\u544c\0\64\0\u5480\0\64"+
    "\0\u54b4\0\u54e8\0\u551c\0\u5550\0\u5584\0\64\0\64\0\64"+
    "\0\u55b8\0\u55ec\0\u5620\0\u5654\0\u5688\0\u56bc\0\64\0\64"+
    "\0\u56f0\0\u5724\0\u5758\0\u578c\0\u57c0\0\u57f4\0\u5828\0\64"+
    "\0\u585c\0\u5890\0\u58c4\0\u58f8\0\u592c\0\u5960\0\64\0\u5994"+
    "\0\u59c8\0\u59fc\0\64\0\u5a30\0\u5a64\0\u5a98\0\64\0\64"+
    "\0\u5acc\0\u5b00\0\u5b34\0\u5b68\0\64\0\u5b9c\0\u5bd0\0\u5c04"+
    "\0\u5c38\0\u5c6c\0\u5ca0\0\64\0\u5cd4\0\u5d08\0\u5d3c\0\u5d70"+
    "\0\u5da4\0\u5dd8\0\u5e0c\0\u5e40\0\64\0\64\0\u5e74\0\u5ea8"+
    "\0\u5edc\0\u5f10\0\u5f44\0\u5f78\0\64\0\64\0\64\0\u5fac"+
    "\0\64\0\64\0\64\0\u5fe0\0\u6014\0\u6048\0\64\0\u607c"+
    "\0\u60b0\0\u60e4\0\u6118\0\u614c\0\u6180\0\u61b4\0\u61e8\0\u621c"+
    "\0\64\0\u6250\0\u6284\0\u62b8\0\u62ec\0\u6320\0\u6354\0\u6388"+
    "\0\u63bc\0\64\0\64\0\u63f0\0\u6424\0\u6458\0\64\0\64"+
    "\0\u648c\0\u64c0\0\u64f4\0\u6528\0\u655c\0\64\0\u6590\0\u65c4"+
    "\0\64\0\u65f8\0\u662c\0\u6660\0\u6694\0\u66c8\0\64\0\u66fc"+
    "\0\u6730\0\u6764\0\u6798\0\u67cc\0\u6800\0\u6834\0\64\0\u6868"+
    "\0\64\0\u689c\0\u68d0\0\u6904\0\u6938\0\u696c\0\u69a0\0\u69d4"+
    "\0\u6a08\0\u6a3c\0\u6a70\0\u6aa4\0\u6ad8\0\64\0\u6b0c\0\u6b40"+
    "\0\u6b74\0\u6ba8\0\u6bdc\0\64\0\u6c10\0\u6c44\0\u6c78\0\u6cac"+
    "\0\u6ce0\0\u6d14\0\u6d48\0\u6d7c\0\u6db0\0\64\0\64\0\u6de4"+
    "\0\64\0\64";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[642];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\2\2\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\2\1\35\3\2"+
    "\1\36\1\2\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\2\1\52\1\53"+
    "\1\54\1\2\4\0\54\2\1\0\1\2\2\0\1\3"+
    "\146\0\2\5\1\0\1\55\60\5\1\2\4\0\1\2"+
    "\1\56\14\2\1\57\35\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\60\7\2\1\61\2\2\1\62\6\2\1\63"+
    "\3\2\1\64\11\2\1\65\13\2\1\0\1\2\1\0"+
    "\1\2\4\0\13\2\1\66\40\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\67\6\2\1\70\3\2\1\71\5\2"+
    "\1\72\32\2\1\0\1\2\1\0\1\2\4\0\2\2"+
    "\1\73\4\2\1\74\11\2\1\75\4\2\1\76\25\2"+
    "\1\0\1\2\1\0\1\2\4\0\7\2\1\77\12\2"+
    "\1\100\31\2\1\0\1\2\1\0\1\2\4\0\12\2"+
    "\1\101\41\2\1\0\1\2\1\0\1\2\4\0\1\102"+
    "\6\2\1\103\6\2\1\104\35\2\1\0\1\2\1\0"+
    "\1\2\4\0\10\2\1\105\43\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\106\6\2\1\107\1\110\5\2\1\111"+
    "\35\2\1\0\1\2\1\0\1\2\4\0\3\2\1\112"+
    "\20\2\1\113\27\2\1\0\1\2\1\0\1\2\4\0"+
    "\7\2\1\114\14\2\1\115\27\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\116\6\2\1\117\44\2\1\0\1\2"+
    "\1\0\1\2\4\0\7\2\1\120\1\121\43\2\1\0"+
    "\1\2\1\0\1\2\4\0\7\2\1\122\3\2\1\123"+
    "\2\2\1\124\3\2\1\125\31\2\1\0\1\2\1\0"+
    "\1\2\4\0\3\2\1\126\10\2\1\127\1\130\36\2"+
    "\1\0\1\2\1\0\1\2\4\0\10\2\1\131\43\2"+
    "\1\0\1\2\1\0\1\2\4\0\10\2\1\132\43\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\133\3\2\1\134"+
    "\3\2\1\135\2\2\1\136\6\2\1\137\31\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\140\21\2\1\141\31\2"+
    "\1\0\1\2\1\0\1\2\4\0\22\2\1\142\31\2"+
    "\1\0\1\2\1\0\1\2\4\0\31\2\1\143\22\2"+
    "\1\0\1\2\1\0\1\2\4\0\16\2\1\144\35\2"+
    "\1\0\1\2\1\0\1\2\4\0\7\2\1\145\11\2"+
    "\1\146\1\147\1\2\1\150\27\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\151\4\2\1\152\1\153\2\2"+
    "\1\154\40\2\1\0\1\2\1\0\1\2\4\0\7\2"+
    "\1\155\44\2\1\0\1\2\1\0\1\2\4\0\7\2"+
    "\1\156\44\2\1\0\1\2\1\0\1\2\4\0\1\157"+
    "\53\2\1\0\1\2\1\0\1\2\4\0\1\160\21\2"+
    "\1\161\31\2\1\0\1\2\1\0\1\2\4\0\7\2"+
    "\1\162\44\2\1\0\1\2\1\0\1\2\4\0\1\163"+
    "\53\2\1\0\1\2\1\0\1\2\4\0\7\2\1\164"+
    "\44\2\1\0\1\2\1\0\1\2\4\0\22\2\1\165"+
    "\31\2\1\0\1\2\1\0\1\2\4\0\10\2\1\166"+
    "\43\2\1\0\1\2\1\0\1\2\4\0\2\2\1\167"+
    "\11\2\1\170\37\2\1\0\1\2\1\0\1\2\4\0"+
    "\1\171\53\2\1\0\1\2\1\0\1\2\4\0\10\2"+
    "\1\172\3\2\1\173\37\2\1\0\1\2\1\0\1\2"+
    "\4\0\24\2\1\174\27\2\1\0\1\2\1\0\1\2"+
    "\4\0\23\2\1\175\30\2\1\0\1\2\1\0\1\2"+
    "\4\0\2\2\1\176\51\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\177\21\2\1\200\31\2\1\0\1\2\1\0"+
    "\1\2\4\0\15\2\1\201\36\2\1\0\1\2\1\0"+
    "\1\2\4\0\5\2\1\202\4\2\1\203\4\2\1\204"+
    "\34\2\1\0\1\2\1\0\1\2\4\0\2\2\1\205"+
    "\51\2\1\0\1\2\1\0\1\2\4\0\5\2\1\206"+
    "\46\2\1\0\1\2\1\0\1\2\4\0\3\2\1\207"+
    "\50\2\1\0\1\2\1\0\1\2\4\0\10\2\1\210"+
    "\10\2\1\211\32\2\1\0\1\2\1\0\1\2\4\0"+
    "\16\2\1\212\1\213\34\2\1\0\1\2\1\0\1\2"+
    "\4\0\5\2\1\214\46\2\1\0\1\2\1\0\1\2"+
    "\4\0\13\2\1\215\40\2\1\0\1\2\1\0\1\2"+
    "\4\0\10\2\1\216\43\2\1\0\1\2\1\0\1\2"+
    "\4\0\4\2\1\217\47\2\1\0\1\2\1\0\1\2"+
    "\4\0\13\2\1\220\40\2\1\0\1\2\1\0\1\2"+
    "\4\0\16\2\1\221\35\2\1\0\1\2\1\0\1\2"+
    "\4\0\24\2\1\222\27\2\1\0\1\2\1\0\1\2"+
    "\4\0\7\2\1\223\44\2\1\0\1\2\1\0\1\2"+
    "\4\0\10\2\1\224\43\2\1\0\1\2\1\0\1\2"+
    "\4\0\5\2\1\225\46\2\1\0\1\2\1\0\1\2"+
    "\4\0\7\2\1\226\44\2\1\0\1\2\1\0\1\2"+
    "\4\0\13\2\1\227\40\2\1\0\1\2\1\0\1\2"+
    "\4\0\22\2\1\230\31\2\1\0\1\2\1\0\1\2"+
    "\4\0\2\2\1\231\51\2\1\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\232\11\2\1\233\1\234\35\2\1\0"+
    "\1\2\1\0\1\2\4\0\5\2\1\235\46\2\1\0"+
    "\1\2\1\0\1\2\4\0\2\2\1\236\5\2\1\237"+
    "\43\2\1\0\1\2\1\0\1\2\4\0\4\2\1\240"+
    "\47\2\1\0\1\2\1\0\1\2\4\0\23\2\1\241"+
    "\30\2\1\0\1\2\1\0\1\2\4\0\3\2\1\242"+
    "\50\2\1\0\1\2\1\0\1\2\4\0\16\2\1\243"+
    "\35\2\1\0\1\2\1\0\1\2\4\0\13\2\1\244"+
    "\40\2\1\0\1\2\1\0\1\2\4\0\16\2\1\245"+
    "\35\2\1\0\1\2\1\0\1\2\4\0\5\2\1\246"+
    "\6\2\1\247\2\2\1\250\34\2\1\0\1\2\1\0"+
    "\1\2\4\0\7\2\1\251\44\2\1\0\1\2\1\0"+
    "\1\2\4\0\13\2\1\252\40\2\1\0\1\2\1\0"+
    "\1\2\4\0\7\2\1\253\44\2\1\0\1\2\1\0"+
    "\1\2\4\0\16\2\1\254\35\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\2\1\255\52\2\1\0\1\2\1\0"+
    "\1\2\4\0\7\2\1\256\44\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\257\53\2\1\0\1\2\1\0\1\2"+
    "\4\0\4\2\1\260\47\2\1\0\1\2\1\0\1\2"+
    "\4\0\4\2\1\261\47\2\1\0\1\2\1\0\1\2"+
    "\4\0\13\2\1\262\6\2\1\263\31\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\264\53\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\265\53\2\1\0\1\2\1\0\1\2"+
    "\4\0\16\2\1\266\35\2\1\0\1\2\1\0\1\2"+
    "\4\0\15\2\1\267\36\2\1\0\1\2\1\0\1\2"+
    "\4\0\16\2\1\270\35\2\1\0\1\2\1\0\1\2"+
    "\4\0\10\2\1\271\43\2\1\0\1\2\1\0\1\2"+
    "\4\0\10\2\1\272\43\2\1\0\1\2\1\0\1\2"+
    "\4\0\10\2\1\273\43\2\1\0\1\2\1\0\1\2"+
    "\4\0\13\2\1\274\40\2\1\0\1\2\1\0\1\2"+
    "\4\0\14\2\1\275\37\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\2\1\276\52\2\1\0\1\2\1\0\1\2"+
    "\4\0\24\2\1\277\13\2\1\300\13\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\2\1\301\52\2\1\0\1\2"+
    "\1\0\1\2\4\0\10\2\1\302\43\2\1\0\1\2"+
    "\1\0\1\2\4\0\12\2\1\303\41\2\1\0\1\2"+
    "\1\0\1\2\4\0\16\2\1\304\35\2\1\0\1\2"+
    "\1\0\1\2\4\0\40\2\1\305\13\2\1\0\1\2"+
    "\1\0\1\2\4\0\40\2\1\306\13\2\1\0\1\2"+
    "\1\0\1\2\4\0\10\2\1\307\43\2\1\0\1\2"+
    "\1\0\1\2\4\0\2\2\1\310\51\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\311\53\2\1\0\1\2\1\0"+
    "\1\2\4\0\16\2\1\312\35\2\1\0\1\2\1\0"+
    "\1\2\4\0\15\2\1\313\36\2\1\0\1\2\1\0"+
    "\1\2\4\0\15\2\1\314\36\2\1\0\1\2\1\0"+
    "\1\2\4\0\26\2\1\315\25\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\316\53\2\1\0\1\2\1\0\1\2"+
    "\4\0\5\2\1\317\46\2\1\0\1\2\1\0\1\2"+
    "\4\0\16\2\1\320\35\2\1\0\1\2\1\0\1\2"+
    "\4\0\15\2\1\321\36\2\1\0\1\2\1\0\1\2"+
    "\4\0\5\2\1\322\6\2\1\323\37\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\324\53\2\1\0\1\2\1\0"+
    "\1\2\4\0\14\2\1\325\37\2\1\0\1\2\1\0"+
    "\1\2\4\0\16\2\1\326\35\2\1\0\1\2\1\0"+
    "\1\2\4\0\13\2\1\327\40\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\330\51\2\1\0\1\2\1\0"+
    "\1\2\4\0\26\2\1\331\25\2\1\0\1\2\1\0"+
    "\1\2\4\0\13\2\1\332\40\2\1\0\1\2\1\0"+
    "\1\2\4\0\7\2\1\333\44\2\1\0\1\2\1\0"+
    "\1\2\4\0\16\2\1\334\35\2\1\0\1\2\1\0"+
    "\1\2\4\0\22\2\1\335\31\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\336\51\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\337\51\2\1\0\1\2\1\0"+
    "\1\2\4\0\12\2\1\340\41\2\1\0\1\2\1\0"+
    "\1\2\4\0\11\2\1\341\42\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\342\51\2\1\0\1\2\1\0"+
    "\1\2\4\0\14\2\1\343\37\2\1\0\1\2\1\0"+
    "\1\2\4\0\13\2\1\344\40\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\345\51\2\1\0\1\2\1\0"+
    "\1\2\4\0\11\2\1\346\42\2\1\0\1\2\1\0"+
    "\1\2\4\0\5\2\1\347\46\2\1\0\1\2\1\0"+
    "\1\2\4\0\22\2\1\350\31\2\1\0\1\2\1\0"+
    "\1\2\4\0\12\2\1\351\41\2\1\0\1\2\1\0"+
    "\1\2\4\0\3\2\1\352\50\2\1\0\1\2\1\0"+
    "\1\2\4\0\15\2\1\353\36\2\1\0\1\2\1\0"+
    "\1\2\4\0\7\2\1\354\44\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\355\14\2\1\356\34\2\1\0"+
    "\1\2\1\0\1\2\4\0\12\2\1\357\41\2\1\0"+
    "\1\2\1\0\1\2\4\0\7\2\1\360\44\2\1\0"+
    "\1\2\1\0\1\2\4\0\2\2\1\361\51\2\1\0"+
    "\1\2\1\0\1\2\4\0\13\2\1\362\40\2\1\0"+
    "\1\2\1\0\1\2\4\0\15\2\1\363\36\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\364\53\2\1\0\1\2"+
    "\1\0\1\2\4\0\7\2\1\365\44\2\1\0\1\2"+
    "\1\0\1\2\4\0\2\2\1\366\51\2\1\0\1\2"+
    "\1\0\1\2\4\0\5\2\1\367\46\2\1\0\1\2"+
    "\1\0\1\2\4\0\2\2\1\370\51\2\1\0\1\2"+
    "\1\0\1\2\4\0\2\2\1\371\51\2\1\0\1\2"+
    "\1\0\1\2\4\0\2\2\1\372\51\2\1\0\1\2"+
    "\1\0\1\2\4\0\16\2\1\373\35\2\1\0\1\2"+
    "\1\0\1\2\4\0\10\2\1\374\43\2\1\0\1\2"+
    "\1\0\1\2\4\0\3\2\1\375\50\2\1\0\1\2"+
    "\1\0\1\2\4\0\23\2\1\376\30\2\1\0\1\2"+
    "\1\0\1\2\4\0\24\2\1\377\27\2\1\0\1\2"+
    "\1\0\1\2\4\0\2\2\1\u0100\51\2\1\0\1\2"+
    "\1\0\1\2\4\0\14\2\1\u0101\37\2\1\0\1\2"+
    "\1\0\1\2\4\0\17\2\1\u0102\34\2\1\0\1\2"+
    "\1\0\1\2\4\0\10\2\1\u0103\43\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\u0104\53\2\1\0\1\2\1\0"+
    "\1\2\4\0\16\2\1\u0105\35\2\1\0\1\2\1\0"+
    "\1\2\4\0\23\2\1\u0106\30\2\1\0\1\2\1\0"+
    "\1\2\4\0\10\2\1\u0107\43\2\1\0\1\2\1\0"+
    "\1\2\4\0\6\2\1\u0108\45\2\1\0\1\2\1\0"+
    "\1\2\4\0\22\2\1\u0109\31\2\1\0\1\2\1\0"+
    "\1\2\4\0\12\2\1\u010a\41\2\1\0\1\2\1\0"+
    "\1\2\4\0\22\2\1\u010b\31\2\1\0\1\2\1\0"+
    "\1\2\4\0\14\2\1\u010c\37\2\1\0\1\2\1\0"+
    "\1\2\4\0\27\2\1\u010d\24\2\1\0\1\2\1\0"+
    "\1\2\4\0\4\2\1\u010e\47\2\1\0\1\2\1\0"+
    "\1\2\4\0\3\2\1\u010f\50\2\1\0\1\2\1\0"+
    "\1\2\4\0\11\2\1\u0110\42\2\1\0\1\2\1\0"+
    "\1\2\4\0\3\2\1\u0111\50\2\1\0\1\2\1\0"+
    "\1\2\4\0\7\2\1\u0112\44\2\1\0\1\2\1\0"+
    "\1\2\4\0\13\2\1\u0113\40\2\1\0\1\2\1\0"+
    "\1\2\4\0\5\2\1\u0114\46\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\u0115\53\2\1\0\1\2\1\0\1\2"+
    "\4\0\4\2\1\u0116\47\2\1\0\1\2\1\0\1\2"+
    "\4\0\42\2\1\u0117\11\2\1\0\1\2\1\0\1\2"+
    "\4\0\22\2\1\u0118\31\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\u0119\53\2\1\0\1\2\1\0\1\2\4\0"+
    "\26\2\1\u011a\25\2\1\0\1\2\1\0\1\2\4\0"+
    "\3\2\1\u011b\50\2\1\0\1\2\1\0\1\2\4\0"+
    "\24\2\1\u011c\27\2\1\0\1\2\1\0\1\2\4\0"+
    "\1\u011d\53\2\1\0\1\2\1\0\1\2\4\0\22\2"+
    "\1\u011e\31\2\1\0\1\2\1\0\1\2\4\0\3\2"+
    "\1\u011f\50\2\1\0\1\2\1\0\1\2\4\0\1\u0120"+
    "\53\2\1\0\1\2\1\0\1\2\4\0\1\u0121\53\2"+
    "\1\0\1\2\1\0\1\2\4\0\11\2\1\u0122\42\2"+
    "\1\0\1\2\1\0\1\2\4\0\10\2\1\u0123\43\2"+
    "\1\0\1\2\1\0\1\2\4\0\7\2\1\u0124\44\2"+
    "\1\0\1\2\1\0\1\2\4\0\24\2\1\u0125\27\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\u0126\53\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\u0127\53\2\1\0\1\2"+
    "\1\0\1\2\4\0\15\2\1\u0128\36\2\1\0\1\2"+
    "\1\0\1\2\4\0\11\2\1\u0129\42\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\u012a\53\2\1\0\1\2\1\0"+
    "\1\2\4\0\4\2\1\u012b\47\2\1\0\1\2\1\0"+
    "\1\2\4\0\6\2\1\u012c\45\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\u012d\53\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\u012e\53\2\1\0\1\2\1\0\1\2\4\0"+
    "\5\2\1\u012f\46\2\1\0\1\2\1\0\1\2\4\0"+
    "\26\2\1\u0130\25\2\1\0\1\2\1\0\1\2\4\0"+
    "\22\2\1\u0131\31\2\1\0\1\2\1\0\1\2\4\0"+
    "\2\2\1\u0132\51\2\1\0\1\2\1\0\1\2\4\0"+
    "\22\2\1\u0133\31\2\1\0\1\2\1\0\1\2\4\0"+
    "\22\2\1\u0134\31\2\1\0\1\2\1\0\1\2\4\0"+
    "\7\2\1\u0135\2\2\1\u0136\41\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\u0137\51\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\u0138\53\2\1\0\1\2\1\0\1\2"+
    "\4\0\2\2\1\u0139\51\2\1\0\1\2\1\0\1\2"+
    "\4\0\13\2\1\u013a\40\2\1\0\1\2\1\0\1\2"+
    "\4\0\16\2\1\u013b\35\2\1\0\1\2\1\0\1\2"+
    "\4\0\13\2\1\u013c\40\2\1\0\1\2\1\0\1\2"+
    "\4\0\22\2\1\u013d\31\2\1\0\1\2\1\0\1\2"+
    "\4\0\7\2\1\u013e\44\2\1\0\1\2\1\0\1\2"+
    "\4\0\10\2\1\u013f\13\2\1\u0140\27\2\1\0\1\2"+
    "\1\0\1\2\4\0\7\2\1\u0141\44\2\1\0\1\2"+
    "\1\0\1\2\4\0\4\2\1\u0142\47\2\1\0\1\2"+
    "\1\0\1\2\4\0\13\2\1\u0143\40\2\1\0\1\2"+
    "\1\0\1\2\4\0\16\2\1\u0144\35\2\1\0\1\2"+
    "\1\0\1\2\4\0\20\2\1\u0145\33\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\u0146\53\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\u0147\53\2\1\0\1\2\1\0\1\2"+
    "\4\0\13\2\1\u0148\40\2\1\0\1\2\1\0\1\2"+
    "\4\0\24\2\1\u0149\27\2\1\0\1\2\1\0\1\2"+
    "\4\0\13\2\1\u014a\40\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\u014b\53\2\1\0\1\2\1\0\1\2\4\0"+
    "\12\2\1\u014c\41\2\1\0\1\2\1\0\1\2\4\0"+
    "\1\u014d\53\2\1\0\1\2\1\0\1\2\4\0\5\2"+
    "\1\u014e\46\2\1\0\1\2\1\0\1\2\4\0\5\2"+
    "\1\u014f\46\2\1\0\1\2\1\0\1\2\4\0\3\2"+
    "\1\u0150\50\2\1\0\1\2\1\0\1\2\4\0\2\2"+
    "\1\u0151\51\2\1\0\1\2\1\0\1\2\4\0\26\2"+
    "\1\u0152\25\2\1\0\1\2\1\0\1\2\4\0\13\2"+
    "\1\u0153\40\2\1\0\1\2\1\0\1\2\4\0\5\2"+
    "\1\u0154\46\2\1\0\1\2\1\0\1\2\4\0\12\2"+
    "\1\u0155\41\2\1\0\1\2\1\0\1\2\4\0\7\2"+
    "\1\u0156\44\2\1\0\1\2\1\0\1\2\4\0\3\2"+
    "\1\u0157\50\2\1\0\1\2\1\0\1\2\4\0\16\2"+
    "\1\u0158\35\2\1\0\1\2\1\0\1\2\4\0\1\u0159"+
    "\53\2\1\0\1\2\1\0\1\2\4\0\1\u015a\53\2"+
    "\1\0\1\2\1\0\1\2\4\0\4\2\1\u015b\47\2"+
    "\1\0\1\2\1\0\1\2\4\0\23\2\1\u015c\30\2"+
    "\1\0\1\2\1\0\1\2\4\0\4\2\1\u015d\47\2"+
    "\1\0\1\2\1\0\1\2\4\0\2\2\1\u015e\51\2"+
    "\1\0\1\2\1\0\1\2\4\0\23\2\1\u015f\30\2"+
    "\1\0\1\2\1\0\1\2\4\0\7\2\1\u0160\44\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\u0161\53\2\1\0"+
    "\1\2\1\0\1\2\4\0\10\2\1\u0162\43\2\1\0"+
    "\1\2\1\0\1\2\4\0\16\2\1\u0163\35\2\1\0"+
    "\1\2\1\0\1\2\4\0\14\2\1\u0164\37\2\1\0"+
    "\1\2\1\0\1\2\4\0\7\2\1\u0165\44\2\1\0"+
    "\1\2\1\0\1\2\4\0\4\2\1\u0166\47\2\1\0"+
    "\1\2\1\0\1\2\4\0\4\2\1\u0167\47\2\1\0"+
    "\1\2\1\0\1\2\4\0\3\2\1\u0168\50\2\1\0"+
    "\1\2\1\0\1\2\4\0\3\2\1\u0169\50\2\1\0"+
    "\1\2\1\0\1\2\4\0\7\2\1\u016a\44\2\1\0"+
    "\1\2\1\0\1\2\4\0\5\2\1\u016b\46\2\1\0"+
    "\1\2\1\0\1\2\4\0\3\2\1\u016c\50\2\1\0"+
    "\1\2\1\0\1\2\4\0\22\2\1\u016d\31\2\1\0"+
    "\1\2\1\0\1\2\4\0\21\2\1\u016e\32\2\1\0"+
    "\1\2\1\0\1\2\4\0\16\2\1\u016f\35\2\1\0"+
    "\1\2\1\0\1\2\4\0\4\2\1\u0170\47\2\1\0"+
    "\1\2\1\0\1\2\4\0\4\2\1\u0171\47\2\1\0"+
    "\1\2\1\0\1\2\4\0\22\2\1\u0172\31\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\u0173\53\2\1\0\1\2"+
    "\1\0\1\2\4\0\5\2\1\u0174\46\2\1\0\1\2"+
    "\1\0\1\2\4\0\13\2\1\u0175\40\2\1\0\1\2"+
    "\1\0\1\2\4\0\15\2\1\u0176\36\2\1\0\1\2"+
    "\1\0\1\2\4\0\12\2\1\u0177\41\2\1\0\1\2"+
    "\1\0\1\2\4\0\2\2\1\u0178\51\2\1\0\1\2"+
    "\1\0\1\2\4\0\22\2\1\u0179\31\2\1\0\1\2"+
    "\1\0\1\2\4\0\3\2\1\u017a\50\2\1\0\1\2"+
    "\1\0\1\2\4\0\3\2\1\u017b\50\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\u017c\53\2\1\0\1\2\1\0"+
    "\1\2\4\0\22\2\1\u017d\31\2\1\0\1\2\1\0"+
    "\1\2\4\0\10\2\1\u017e\43\2\1\0\1\2\1\0"+
    "\1\2\4\0\24\2\1\u017f\27\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\u0180\51\2\1\0\1\2\1\0"+
    "\1\2\4\0\13\2\1\u0181\40\2\1\0\1\2\1\0"+
    "\1\2\4\0\22\2\1\u0182\31\2\1\0\1\2\1\0"+
    "\1\2\4\0\23\2\1\u0183\30\2\1\0\1\2\1\0"+
    "\1\2\4\0\3\2\1\u0184\50\2\1\0\1\2\1\0"+
    "\1\2\4\0\10\2\1\u013f\43\2\1\0\1\2\1\0"+
    "\1\2\4\0\15\2\1\u0185\36\2\1\0\1\2\1\0"+
    "\1\2\4\0\13\2\1\u0186\40\2\1\0\1\2\1\0"+
    "\1\2\4\0\22\2\1\u0187\31\2\1\0\1\2\1\0"+
    "\1\2\4\0\22\2\1\u0188\31\2\1\0\1\2\1\0"+
    "\1\2\4\0\10\2\1\u0189\43\2\1\0\1\2\1\0"+
    "\1\2\4\0\3\2\1\u018a\50\2\1\0\1\2\1\0"+
    "\1\2\4\0\4\2\1\u018b\47\2\1\0\1\2\1\0"+
    "\1\2\4\0\5\2\1\u018c\46\2\1\0\1\2\1\0"+
    "\1\2\4\0\3\2\1\u018d\50\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\u018e\51\2\1\0\1\2\1\0"+
    "\1\2\4\0\26\2\1\u018f\25\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\u0190\51\2\1\0\1\2\1\0"+
    "\1\2\4\0\10\2\1\u0191\43\2\1\0\1\2\1\0"+
    "\1\2\4\0\5\2\1\u0192\46\2\1\0\1\2\1\0"+
    "\1\2\4\0\3\2\1\u0193\50\2\1\0\1\2\1\0"+
    "\1\2\4\0\4\2\1\u0194\47\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\u0195\53\2\1\0\1\2\1\0\1\2"+
    "\4\0\4\2\1\u0196\47\2\1\0\1\2\1\0\1\2"+
    "\4\0\10\2\1\u0197\43\2\1\0\1\2\1\0\1\2"+
    "\4\0\22\2\1\u0198\31\2\1\0\1\2\1\0\1\2"+
    "\4\0\10\2\1\u0199\43\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\u019a\53\2\1\0\1\2\1\0\1\2\4\0"+
    "\7\2\1\u019b\44\2\1\0\1\2\1\0\1\2\4\0"+
    "\3\2\1\u019c\50\2\1\0\1\2\1\0\1\2\4\0"+
    "\10\2\1\u019d\43\2\1\0\1\2\1\0\1\2\4\0"+
    "\7\2\1\u019e\44\2\1\0\1\2\1\0\1\2\4\0"+
    "\1\u019f\53\2\1\0\1\2\1\0\1\2\4\0\2\2"+
    "\1\u01a0\51\2\1\0\1\2\1\0\1\2\4\0\23\2"+
    "\1\u01a1\30\2\1\0\1\2\1\0\1\2\4\0\5\2"+
    "\1\u01a2\46\2\1\0\1\2\1\0\1\2\4\0\1\u01a3"+
    "\53\2\1\0\1\2\1\0\1\2\4\0\2\2\1\u01a4"+
    "\51\2\1\0\1\2\1\0\1\2\4\0\7\2\1\u01a5"+
    "\44\2\1\0\1\2\1\0\1\2\4\0\16\2\1\u01a6"+
    "\35\2\1\0\1\2\1\0\1\2\4\0\1\u01a7\53\2"+
    "\1\0\1\2\1\0\1\2\4\0\12\2\1\u01a8\41\2"+
    "\1\0\1\2\1\0\1\2\4\0\15\2\1\u01a9\36\2"+
    "\1\0\1\2\1\0\1\2\4\0\2\2\1\u01aa\51\2"+
    "\1\0\1\2\1\0\1\2\4\0\14\2\1\u01ab\37\2"+
    "\1\0\1\2\1\0\1\2\4\0\47\2\1\u01ac\4\2"+
    "\1\0\1\2\1\0\1\2\4\0\10\2\1\u01ad\43\2"+
    "\1\0\1\2\1\0\1\2\4\0\36\2\1\u01ae\1\u01af"+
    "\14\2\1\0\1\2\1\0\1\2\4\0\13\2\1\u01b0"+
    "\40\2\1\0\1\2\1\0\1\2\4\0\21\2\1\u01b1"+
    "\32\2\1\0\1\2\1\0\1\2\4\0\7\2\1\u01b2"+
    "\44\2\1\0\1\2\1\0\1\2\4\0\23\2\1\u01b3"+
    "\30\2\1\0\1\2\1\0\1\2\4\0\14\2\1\u01b4"+
    "\37\2\1\0\1\2\1\0\1\2\4\0\7\2\1\u01b5"+
    "\44\2\1\0\1\2\1\0\1\2\4\0\2\2\1\u01b6"+
    "\51\2\1\0\1\2\1\0\1\2\4\0\15\2\1\u01b7"+
    "\36\2\1\0\1\2\1\0\1\2\4\0\22\2\1\u01b8"+
    "\31\2\1\0\1\2\1\0\1\2\4\0\21\2\1\u01b9"+
    "\32\2\1\0\1\2\1\0\1\2\4\0\3\2\1\u01ba"+
    "\50\2\1\0\1\2\1\0\1\2\4\0\24\2\1\u01bb"+
    "\27\2\1\0\1\2\1\0\1\2\4\0\1\u01bc\53\2"+
    "\1\0\1\2\1\0\1\2\4\0\2\2\1\u01bd\51\2"+
    "\1\0\1\2\1\0\1\2\4\0\4\2\1\u01be\47\2"+
    "\1\0\1\2\1\0\1\2\4\0\53\2\1\u01bf\1\0"+
    "\1\2\1\0\1\2\4\0\1\u01c0\53\2\1\0\1\2"+
    "\1\0\1\2\4\0\14\2\1\u01c1\37\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\u01c2\53\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\u01c3\51\2\1\0\1\2\1\0"+
    "\1\2\4\0\4\2\1\u01c4\47\2\1\0\1\2\1\0"+
    "\1\2\4\0\22\2\1\u01c5\31\2\1\0\1\2\1\0"+
    "\1\2\4\0\36\2\1\u01c6\15\2\1\0\1\2\1\0"+
    "\1\2\4\0\14\2\1\u01c7\37\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\u01c8\53\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\u01c9\53\2\1\0\1\2\1\0\1\2\4\0"+
    "\1\u01ca\53\2\1\0\1\2\1\0\1\2\4\0\3\2"+
    "\1\u01cb\50\2\1\0\1\2\1\0\1\2\4\0\7\2"+
    "\1\u01cc\44\2\1\0\1\2\1\0\1\2\4\0\4\2"+
    "\1\u01cd\47\2\1\0\1\2\1\0\1\2\4\0\3\2"+
    "\1\u01ce\50\2\1\0\1\2\1\0\1\2\4\0\6\2"+
    "\1\u01cf\45\2\1\0\1\2\1\0\1\2\4\0\51\2"+
    "\1\u01d0\2\2\1\0\1\2\1\0\1\2\4\0\7\2"+
    "\1\u01d1\44\2\1\0\1\2\1\0\1\2\4\0\16\2"+
    "\1\u01d2\35\2\1\0\1\2\1\0\1\2\4\0\7\2"+
    "\1\u01d3\44\2\1\0\1\2\1\0\1\2\4\0\5\2"+
    "\1\u01d4\46\2\1\0\1\2\1\0\1\2\4\0\2\2"+
    "\1\u01d5\51\2\1\0\1\2\1\0\1\2\4\0\1\u01d6"+
    "\53\2\1\0\1\2\1\0\1\2\4\0\22\2\1\u01d7"+
    "\31\2\1\0\1\2\1\0\1\2\4\0\1\u01d8\53\2"+
    "\1\0\1\2\1\0\1\2\4\0\7\2\1\u01d9\44\2"+
    "\1\0\1\2\1\0\1\2\4\0\13\2\1\u01da\40\2"+
    "\1\0\1\2\1\0\1\2\4\0\14\2\1\u01db\37\2"+
    "\1\0\1\2\1\0\1\2\4\0\3\2\1\u01dc\50\2"+
    "\1\0\1\2\1\0\1\2\4\0\2\2\1\u01dd\51\2"+
    "\1\0\1\2\1\0\1\2\4\0\3\2\1\u01de\50\2"+
    "\1\0\1\2\1\0\1\2\4\0\22\2\1\u01df\31\2"+
    "\1\0\1\2\1\0\1\2\4\0\16\2\1\u01e0\35\2"+
    "\1\0\1\2\1\0\1\2\4\0\7\2\1\u01e1\44\2"+
    "\1\0\1\2\1\0\1\2\4\0\7\2\1\u01e2\44\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\u01e3\53\2\1\0"+
    "\1\2\1\0\1\2\4\0\10\2\1\u01e4\43\2\1\0"+
    "\1\2\1\0\1\2\4\0\3\2\1\u01e5\50\2\1\0"+
    "\1\2\1\0\1\2\4\0\13\2\1\u01e6\40\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\u01e7\53\2\1\0\1\2"+
    "\1\0\1\2\4\0\4\2\1\u01e8\47\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\u01e9\53\2\1\0\1\2\1\0"+
    "\1\2\4\0\10\2\1\u01ea\43\2\1\0\1\2\1\0"+
    "\1\2\4\0\17\2\1\u01eb\34\2\1\0\1\2\1\0"+
    "\1\2\4\0\26\2\1\u01ec\25\2\1\0\1\2\1\0"+
    "\1\2\4\0\26\2\1\u01ed\25\2\1\0\1\2\1\0"+
    "\1\2\4\0\3\2\1\u01ee\50\2\1\0\1\2\1\0"+
    "\1\2\4\0\10\2\1\u01ef\43\2\1\0\1\2\1\0"+
    "\1\2\4\0\23\2\1\u01f0\30\2\1\0\1\2\1\0"+
    "\1\2\4\0\24\2\1\u01f1\27\2\1\0\1\2\1\0"+
    "\1\2\4\0\42\2\1\u01f2\11\2\1\0\1\2\1\0"+
    "\1\2\4\0\5\2\1\u01f3\46\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\u01f4\53\2\1\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\u01f5\50\2\1\0\1\2\1\0\1\2"+
    "\4\0\7\2\1\u01f6\44\2\1\0\1\2\1\0\1\2"+
    "\4\0\23\2\1\u01f7\30\2\1\0\1\2\1\0\1\2"+
    "\4\0\5\2\1\u01f8\46\2\1\0\1\2\1\0\1\2"+
    "\4\0\22\2\1\u01f9\31\2\1\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\u01fa\50\2\1\0\1\2\1\0\1\2"+
    "\4\0\4\2\1\u01fb\47\2\1\0\1\2\1\0\1\2"+
    "\4\0\20\2\1\u01fc\33\2\1\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\u01fd\50\2\1\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\u01fe\50\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\u01ff\53\2\1\0\1\2\1\0\1\2\4\0"+
    "\5\2\1\u0200\46\2\1\0\1\2\1\0\1\2\4\0"+
    "\22\2\1\u0201\31\2\1\0\1\2\1\0\1\2\4\0"+
    "\1\u0202\53\2\1\0\1\2\1\0\1\2\4\0\3\2"+
    "\1\u0203\50\2\1\0\1\2\1\0\1\2\4\0\24\2"+
    "\1\u0204\27\2\1\0\1\2\1\0\1\2\4\0\10\2"+
    "\1\u0205\43\2\1\0\1\2\1\0\1\2\4\0\13\2"+
    "\1\u0206\40\2\1\0\1\2\1\0\1\2\4\0\2\2"+
    "\1\u0207\51\2\1\0\1\2\1\0\1\2\4\0\5\2"+
    "\1\u0208\46\2\1\0\1\2\1\0\1\2\4\0\24\2"+
    "\1\u0209\27\2\1\0\1\2\1\0\1\2\4\0\22\2"+
    "\1\u020a\31\2\1\0\1\2\1\0\1\2\4\0\1\u020b"+
    "\53\2\1\0\1\2\1\0\1\2\4\0\22\2\1\u020c"+
    "\31\2\1\0\1\2\1\0\1\2\4\0\2\2\1\u020d"+
    "\51\2\1\0\1\2\1\0\1\2\4\0\3\2\1\u020e"+
    "\50\2\1\0\1\2\1\0\1\2\4\0\7\2\1\u020f"+
    "\44\2\1\0\1\2\1\0\1\2\4\0\1\u0210\53\2"+
    "\1\0\1\2\1\0\1\2\4\0\27\2\1\u0211\24\2"+
    "\1\0\1\2\1\0\1\2\4\0\13\2\1\u0212\40\2"+
    "\1\0\1\2\1\0\1\2\4\0\23\2\1\u0213\30\2"+
    "\1\0\1\2\1\0\1\2\4\0\21\2\1\u0214\32\2"+
    "\1\0\1\2\1\0\1\2\4\0\7\2\1\u0215\44\2"+
    "\1\0\1\2\1\0\1\2\4\0\2\2\1\u0216\51\2"+
    "\1\0\1\2\1\0\1\2\4\0\2\2\1\u0217\51\2"+
    "\1\0\1\2\1\0\1\2\4\0\21\2\1\u0218\32\2"+
    "\1\0\1\2\1\0\1\2\4\0\2\2\1\u0219\51\2"+
    "\1\0\1\2\1\0\1\2\4\0\4\2\1\u021a\47\2"+
    "\1\0\1\2\1\0\1\2\4\0\26\2\1\u021b\25\2"+
    "\1\0\1\2\1\0\1\2\4\0\27\2\1\u021c\24\2"+
    "\1\0\1\2\1\0\1\2\4\0\5\2\1\u021d\46\2"+
    "\1\0\1\2\1\0\1\2\4\0\2\2\1\u021e\51\2"+
    "\1\0\1\2\1\0\1\2\4\0\35\2\1\u021f\16\2"+
    "\1\0\1\2\1\0\1\2\4\0\2\2\1\u0220\51\2"+
    "\1\0\1\2\1\0\1\2\4\0\14\2\1\u0221\37\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\u0222\53\2\1\0"+
    "\1\2\1\0\1\2\4\0\14\2\1\u0223\37\2\1\0"+
    "\1\2\1\0\1\2\4\0\14\2\1\u0224\37\2\1\0"+
    "\1\2\1\0\1\2\4\0\4\2\1\u0225\47\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\2\1\u0226\52\2\1\0"+
    "\1\2\1\0\1\2\4\0\10\2\1\u0227\43\2\1\0"+
    "\1\2\1\0\1\2\4\0\22\2\1\u0228\31\2\1\0"+
    "\1\2\1\0\1\2\4\0\16\2\1\u0229\35\2\1\0"+
    "\1\2\1\0\1\2\4\0\21\2\1\u022a\32\2\1\0"+
    "\1\2\1\0\1\2\4\0\3\2\1\u022b\50\2\1\0"+
    "\1\2\1\0\1\2\4\0\32\2\1\u022c\1\u022d\1\u022e"+
    "\17\2\1\0\1\2\1\0\1\2\4\0\26\2\1\u022f"+
    "\25\2\1\0\1\2\1\0\1\2\4\0\5\2\1\u0230"+
    "\46\2\1\0\1\2\1\0\1\2\4\0\1\u0231\53\2"+
    "\1\0\1\2\1\0\1\2\4\0\5\2\1\u0232\46\2"+
    "\1\0\1\2\1\0\1\2\4\0\22\2\1\u0233\31\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\u0234\53\2\1\0"+
    "\1\2\1\0\1\2\4\0\3\2\1\u0235\50\2\1\0"+
    "\1\2\1\0\1\2\4\0\22\2\1\u0236\31\2\1\0"+
    "\1\2\1\0\1\2\4\0\2\2\1\u0237\51\2\1\0"+
    "\1\2\1\0\1\2\4\0\10\2\1\u0238\43\2\1\0"+
    "\1\2\1\0\1\2\4\0\11\2\1\u0239\42\2\1\0"+
    "\1\2\1\0\1\2\4\0\13\2\1\u023a\40\2\1\0"+
    "\1\2\1\0\1\2\4\0\14\2\1\u023b\37\2\1\0"+
    "\1\2\1\0\1\2\4\0\3\2\1\u023c\50\2\1\0"+
    "\1\2\1\0\1\2\4\0\10\2\1\u023d\43\2\1\0"+
    "\1\2\1\0\1\2\4\0\7\2\1\u023e\44\2\1\0"+
    "\1\2\1\0\1\2\4\0\2\2\1\u023f\51\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\2\1\u0240\52\2\1\0"+
    "\1\2\1\0\1\2\4\0\14\2\1\u0241\37\2\1\0"+
    "\1\2\1\0\1\2\4\0\12\2\1\u0242\41\2\1\0"+
    "\1\2\1\0\1\2\4\0\5\2\1\u0243\46\2\1\0"+
    "\1\2\1\0\1\2\4\0\5\2\1\u0244\46\2\1\0"+
    "\1\2\1\0\1\2\4\0\7\2\1\u0245\44\2\1\0"+
    "\1\2\1\0\1\2\4\0\24\2\1\u0246\27\2\1\0"+
    "\1\2\1\0\1\2\4\0\5\2\1\u0247\46\2\1\0"+
    "\1\2\1\0\1\2\4\0\16\2\1\u0248\35\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\u0249\53\2\1\0\1\2"+
    "\1\0\1\2\4\0\27\2\1\u024a\24\2\1\0\1\2"+
    "\1\0\1\2\4\0\7\2\1\u024b\44\2\1\0\1\2"+
    "\1\0\1\2\4\0\4\2\1\u024c\47\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\u024d\53\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\u024e\51\2\1\0\1\2\1\0"+
    "\1\2\4\0\13\2\1\u024f\40\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\u0250\51\2\1\0\1\2\1\0"+
    "\1\2\4\0\3\2\1\u0251\50\2\1\0\1\2\1\0"+
    "\1\2\4\0\10\2\1\u0252\43\2\1\0\1\2\1\0"+
    "\1\2\4\0\37\2\1\u0253\5\2\1\u0254\6\2\1\0"+
    "\1\2\1\0\1\2\4\0\22\2\1\u0255\31\2\1\0"+
    "\1\2\1\0\1\2\4\0\24\2\1\u0256\27\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\u0257\53\2\1\0\1\2"+
    "\1\0\1\2\4\0\15\2\1\u0258\36\2\1\0\1\2"+
    "\1\0\1\2\4\0\12\2\1\u0259\41\2\1\0\1\2"+
    "\1\0\1\2\4\0\13\2\1\u025a\40\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\u025b\53\2\1\0\1\2\1\0"+
    "\1\2\4\0\13\2\1\u025c\40\2\1\0\1\2\1\0"+
    "\1\2\4\0\7\2\1\u025d\44\2\1\0\1\2\1\0"+
    "\1\2\4\0\10\2\1\u025e\43\2\1\0\1\2\1\0"+
    "\1\2\4\0\12\2\1\u025f\41\2\1\0\1\2\1\0"+
    "\1\2\4\0\35\2\1\u0260\16\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\u0261\53\2\1\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\u0262\50\2\1\0\1\2\1\0\1\2"+
    "\4\0\34\2\1\u0263\17\2\1\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\u0264\50\2\1\0\1\2\1\0\1\2"+
    "\4\0\10\2\1\u0265\43\2\1\0\1\2\1\0\1\2"+
    "\4\0\7\2\1\u0266\44\2\1\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\u0267\50\2\1\0\1\2\1\0\1\2"+
    "\4\0\14\2\1\u0268\37\2\1\0\1\2\1\0\1\2"+
    "\4\0\7\2\1\u0269\44\2\1\0\1\2\1\0\1\2"+
    "\4\0\4\2\1\u026a\47\2\1\0\1\2\1\0\1\2"+
    "\4\0\2\2\1\u026b\51\2\1\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\u026c\50\2\1\0\1\2\1\0\1\2"+
    "\4\0\5\2\1\u026d\46\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\u026e\53\2\1\0\1\2\1\0\1\2\4\0"+
    "\4\2\1\u026f\47\2\1\0\1\2\1\0\1\2\4\0"+
    "\5\2\1\u0270\46\2\1\0\1\2\1\0\1\2\4\0"+
    "\10\2\1\u0271\43\2\1\0\1\2\1\0\1\2\4\0"+
    "\15\2\1\u0272\36\2\1\0\1\2\1\0\1\2\4\0"+
    "\2\2\1\u0273\51\2\1\0\1\2\1\0\1\2\4\0"+
    "\1\u0274\53\2\1\0\1\2\1\0\1\2\4\0\14\2"+
    "\1\u0275\37\2\1\0\1\2\1\0\1\2\4\0\13\2"+
    "\1\u0276\40\2\1\0\1\2\1\0\1\2\4\0\1\u0277"+
    "\53\2\1\0\1\2\1\0\1\2\4\0\13\2\1\u0278"+
    "\40\2\1\0\1\2\1\0\1\2\4\0\13\2\1\u0279"+
    "\40\2\1\0\1\2\1\0\1\2\4\0\22\2\1\u027a"+
    "\31\2\1\0\1\2\1\0\1\2\4\0\3\2\1\u027b"+
    "\50\2\1\0\1\2\1\0\1\2\4\0\3\2\1\u027c"+
    "\50\2\1\0\1\2\1\0\1\2\4\0\12\2\1\u027d"+
    "\41\2\1\0\1\2\1\0\1\2\4\0\2\2\1\u027e"+
    "\51\2\1\0\1\2\1\0\1\2\4\0\2\2\1\u027f"+
    "\51\2\1\0\1\2\1\0\1\2\4\0\14\2\1\u0280"+
    "\37\2\1\0\1\2\1\0\1\2\4\0\1\u0281\53\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\u0282\53\2\1\0"+
    "\1\2\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28184];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\11\1\1\1\11\43\1\1\11\1\1"+
    "\2\11\u0255\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[642];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  StructurizrDslLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return Tokens.UNQUOTED_TEXT;
            } 
            // fall through
          case 110: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 111: break;
          case 3: 
            { return Tokens.LINE_BREAK;
            } 
            // fall through
          case 112: break;
          case 4: 
            { return Tokens.QUOTED_TEXT;
            } 
            // fall through
          case 113: break;
          case 5: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 114: break;
          case 6: 
            { return Tokens.STAR;
            } 
            // fall through
          case 115: break;
          case 7: 
            { return Tokens.OPEN_PARENS;
            } 
            // fall through
          case 116: break;
          case 8: 
            { return Tokens.CLOSE_PARENS;
            } 
            // fall through
          case 117: break;
          case 9: 
            { return Tokens.EQ;
            } 
            // fall through
          case 118: break;
          case 10: 
            { return Tokens.TB;
            } 
            // fall through
          case 119: break;
          case 11: 
            { return Tokens.RL;
            } 
            // fall through
          case 120: break;
          case 12: 
            { return Tokens.LR;
            } 
            // fall through
          case 121: break;
          case 13: 
            { return Tokens.RELATION_ARROW;
            } 
            // fall through
          case 122: break;
          case 14: 
            { return Tokens.BT;
            } 
            // fall through
          case 123: break;
          case 15: 
            { return Tokens.URL;
            } 
            // fall through
          case 124: break;
          case 16: 
            { return Tokens.BOX;
            } 
            // fall through
          case 125: break;
          case 17: 
            { return Tokens.TRUE;
            } 
            // fall through
          case 126: break;
          case 18: 
            { return Tokens.TAGS;
            } 
            // fall through
          case 127: break;
          case 19: 
            { return Tokens.THIS;
            } 
            // fall through
          case 128: break;
          case 20: 
            { return Tokens.NAME;
            } 
            // fall through
          case 129: break;
          case 21: 
            { return Tokens.LOGO;
            } 
            // fall through
          case 130: break;
          case 22: 
            { return Tokens.FONT;
            } 
            // fall through
          case 131: break;
          case 23: 
            { return Tokens.FLAT;
            } 
            // fall through
          case 132: break;
          case 24: 
            { return Tokens.ICON;
            } 
            // fall through
          case 133: break;
          case 25: 
            { return Tokens.REF;
            } 
            // fall through
          case 134: break;
          case 26: 
            { return Tokens.PIPE;
            } 
            // fall through
          case 135: break;
          case 27: 
            { return Tokens.TITLE;
            } 
            // fall through
          case 136: break;
          case 28: 
            { return Tokens.THEME;
            } 
            // fall through
          case 137: break;
          case 29: 
            { return Tokens.SOLID;
            } 
            // fall through
          case 138: break;
          case 30: 
            { return Tokens.SHAPE;
            } 
            // fall through
          case 139: break;
          case 31: 
            { return Tokens.WIDTH;
            } 
            // fall through
          case 140: break;
          case 32: 
            { return Tokens.KROKI;
            } 
            // fall through
          case 141: break;
          case 33: 
            { return Tokens.COLOR;
            } 
            // fall through
          case 142: break;
          case 34: 
            { return Tokens.MODEL;
            } 
            // fall through
          case 143: break;
          case 35: 
            { return Tokens.FALSE;
            } 
            // fall through
          case 144: break;
          case 36: 
            { return Tokens.IMAGE;
            } 
            // fall through
          case 145: break;
          case 37: 
            { return Tokens.GROUP;
            } 
            // fall through
          case 146: break;
          case 38: 
            { return Tokens.DOCS;
            } 
            // fall through
          case 147: break;
          case 39: 
            { return Tokens.ADRS;
            } 
            // fall through
          case 148: break;
          case 40: 
            { return Tokens.VIEWS;
            } 
            // fall through
          case 149: break;
          case 41: 
            { return Tokens.ROBOT;
            } 
            // fall through
          case 150: break;
          case 42: 
            { return Tokens.THEMES;
            } 
            // fall through
          case 151: break;
          case 43: 
            { return Tokens.DOTTED;
            } 
            // fall through
          case 152: break;
          case 44: 
            { return Tokens.DASHED;
            } 
            // fall through
          case 153: break;
          case 45: 
            { return Tokens.STROKE;
            } 
            // fall through
          case 154: break;
          case 46: 
            { return Tokens.STYLES;
            } 
            // fall through
          case 155: break;
          case 47: 
            { return Tokens.PERSON;
            } 
            // fall through
          case 156: break;
          case 48: 
            { return Tokens.CUSTOM;
            } 
            // fall through
          case 157: break;
          case 49: 
            { return Tokens.HEIGHT;
            } 
            // fall through
          case 158: break;
          case 50: 
            { return Tokens.CIRCLE;
            } 
            // fall through
          case 159: break;
          case 51: 
            { return Tokens.CURVED;
            } 
            // fall through
          case 160: break;
          case 52: 
            { return Tokens.BORDER;
            } 
            // fall through
          case 161: break;
          case 53: 
            { return Tokens.PERSON_SHAPE;
            } 
            // fall through
          case 162: break;
          case 54: 
            { return Tokens.FOLDER;
            } 
            // fall through
          case 163: break;
          case 55: 
            { return Tokens.DIRECT;
            } 
            // fall through
          case 164: break;
          case 56: 
            { return Tokens.EXTENDS;
            } 
            // fall through
          case 165: break;
          case 57: 
            { return Tokens.EXCLUDE;
            } 
            // fall through
          case 166: break;
          case 58: 
            { return Tokens.ELEMENT;
            } 
            // fall through
          case 167: break;
          case 59: 
            { return Tokens.DEFAULT;
            } 
            // fall through
          case 168: break;
          case 60: 
            { return Tokens.DYNAMIC;
            } 
            // fall through
          case 169: break;
          case 61: 
            { return Tokens.OPACITY;
            } 
            // fall through
          case 170: break;
          case 62: 
            { return Tokens.ROUTING;
            } 
            // fall through
          case 171: break;
          case 63: 
            { return Tokens.MERMAID;
            } 
            // fall through
          case 172: break;
          case 64: 
            { return Tokens.INCLUDE;
            } 
            // fall through
          case 173: break;
          case 65: 
            { return Tokens.EXTEND;
            } 
            // fall through
          case 174: break;
          case 66: 
            { return Tokens.ELLIPSE;
            } 
            // fall through
          case 175: break;
          case 67: 
            { return Tokens.HEXAGON;
            } 
            // fall through
          case 176: break;
          case 68: 
            { return Tokens.POSITION;
            } 
            // fall through
          case 177: break;
          case 69: 
            { return Tokens.PLANTUML;
            } 
            // fall through
          case 178: break;
          case 70: 
            { return Tokens.METADATA;
            } 
            // fall through
          case 179: break;
          case 71: 
            { return Tokens.FONT_SIZE;
            } 
            // fall through
          case 180: break;
          case 72: 
            { return Tokens.FILTERED;
            } 
            // fall through
          case 181: break;
          case 73: 
            { return Tokens.CYLINDER;
            } 
            // fall through
          case 182: break;
          case 74: 
            { return Tokens.BRANDING;
            } 
            // fall through
          case 183: break;
          case 75: 
            { return Tokens.THICKNESS;
            } 
            // fall through
          case 184: break;
          case 76: 
            { return Tokens.WORKSPACE;
            } 
            // fall through
          case 185: break;
          case 77: 
            { return Tokens.ANIMATION;
            } 
            // fall through
          case 186: break;
          case 78: 
            { return Tokens.CONTAINER;
            } 
            // fall through
          case 187: break;
          case 79: 
            { return Tokens.COMPONENT;
            } 
            // fall through
          case 188: break;
          case 80: 
            { return Tokens.INSTANCES;
            } 
            // fall through
          case 189: break;
          case 81: 
            { return Tokens.COMPONENT_SHAPE;
            } 
            // fall through
          case 190: break;
          case 82: 
            { return Tokens.TECHNOLOGY;
            } 
            // fall through
          case 191: break;
          case 83: 
            { return Tokens.DEPLOYMENT;
            } 
            // fall through
          case 192: break;
          case 84: 
            { return Tokens.PROPERTIES;
            } 
            // fall through
          case 193: break;
          case 85: 
            { return Tokens.AUTOLAYOUT;
            } 
            // fall through
          case 194: break;
          case 86: 
            { return Tokens.BACKGROUND;
            } 
            // fall through
          case 195: break;
          case 87: 
            { return Tokens.ROUNDED_BOX;
            } 
            // fall through
          case 196: break;
          case 88: 
            { return Tokens.WEB_BROWSER;
            } 
            // fall through
          case 197: break;
          case 89: 
            { return Tokens.ORTHOGONAL;
            } 
            // fall through
          case 198: break;
          case 90: 
            { return Tokens.TERMINOLOGY;
            } 
            // fall through
          case 199: break;
          case 91: 
            { return Tokens.DESCRIPTION;
            } 
            // fall through
          case 200: break;
          case 92: 
            { return Tokens.STROKE_WIDTH;
            } 
            // fall through
          case 201: break;
          case 93: 
            { return Tokens.HEALTH_CHECK;
            } 
            // fall through
          case 202: break;
          case 94: 
            { return Tokens.RELATIONSHIP;
            } 
            // fall through
          case 203: break;
          case 95: 
            { return Tokens.PERSPECTIVES;
            } 
            // fall through
          case 204: break;
          case 96: 
            { return Tokens.IDENTIFIERS;
            } 
            // fall through
          case 205: break;
          case 97: 
            { return Tokens.HIERARCHICAL;
            } 
            // fall through
          case 206: break;
          case 98: 
            { return Tokens.SYSTEM_CONTEXT;
            } 
            // fall through
          case 207: break;
          case 99: 
            { return Tokens.CONFIGURATION;
            } 
            // fall through
          case 208: break;
          case 100: 
            { return Tokens.DEPLOYMENT_NODE;
            } 
            // fall through
          case 209: break;
          case 101: 
            { return Tokens.SOFTWARE_SYSTEM;
            } 
            // fall through
          case 210: break;
          case 102: 
            { return Tokens.DEPLOYMENT_GROUP;
            } 
            // fall through
          case 211: break;
          case 103: 
            { return Tokens.SYSTEM_LANDSCAPE;
            } 
            // fall through
          case 212: break;
          case 104: 
            { return Tokens.CONTAINER_INSTANCE;
            } 
            // fall through
          case 213: break;
          case 105: 
            { return Tokens.INFRASTRUCTURE_NODE;
            } 
            // fall through
          case 214: break;
          case 106: 
            { return Tokens.MOBILE_DEVICE_PORTRAIT;
            } 
            // fall through
          case 215: break;
          case 107: 
            { return Tokens.DEPLOYMENT_ENVIRONMENT;
            } 
            // fall through
          case 216: break;
          case 108: 
            { return Tokens.MOBILE_DEVICE_LANDSCAPE;
            } 
            // fall through
          case 217: break;
          case 109: 
            { return Tokens.SOFTWARE_SYSTEM_INSTANCE;
            } 
            // fall through
          case 218: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
