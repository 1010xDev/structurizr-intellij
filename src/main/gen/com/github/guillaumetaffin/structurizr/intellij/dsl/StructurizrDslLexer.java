/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.github.guillaumetaffin.structurizr.intellij.dsl;

import com.github.guillaumetaffin.structurizr.intellij.dsl.psi.Tokens;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;

import static com.intellij.psi.TokenType.WHITE_SPACE;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>structurizr-dsl.flex</tt>
 */
class StructurizrDslLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\1\4\1\1\1\2\22\0\1\1\1\35\1\3\1\0\1\5\5\0\1\51\2\0\1\40\17\0"+
    "\1\64\1\41\3\0\1\52\1\46\1\61\1\42\1\56\1\43\1\54\1\45\2\0\1\47\1\60\1\44"+
    "\1\62\1\55\1\0\1\53\1\30\3\0\1\57\11\0\1\23\1\50\1\24\1\14\1\10\1\27\1\33"+
    "\1\36\1\32\1\0\1\21\1\26\1\25\1\13\1\17\1\22\1\0\1\20\1\15\1\12\1\34\1\37"+
    "\1\16\1\11\1\31\1\63\1\6\1\0\1\7\7\0\1\4\32\0\1\4\337\0\1\4\177\0\13\4\35"+
    "\0\2\4\5\0\1\4\57\0\1\4\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\31\1\1\10\11\1\1\11\1\4\1\0\7\1"+
    "\1\12\16\1\1\13\14\1\1\14\21\1\1\15\5\1"+
    "\1\16\15\1\1\0\65\1\1\17\23\1\1\20\12\1"+
    "\1\21\5\1\1\22\1\23\2\1\1\24\1\1\1\25"+
    "\40\1\1\26\1\27\1\1\1\30\4\1\1\31\4\1"+
    "\1\32\24\1\1\33\12\1\1\34\1\35\11\1\1\36"+
    "\2\1\1\37\1\1\1\40\3\1\1\41\12\1\1\42"+
    "\4\1\1\43\1\1\1\44\4\1\1\45\1\46\1\1"+
    "\1\47\1\50\6\1\1\51\11\1\1\52\14\1\1\53"+
    "\4\1\1\54\1\55\1\1\1\56\1\57\6\1\1\60"+
    "\11\1\1\61\14\1\1\62\4\1\1\63\1\64\1\65"+
    "\4\1\1\66\1\67\2\1\1\70\1\1\1\71\1\72"+
    "\1\73\5\1\1\74\1\75\5\1\1\76\1\1\1\77"+
    "\12\1\1\100\3\1\1\101\1\1\1\102\5\1\1\103"+
    "\5\1\1\104\17\1\1\105\1\1\1\106\5\1\1\107"+
    "\1\110\1\111\2\1\1\112\5\1\1\113\1\114\7\1"+
    "\1\115\6\1\1\116\3\1\1\117\1\1\1\120\1\1"+
    "\1\121\1\122\5\1\1\123\6\1\1\124\1\1\1\125"+
    "\6\1\1\126\1\127\7\1\1\130\1\131\1\132\1\1"+
    "\1\133\1\134\1\135\3\1\1\136\12\1\1\137\10\1"+
    "\1\140\1\141\3\1\1\142\1\1\1\143\5\1\1\144"+
    "\2\1\1\145\6\1\1\146\1\147\7\1\1\150\1\1"+
    "\1\151\16\1\1\152\6\1\1\153\14\1\1\154\1\155"+
    "\1\1\1\156\1\157\1\160";

  private static int [] zzUnpackAction() {
    int [] result = new int[671];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\237\0\u0109\0\237"+
    "\0\65\0\u013e\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c"+
    "\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424"+
    "\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc"+
    "\0\u0601\0\u0636\0\65\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f"+
    "\0\u0774\0\u07a9\0\u07de\0\u0813\0\237\0\237\0\u0848\0\u087d"+
    "\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\65\0\u09f0"+
    "\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98"+
    "\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\65\0\u0cd6\0\u0d0b"+
    "\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3"+
    "\0\u0ee8\0\u0f1d\0\65\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026"+
    "\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce"+
    "\0\u1203\0\u1238\0\u126d\0\u12a2\0\65\0\u12d7\0\u130c\0\u1341"+
    "\0\u1376\0\u13ab\0\65\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4"+
    "\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c"+
    "\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1804"+
    "\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac"+
    "\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54"+
    "\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc"+
    "\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4"+
    "\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u2017\0\u204c"+
    "\0\u2081\0\u20b6\0\u20eb\0\u2120\0\u2155\0\u218a\0\65\0\u21bf"+
    "\0\u21f4\0\u2229\0\u225e\0\u2293\0\u22c8\0\u22fd\0\u2332\0\u2367"+
    "\0\u239c\0\u23d1\0\u2406\0\u243b\0\u2470\0\u24a5\0\u24da\0\u250f"+
    "\0\u2544\0\u2579\0\65\0\u25ae\0\u25e3\0\u2618\0\u264d\0\u2682"+
    "\0\u26b7\0\u26ec\0\u2721\0\u2756\0\u278b\0\u1691\0\u27c0\0\u27f5"+
    "\0\u282a\0\u285f\0\u2894\0\65\0\65\0\u28c9\0\u28fe\0\65"+
    "\0\u2933\0\65\0\u2968\0\u299d\0\u29d2\0\u2a07\0\u2a3c\0\u2a71"+
    "\0\u2aa6\0\u2adb\0\u2b10\0\u2b45\0\u2b7a\0\u2baf\0\u2be4\0\u2c19"+
    "\0\u2c4e\0\u2c83\0\u2cb8\0\u2ced\0\u2d22\0\u2d57\0\u2d8c\0\u2dc1"+
    "\0\u2df6\0\u2e2b\0\u2e60\0\u2e95\0\u2eca\0\u2eff\0\u2f34\0\u2f69"+
    "\0\u2f9e\0\u2fd3\0\65\0\u3008\0\u303d\0\65\0\u3072\0\u30a7"+
    "\0\u30dc\0\u3111\0\65\0\u3146\0\u317b\0\u31b0\0\u31e5\0\65"+
    "\0\u321a\0\u324f\0\u3284\0\u32b9\0\u32ee\0\u3323\0\u3358\0\u338d"+
    "\0\u33c2\0\u33f7\0\u342c\0\u3461\0\u3496\0\u34cb\0\u3500\0\u3535"+
    "\0\u356a\0\u359f\0\u35d4\0\u3609\0\65\0\u363e\0\u3673\0\u36a8"+
    "\0\u36dd\0\u3712\0\u3747\0\u377c\0\u37b1\0\u37e6\0\u381b\0\65"+
    "\0\u3850\0\u3885\0\u38ba\0\u38ef\0\u3924\0\u3959\0\u398e\0\u39c3"+
    "\0\u39f8\0\u3a2d\0\65\0\u3a62\0\u3a97\0\65\0\u3acc\0\65"+
    "\0\u3b01\0\u3b36\0\u3b6b\0\65\0\u3ba0\0\u3bd5\0\u3c0a\0\u3c3f"+
    "\0\u3c74\0\u3ca9\0\u3cde\0\u3d13\0\u3d48\0\u3d7d\0\65\0\u3db2"+
    "\0\u3de7\0\u3e1c\0\u3e51\0\65\0\u3e86\0\65\0\u3ebb\0\u3ef0"+
    "\0\u3f25\0\u3f5a\0\65\0\65\0\u3f8f\0\65\0\65\0\u3fc4"+
    "\0\u3ff9\0\u402e\0\u4063\0\u4098\0\u40cd\0\65\0\u4102\0\u4137"+
    "\0\u416c\0\u41a1\0\u41d6\0\u420b\0\u4240\0\u4275\0\u42aa\0\65"+
    "\0\u42df\0\u4314\0\u4349\0\u437e\0\u43b3\0\u43e8\0\u441d\0\u4452"+
    "\0\u4487\0\u44bc\0\u44f1\0\u4526\0\65\0\u455b\0\u4590\0\u45c5"+
    "\0\u45fa\0\65\0\65\0\u462f\0\u4664\0\65\0\u4699\0\u46ce"+
    "\0\u4703\0\u4738\0\u476d\0\u47a2\0\65\0\u47d7\0\u480c\0\u4841"+
    "\0\u4876\0\u48ab\0\u48e0\0\u4915\0\u494a\0\u497f\0\65\0\u49b4"+
    "\0\u49e9\0\u4a1e\0\u4a53\0\u4a88\0\u4abd\0\u4af2\0\u4b27\0\u4b5c"+
    "\0\u4b91\0\u4bc6\0\u4bfb\0\65\0\u4c30\0\u4c65\0\u4c9a\0\u4ccf"+
    "\0\65\0\65\0\65\0\u4d04\0\u4d39\0\u4d6e\0\u4da3\0\65"+
    "\0\65\0\u4dd8\0\u4e0d\0\65\0\u4e42\0\65\0\65\0\65"+
    "\0\u4e77\0\u4eac\0\u4ee1\0\u4f16\0\u4f4b\0\65\0\65\0\u4f80"+
    "\0\u4fb5\0\u4fea\0\u501f\0\u5054\0\65\0\u5089\0\65\0\u50be"+
    "\0\u50f3\0\u5128\0\u515d\0\u5192\0\u51c7\0\u51fc\0\u5231\0\u5266"+
    "\0\u529b\0\65\0\u52d0\0\u5305\0\u533a\0\65\0\u536f\0\65"+
    "\0\u53a4\0\u53d9\0\u540e\0\u5443\0\u5478\0\65\0\u54ad\0\u54e2"+
    "\0\u5517\0\u554c\0\u5581\0\65\0\u55b6\0\u55eb\0\u5620\0\u5655"+
    "\0\u568a\0\u56bf\0\u56f4\0\u5729\0\u575e\0\u5793\0\u57c8\0\u57fd"+
    "\0\u5832\0\u5867\0\u589c\0\65\0\u58d1\0\65\0\u5906\0\u593b"+
    "\0\u5970\0\u59a5\0\u59da\0\65\0\65\0\65\0\u5a0f\0\u5a44"+
    "\0\65\0\u5a79\0\u5aae\0\u5ae3\0\u5b18\0\u5b4d\0\65\0\65"+
    "\0\u5b82\0\u5bb7\0\u5bec\0\u5c21\0\u5c56\0\u5c8b\0\u5cc0\0\65"+
    "\0\u5cf5\0\u5d2a\0\u5d5f\0\u5d94\0\u5dc9\0\u5dfe\0\65\0\u5e33"+
    "\0\u5e68\0\u5e9d\0\65\0\u5ed2\0\u5f07\0\u5f3c\0\65\0\65"+
    "\0\u5f71\0\u5fa6\0\u5fdb\0\u6010\0\u6045\0\65\0\u607a\0\u60af"+
    "\0\u60e4\0\u6119\0\u614e\0\u6183\0\65\0\u61b8\0\u61ed\0\u6222"+
    "\0\u6257\0\u628c\0\u62c1\0\u62f6\0\u632b\0\65\0\65\0\u6360"+
    "\0\u6395\0\u63ca\0\u63ff\0\u6434\0\u6469\0\u649e\0\65\0\65"+
    "\0\65\0\u64d3\0\65\0\65\0\65\0\u6508\0\u653d\0\u6572"+
    "\0\65\0\u65a7\0\u65dc\0\u6611\0\u6646\0\u667b\0\u66b0\0\u66e5"+
    "\0\u671a\0\u674f\0\u6784\0\65\0\u67b9\0\u67ee\0\u6823\0\u6858"+
    "\0\u688d\0\u68c2\0\u68f7\0\u692c\0\65\0\65\0\u6961\0\u6996"+
    "\0\u69cb\0\65\0\u6a00\0\65\0\u6a35\0\u6a6a\0\u6a9f\0\u6ad4"+
    "\0\u6b09\0\65\0\u6b3e\0\u6b73\0\65\0\u6ba8\0\u6bdd\0\u6c12"+
    "\0\u6c47\0\u6c7c\0\u6cb1\0\65\0\u6ce6\0\u6d1b\0\u6d50\0\u6d85"+
    "\0\u6dba\0\u6def\0\u6e24\0\u6e59\0\65\0\u6e8e\0\65\0\u6ec3"+
    "\0\u6ef8\0\u6f2d\0\u6f62\0\u6f97\0\u6fcc\0\u7001\0\u7036\0\u706b"+
    "\0\u70a0\0\u70d5\0\u710a\0\u713f\0\u7174\0\65\0\u71a9\0\u71de"+
    "\0\u7213\0\u7248\0\u727d\0\u72b2\0\65\0\u72e7\0\u731c\0\u7351"+
    "\0\u7386\0\u73bb\0\u73f0\0\u7425\0\u745a\0\u748f\0\u74c4\0\u74f9"+
    "\0\u752e\0\65\0\65\0\u7563\0\65\0\65\0\65";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[671];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\2\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\2\2\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\2\1\40\3\2\1\41\1\2\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\2\1\55\1\2\4\0\1\2\1\0\55\2\2\0"+
    "\1\3\150\0\2\5\1\0\1\56\61\5\1\2\4\0"+
    "\1\2\1\57\55\2\1\0\1\2\4\0\1\2\1\0"+
    "\2\2\1\60\14\2\1\61\35\2\1\0\1\2\4\0"+
    "\1\2\1\0\1\2\1\62\7\2\1\63\2\2\1\64"+
    "\6\2\1\65\3\2\1\66\11\2\1\67\13\2\1\0"+
    "\1\2\4\0\1\2\1\0\14\2\1\70\40\2\1\0"+
    "\1\2\4\0\1\2\1\0\1\2\1\71\6\2\1\72"+
    "\3\2\1\73\5\2\1\74\32\2\1\0\1\2\4\0"+
    "\1\2\1\0\3\2\1\75\4\2\1\76\11\2\1\77"+
    "\4\2\1\100\25\2\1\0\1\2\4\0\1\2\1\0"+
    "\10\2\1\101\12\2\1\102\31\2\1\0\1\2\4\0"+
    "\1\2\1\0\13\2\1\103\41\2\1\0\1\2\4\0"+
    "\1\2\1\0\1\2\1\104\6\2\1\105\6\2\1\106"+
    "\35\2\1\0\1\2\4\0\1\2\1\0\11\2\1\107"+
    "\43\2\1\0\1\2\4\0\1\2\1\0\1\2\1\110"+
    "\6\2\1\111\1\112\5\2\1\113\35\2\1\0\1\2"+
    "\4\0\1\2\1\0\4\2\1\114\20\2\1\115\27\2"+
    "\1\0\1\2\4\0\1\2\1\0\10\2\1\116\14\2"+
    "\1\117\27\2\1\0\1\2\4\0\1\2\1\0\1\2"+
    "\1\120\6\2\1\121\44\2\1\0\1\2\4\0\1\2"+
    "\1\0\10\2\1\122\1\123\43\2\1\0\1\2\4\0"+
    "\1\2\1\0\10\2\1\124\3\2\1\125\2\2\1\126"+
    "\3\2\1\127\31\2\1\0\1\2\4\0\1\2\1\0"+
    "\4\2\1\130\10\2\1\131\1\132\36\2\1\0\1\2"+
    "\4\0\1\2\1\0\11\2\1\133\43\2\1\0\1\2"+
    "\4\0\1\2\1\0\11\2\1\134\43\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\135\3\2\1\136\3\2"+
    "\1\137\2\2\1\140\6\2\1\141\31\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\142\21\2\1\143\31\2"+
    "\1\0\1\2\4\0\1\2\1\0\23\2\1\144\31\2"+
    "\1\0\1\2\4\0\1\2\1\0\32\2\1\145\22\2"+
    "\1\0\1\2\4\0\1\2\1\0\17\2\1\146\35\2"+
    "\1\0\1\2\4\0\1\2\1\0\10\2\1\147\11\2"+
    "\1\150\1\151\1\2\1\152\27\2\1\0\1\2\4\0"+
    "\1\2\1\0\3\2\1\153\4\2\1\154\1\155\2\2"+
    "\1\156\40\2\1\0\1\2\4\0\1\2\1\0\10\2"+
    "\1\157\44\2\1\0\1\2\4\0\1\2\1\0\10\2"+
    "\1\160\44\2\1\0\1\2\4\0\1\2\1\0\1\2"+
    "\1\161\53\2\1\0\1\2\4\0\1\2\1\0\1\2"+
    "\1\162\21\2\1\163\31\2\1\0\1\2\4\0\1\2"+
    "\1\0\10\2\1\164\44\2\1\0\1\2\4\0\1\2"+
    "\1\0\1\2\1\165\53\2\1\0\1\2\4\0\1\2"+
    "\1\0\10\2\1\166\44\2\1\0\1\2\4\0\1\2"+
    "\1\0\23\2\1\167\31\2\1\0\1\2\4\0\1\2"+
    "\1\0\11\2\1\170\43\2\1\0\1\171\4\0\1\171"+
    "\1\0\55\171\1\0\1\2\4\0\1\2\1\0\3\2"+
    "\1\172\11\2\1\173\37\2\1\0\1\2\4\0\1\2"+
    "\1\0\1\2\1\174\53\2\1\0\1\2\4\0\1\2"+
    "\1\0\11\2\1\175\3\2\1\176\37\2\1\0\1\2"+
    "\4\0\1\2\1\0\25\2\1\177\27\2\1\0\1\2"+
    "\4\0\1\2\1\0\24\2\1\200\30\2\1\0\1\2"+
    "\4\0\1\2\1\0\3\2\1\201\51\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\202\21\2\1\203\31\2"+
    "\1\0\1\2\4\0\1\2\1\0\16\2\1\204\36\2"+
    "\1\0\1\2\4\0\1\2\1\0\6\2\1\205\4\2"+
    "\1\206\4\2\1\207\34\2\1\0\1\2\4\0\1\2"+
    "\1\0\3\2\1\210\51\2\1\0\1\2\4\0\1\2"+
    "\1\0\6\2\1\211\46\2\1\0\1\2\4\0\1\2"+
    "\1\0\4\2\1\212\50\2\1\0\1\2\4\0\1\2"+
    "\1\0\11\2\1\213\10\2\1\214\32\2\1\0\1\2"+
    "\4\0\1\2\1\0\17\2\1\215\1\216\34\2\1\0"+
    "\1\2\4\0\1\2\1\0\6\2\1\217\46\2\1\0"+
    "\1\2\4\0\1\2\1\0\14\2\1\220\40\2\1\0"+
    "\1\2\4\0\1\2\1\0\11\2\1\221\43\2\1\0"+
    "\1\2\4\0\1\2\1\0\5\2\1\222\47\2\1\0"+
    "\1\2\4\0\1\2\1\0\14\2\1\223\40\2\1\0"+
    "\1\2\4\0\1\2\1\0\17\2\1\224\35\2\1\0"+
    "\1\2\4\0\1\2\1\0\25\2\1\225\27\2\1\0"+
    "\1\2\4\0\1\2\1\0\10\2\1\226\44\2\1\0"+
    "\1\2\4\0\1\2\1\0\11\2\1\227\43\2\1\0"+
    "\1\2\4\0\1\2\1\0\6\2\1\230\46\2\1\0"+
    "\1\2\4\0\1\2\1\0\10\2\1\231\44\2\1\0"+
    "\1\2\4\0\1\2\1\0\14\2\1\232\40\2\1\0"+
    "\1\2\4\0\1\2\1\0\23\2\1\233\31\2\1\0"+
    "\1\2\4\0\1\2\1\0\3\2\1\234\51\2\1\0"+
    "\1\2\4\0\1\2\1\0\4\2\1\235\11\2\1\236"+
    "\1\237\35\2\1\0\1\2\4\0\1\2\1\0\6\2"+
    "\1\240\46\2\1\0\1\2\4\0\1\2\1\0\3\2"+
    "\1\241\5\2\1\242\43\2\1\0\1\2\4\0\1\2"+
    "\1\0\5\2\1\243\47\2\1\0\1\2\4\0\1\2"+
    "\1\0\24\2\1\244\30\2\1\0\1\2\4\0\1\2"+
    "\1\0\4\2\1\245\50\2\1\0\1\2\4\0\1\2"+
    "\1\0\17\2\1\246\35\2\1\0\1\2\4\0\1\2"+
    "\1\0\14\2\1\247\40\2\1\0\1\2\4\0\1\2"+
    "\1\0\17\2\1\250\35\2\1\0\1\2\4\0\1\2"+
    "\1\0\6\2\1\251\6\2\1\252\2\2\1\253\34\2"+
    "\1\0\1\2\4\0\1\2\1\0\10\2\1\254\44\2"+
    "\1\0\1\2\4\0\1\2\1\0\14\2\1\255\40\2"+
    "\1\0\1\2\4\0\1\2\1\0\10\2\1\256\44\2"+
    "\1\0\1\2\4\0\1\2\1\0\17\2\1\257\35\2"+
    "\1\0\1\2\4\0\1\2\1\0\2\2\1\260\52\2"+
    "\1\0\1\2\4\0\1\2\1\0\10\2\1\261\44\2"+
    "\1\0\1\2\4\0\1\2\1\0\1\2\1\262\53\2"+
    "\1\0\1\2\4\0\1\2\1\0\5\2\1\263\47\2"+
    "\1\0\1\2\4\0\1\2\1\0\4\2\1\264\1\265"+
    "\10\2\1\266\36\2\1\0\1\2\4\0\1\2\1\0"+
    "\14\2\1\267\6\2\1\270\31\2\1\0\1\2\4\0"+
    "\1\2\1\0\1\2\1\271\53\2\1\0\1\2\4\0"+
    "\1\2\1\0\1\2\1\272\53\2\1\0\1\2\4\0"+
    "\1\2\1\0\17\2\1\273\35\2\1\0\1\2\4\0"+
    "\1\2\1\0\16\2\1\274\36\2\1\0\1\2\4\0"+
    "\1\2\1\0\17\2\1\275\35\2\1\0\1\2\4\0"+
    "\1\2\1\0\11\2\1\276\43\2\1\0\1\2\4\0"+
    "\1\2\1\0\11\2\1\277\43\2\1\0\1\2\4\0"+
    "\1\2\1\0\11\2\1\300\43\2\1\0\1\2\4\0"+
    "\1\2\1\0\14\2\1\301\40\2\1\0\1\2\4\0"+
    "\1\2\1\0\15\2\1\302\37\2\1\0\1\2\4\0"+
    "\1\2\1\0\2\2\1\303\52\2\1\0\1\2\4\0"+
    "\1\2\1\0\25\2\1\304\13\2\1\305\13\2\1\0"+
    "\1\2\4\0\1\2\1\0\2\2\1\306\52\2\1\0"+
    "\1\2\4\0\1\2\1\0\11\2\1\307\43\2\1\0"+
    "\1\2\4\0\1\2\1\0\13\2\1\310\41\2\1\0"+
    "\1\2\4\0\1\2\1\0\17\2\1\311\35\2\1\0"+
    "\1\2\4\0\1\2\1\0\41\2\1\312\13\2\1\0"+
    "\1\2\4\0\1\2\1\0\41\2\1\313\13\2\1\0"+
    "\1\2\4\0\1\2\1\0\11\2\1\314\43\2\1\0"+
    "\1\2\4\0\1\2\1\0\3\2\1\315\51\2\1\0"+
    "\1\171\4\0\1\171\1\0\1\316\54\171\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\317\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\17\2\1\320\35\2\1\0\1\2"+
    "\4\0\1\2\1\0\16\2\1\321\36\2\1\0\1\2"+
    "\4\0\1\2\1\0\16\2\1\322\36\2\1\0\1\2"+
    "\4\0\1\2\1\0\27\2\1\323\25\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\324\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\6\2\1\325\46\2\1\0\1\2"+
    "\4\0\1\2\1\0\17\2\1\326\35\2\1\0\1\2"+
    "\4\0\1\2\1\0\16\2\1\327\36\2\1\0\1\2"+
    "\4\0\1\2\1\0\6\2\1\330\6\2\1\331\37\2"+
    "\1\0\1\2\4\0\1\2\1\0\1\2\1\332\53\2"+
    "\1\0\1\2\4\0\1\2\1\0\15\2\1\333\37\2"+
    "\1\0\1\2\4\0\1\2\1\0\17\2\1\334\35\2"+
    "\1\0\1\2\4\0\1\2\1\0\14\2\1\335\40\2"+
    "\1\0\1\2\4\0\1\2\1\0\3\2\1\336\51\2"+
    "\1\0\1\2\4\0\1\2\1\0\27\2\1\337\25\2"+
    "\1\0\1\2\4\0\1\2\1\0\14\2\1\340\40\2"+
    "\1\0\1\2\4\0\1\2\1\0\10\2\1\341\44\2"+
    "\1\0\1\2\4\0\1\2\1\0\17\2\1\342\35\2"+
    "\1\0\1\2\4\0\1\2\1\0\23\2\1\343\31\2"+
    "\1\0\1\2\4\0\1\2\1\0\3\2\1\344\51\2"+
    "\1\0\1\2\4\0\1\2\1\0\3\2\1\345\51\2"+
    "\1\0\1\2\4\0\1\2\1\0\13\2\1\346\41\2"+
    "\1\0\1\2\4\0\1\2\1\0\12\2\1\347\42\2"+
    "\1\0\1\2\4\0\1\2\1\0\3\2\1\350\51\2"+
    "\1\0\1\2\4\0\1\2\1\0\15\2\1\351\37\2"+
    "\1\0\1\2\4\0\1\2\1\0\14\2\1\352\40\2"+
    "\1\0\1\2\4\0\1\2\1\0\3\2\1\353\51\2"+
    "\1\0\1\2\4\0\1\2\1\0\12\2\1\354\42\2"+
    "\1\0\1\2\4\0\1\2\1\0\6\2\1\355\46\2"+
    "\1\0\1\2\4\0\1\2\1\0\23\2\1\356\31\2"+
    "\1\0\1\2\4\0\1\2\1\0\13\2\1\357\41\2"+
    "\1\0\1\2\4\0\1\2\1\0\4\2\1\360\50\2"+
    "\1\0\1\2\4\0\1\2\1\0\16\2\1\361\36\2"+
    "\1\0\1\2\4\0\1\2\1\0\10\2\1\362\44\2"+
    "\1\0\1\2\4\0\1\2\1\0\3\2\1\363\14\2"+
    "\1\364\34\2\1\0\1\2\4\0\1\2\1\0\13\2"+
    "\1\365\41\2\1\0\1\2\4\0\1\2\1\0\10\2"+
    "\1\366\44\2\1\0\1\2\4\0\1\2\1\0\3\2"+
    "\1\367\51\2\1\0\1\2\4\0\1\2\1\0\14\2"+
    "\1\370\40\2\1\0\1\2\4\0\1\2\1\0\16\2"+
    "\1\371\36\2\1\0\1\2\4\0\1\2\1\0\1\2"+
    "\1\372\53\2\1\0\1\2\4\0\1\2\1\0\10\2"+
    "\1\373\44\2\1\0\1\2\4\0\1\2\1\0\3\2"+
    "\1\374\51\2\1\0\1\2\4\0\1\2\1\0\6\2"+
    "\1\375\46\2\1\0\1\2\4\0\1\2\1\0\3\2"+
    "\1\376\51\2\1\0\1\2\4\0\1\2\1\0\3\2"+
    "\1\377\51\2\1\0\1\2\4\0\1\2\1\0\3\2"+
    "\1\u0100\51\2\1\0\1\2\4\0\1\2\1\0\17\2"+
    "\1\u0101\35\2\1\0\1\2\4\0\1\2\1\0\11\2"+
    "\1\u0102\43\2\1\0\1\2\4\0\1\2\1\0\4\2"+
    "\1\u0103\50\2\1\0\1\2\4\0\1\2\1\0\24\2"+
    "\1\u0104\30\2\1\0\1\2\4\0\1\2\1\0\25\2"+
    "\1\u0105\27\2\1\0\1\2\4\0\1\2\1\0\3\2"+
    "\1\u0106\51\2\1\0\1\2\4\0\1\2\1\0\15\2"+
    "\1\u0107\37\2\1\0\1\2\4\0\1\2\1\0\20\2"+
    "\1\u0108\34\2\1\0\1\2\4\0\1\2\1\0\11\2"+
    "\1\u0109\43\2\1\0\1\2\4\0\1\2\1\0\15\2"+
    "\1\u010a\37\2\1\0\1\2\4\0\1\2\1\0\1\2"+
    "\1\u010b\53\2\1\0\1\2\4\0\1\2\1\0\13\2"+
    "\1\u010c\41\2\1\0\1\2\4\0\1\2\1\0\17\2"+
    "\1\u010d\35\2\1\0\1\2\4\0\1\2\1\0\24\2"+
    "\1\u010e\30\2\1\0\1\2\4\0\1\2\1\0\11\2"+
    "\1\u010f\43\2\1\0\1\2\4\0\1\2\1\0\7\2"+
    "\1\u0110\45\2\1\0\1\2\4\0\1\2\1\0\23\2"+
    "\1\u0111\31\2\1\0\1\2\4\0\1\2\1\0\13\2"+
    "\1\u0112\41\2\1\0\1\2\4\0\1\2\1\0\23\2"+
    "\1\u0113\31\2\1\0\1\2\4\0\1\2\1\0\15\2"+
    "\1\u0114\37\2\1\0\1\2\4\0\1\2\1\0\30\2"+
    "\1\u0115\24\2\1\0\1\2\4\0\1\2\1\0\5\2"+
    "\1\u0116\47\2\1\0\1\2\4\0\1\2\1\0\4\2"+
    "\1\u0117\50\2\1\0\1\2\4\0\1\2\1\0\12\2"+
    "\1\u0118\42\2\1\0\1\2\4\0\1\2\1\0\4\2"+
    "\1\u0119\50\2\1\0\1\2\4\0\1\2\1\0\10\2"+
    "\1\u011a\44\2\1\0\1\2\4\0\1\2\1\0\14\2"+
    "\1\u011b\40\2\1\0\1\2\4\0\1\2\1\0\6\2"+
    "\1\u011c\46\2\1\0\1\2\4\0\1\2\1\0\1\2"+
    "\1\u011d\53\2\1\0\1\2\4\0\1\2\1\0\5\2"+
    "\1\u011e\47\2\1\0\1\2\4\0\1\2\1\0\43\2"+
    "\1\u011f\11\2\1\0\1\2\4\0\1\2\1\0\23\2"+
    "\1\u0120\31\2\1\0\1\2\4\0\1\2\1\0\1\2"+
    "\1\u0121\53\2\1\0\1\2\4\0\1\2\1\0\27\2"+
    "\1\u0122\25\2\1\0\1\2\4\0\1\2\1\0\4\2"+
    "\1\u0123\50\2\1\0\1\2\4\0\1\2\1\0\25\2"+
    "\1\u0124\27\2\1\0\1\2\4\0\1\2\1\0\1\2"+
    "\1\u0125\53\2\1\0\1\2\4\0\1\2\1\0\23\2"+
    "\1\u0126\31\2\1\0\1\2\4\0\1\2\1\0\4\2"+
    "\1\u0127\50\2\1\0\1\2\4\0\1\2\1\0\1\2"+
    "\1\u0128\53\2\1\0\1\2\4\0\1\2\1\0\1\2"+
    "\1\u0129\53\2\1\0\1\2\4\0\1\2\1\0\12\2"+
    "\1\u012a\42\2\1\0\1\2\4\0\1\2\1\0\11\2"+
    "\1\u012b\43\2\1\0\1\2\4\0\1\2\1\0\10\2"+
    "\1\u012c\44\2\1\0\1\2\4\0\1\2\1\0\25\2"+
    "\1\u012d\27\2\1\0\1\2\4\0\1\2\1\0\1\2"+
    "\1\u012e\53\2\1\0\1\2\4\0\1\2\1\0\1\2"+
    "\1\u012f\53\2\1\0\1\2\4\0\1\2\1\0\16\2"+
    "\1\u0130\36\2\1\0\1\2\4\0\1\2\1\0\12\2"+
    "\1\u0131\42\2\1\0\1\2\4\0\1\2\1\0\1\2"+
    "\1\u0132\53\2\1\0\1\2\4\0\1\2\1\0\5\2"+
    "\1\u0133\47\2\1\0\1\2\4\0\1\2\1\0\7\2"+
    "\1\u0134\45\2\1\0\1\2\4\0\1\2\1\0\1\2"+
    "\1\u0135\53\2\1\0\1\2\4\0\1\2\1\0\1\2"+
    "\1\u0136\53\2\1\0\1\2\4\0\1\2\1\0\6\2"+
    "\1\u0137\46\2\1\0\1\2\4\0\1\2\1\0\27\2"+
    "\1\u0138\25\2\1\0\1\2\4\0\1\2\1\0\23\2"+
    "\1\u0139\31\2\1\0\1\2\4\0\1\2\1\0\3\2"+
    "\1\u013a\51\2\1\0\1\2\4\0\1\2\1\0\23\2"+
    "\1\u013b\31\2\1\0\1\2\4\0\1\2\1\0\23\2"+
    "\1\u013c\31\2\1\0\1\2\4\0\1\2\1\0\10\2"+
    "\1\u013d\2\2\1\u013e\41\2\1\0\1\2\4\0\1\2"+
    "\1\0\3\2\1\u013f\51\2\1\0\1\2\4\0\1\2"+
    "\1\0\1\2\1\u0140\53\2\1\0\1\2\4\0\1\2"+
    "\1\0\3\2\1\u0141\51\2\1\0\1\2\4\0\1\2"+
    "\1\0\14\2\1\u0142\40\2\1\0\1\2\4\0\1\2"+
    "\1\0\17\2\1\u0143\35\2\1\0\1\2\4\0\1\2"+
    "\1\0\14\2\1\u0144\40\2\1\0\1\2\4\0\1\2"+
    "\1\0\23\2\1\u0145\31\2\1\0\1\2\4\0\1\2"+
    "\1\0\10\2\1\u0146\44\2\1\0\1\2\4\0\1\2"+
    "\1\0\11\2\1\u0147\13\2\1\u0148\27\2\1\0\1\2"+
    "\4\0\1\2\1\0\10\2\1\u0149\44\2\1\0\1\2"+
    "\4\0\1\2\1\0\5\2\1\u014a\47\2\1\0\1\2"+
    "\4\0\1\2\1\0\14\2\1\u014b\40\2\1\0\1\2"+
    "\4\0\1\2\1\0\17\2\1\u014c\35\2\1\0\1\2"+
    "\4\0\1\2\1\0\21\2\1\u014d\33\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u014e\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u014f\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\14\2\1\u0150\40\2\1\0\1\2"+
    "\4\0\1\2\1\0\25\2\1\u0151\27\2\1\0\1\2"+
    "\4\0\1\2\1\0\14\2\1\u0152\40\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u0153\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\13\2\1\u0154\41\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u0155\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\6\2\1\u0156\46\2\1\0\1\2"+
    "\4\0\1\2\1\0\6\2\1\u0157\46\2\1\0\1\2"+
    "\4\0\1\2\1\0\17\2\1\u0158\35\2\1\0\1\2"+
    "\4\0\1\2\1\0\4\2\1\u0159\50\2\1\0\1\2"+
    "\4\0\1\2\1\0\17\2\1\u015a\35\2\1\0\1\2"+
    "\4\0\1\2\1\0\3\2\1\u015b\51\2\1\0\1\2"+
    "\4\0\1\2\1\0\27\2\1\u015c\25\2\1\0\1\2"+
    "\4\0\1\2\1\0\14\2\1\u015d\40\2\1\0\1\2"+
    "\4\0\1\2\1\0\6\2\1\u015e\46\2\1\0\1\2"+
    "\4\0\1\2\1\0\13\2\1\u015f\41\2\1\0\1\2"+
    "\4\0\1\2\1\0\10\2\1\u0160\44\2\1\0\1\2"+
    "\4\0\1\2\1\0\4\2\1\u0161\50\2\1\0\1\2"+
    "\4\0\1\2\1\0\17\2\1\u0162\35\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u0163\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u0164\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\5\2\1\u0165\47\2\1\0\1\2"+
    "\4\0\1\2\1\0\24\2\1\u0166\30\2\1\0\1\2"+
    "\4\0\1\2\1\0\5\2\1\u0167\47\2\1\0\1\2"+
    "\4\0\1\2\1\0\3\2\1\u0168\51\2\1\0\1\2"+
    "\4\0\1\2\1\0\24\2\1\u0169\30\2\1\0\1\2"+
    "\4\0\1\2\1\0\10\2\1\u016a\44\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u016b\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\11\2\1\u016c\43\2\1\0\1\2"+
    "\4\0\1\2\1\0\17\2\1\u016d\35\2\1\0\1\2"+
    "\4\0\1\2\1\0\15\2\1\u016e\37\2\1\0\1\2"+
    "\4\0\1\2\1\0\10\2\1\u016f\44\2\1\0\1\2"+
    "\4\0\1\2\1\0\5\2\1\u0170\47\2\1\0\1\2"+
    "\4\0\1\2\1\0\5\2\1\u0171\47\2\1\0\1\2"+
    "\4\0\1\2\1\0\4\2\1\u0172\50\2\1\0\1\2"+
    "\4\0\1\2\1\0\4\2\1\u0173\50\2\1\0\1\2"+
    "\4\0\1\2\1\0\10\2\1\u0174\44\2\1\0\1\2"+
    "\4\0\1\2\1\0\6\2\1\u0175\46\2\1\0\1\2"+
    "\4\0\1\2\1\0\4\2\1\u0176\50\2\1\0\1\2"+
    "\4\0\1\2\1\0\23\2\1\u0177\31\2\1\0\1\2"+
    "\4\0\1\2\1\0\22\2\1\u0178\32\2\1\0\1\2"+
    "\4\0\1\2\1\0\17\2\1\u0179\35\2\1\0\1\2"+
    "\4\0\1\2\1\0\5\2\1\u017a\47\2\1\0\1\2"+
    "\4\0\1\2\1\0\5\2\1\u017b\47\2\1\0\1\2"+
    "\4\0\1\2\1\0\23\2\1\u017c\31\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u017d\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\6\2\1\u017e\46\2\1\0\1\2"+
    "\4\0\1\2\1\0\14\2\1\u017f\40\2\1\0\1\2"+
    "\4\0\1\2\1\0\16\2\1\u0180\36\2\1\0\1\2"+
    "\4\0\1\2\1\0\13\2\1\u0181\41\2\1\0\1\2"+
    "\4\0\1\2\1\0\3\2\1\u0182\51\2\1\0\1\2"+
    "\4\0\1\2\1\0\23\2\1\u0183\31\2\1\0\1\2"+
    "\4\0\1\2\1\0\4\2\1\u0184\50\2\1\0\1\2"+
    "\4\0\1\2\1\0\4\2\1\u0185\50\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u0186\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\23\2\1\u0187\31\2\1\0\1\2"+
    "\4\0\1\2\1\0\11\2\1\u0188\43\2\1\0\1\2"+
    "\4\0\1\2\1\0\25\2\1\u0189\27\2\1\0\1\2"+
    "\4\0\1\2\1\0\3\2\1\u018a\51\2\1\0\1\2"+
    "\4\0\1\2\1\0\14\2\1\u018b\40\2\1\0\1\2"+
    "\4\0\1\2\1\0\23\2\1\u018c\31\2\1\0\1\2"+
    "\4\0\1\2\1\0\24\2\1\u018d\30\2\1\0\1\2"+
    "\4\0\1\2\1\0\4\2\1\u018e\50\2\1\0\1\2"+
    "\4\0\1\2\1\0\11\2\1\u0147\43\2\1\0\1\2"+
    "\4\0\1\2\1\0\16\2\1\u018f\36\2\1\0\1\2"+
    "\4\0\1\2\1\0\14\2\1\u0190\40\2\1\0\1\2"+
    "\4\0\1\2\1\0\23\2\1\u0191\31\2\1\0\1\2"+
    "\4\0\1\2\1\0\23\2\1\u0192\31\2\1\0\1\2"+
    "\4\0\1\2\1\0\11\2\1\u0193\43\2\1\0\1\2"+
    "\4\0\1\2\1\0\4\2\1\u0194\50\2\1\0\1\2"+
    "\4\0\1\2\1\0\5\2\1\u0195\47\2\1\0\1\2"+
    "\4\0\1\2\1\0\6\2\1\u0196\46\2\1\0\1\2"+
    "\4\0\1\2\1\0\4\2\1\u0197\50\2\1\0\1\2"+
    "\4\0\1\2\1\0\25\2\1\u0198\27\2\1\0\1\2"+
    "\4\0\1\2\1\0\3\2\1\u0199\51\2\1\0\1\2"+
    "\4\0\1\2\1\0\23\2\1\u019a\31\2\1\0\1\2"+
    "\4\0\1\2\1\0\27\2\1\u019b\25\2\1\0\1\2"+
    "\4\0\1\2\1\0\3\2\1\u019c\51\2\1\0\1\2"+
    "\4\0\1\2\1\0\11\2\1\u019d\43\2\1\0\1\2"+
    "\4\0\1\2\1\0\6\2\1\u019e\46\2\1\0\1\2"+
    "\4\0\1\2\1\0\4\2\1\u019f\50\2\1\0\1\2"+
    "\4\0\1\2\1\0\5\2\1\u01a0\47\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u01a1\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\5\2\1\u01a2\47\2\1\0\1\2"+
    "\4\0\1\2\1\0\11\2\1\u01a3\43\2\1\0\1\2"+
    "\4\0\1\2\1\0\23\2\1\u01a4\31\2\1\0\1\2"+
    "\4\0\1\2\1\0\11\2\1\u01a5\43\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u01a6\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\10\2\1\u01a7\44\2\1\0\1\2"+
    "\4\0\1\2\1\0\4\2\1\u01a8\50\2\1\0\1\2"+
    "\4\0\1\2\1\0\11\2\1\u01a9\43\2\1\0\1\2"+
    "\4\0\1\2\1\0\10\2\1\u01aa\44\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u01ab\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\3\2\1\u01ac\51\2\1\0\1\2"+
    "\4\0\1\2\1\0\24\2\1\u01ad\30\2\1\0\1\2"+
    "\4\0\1\2\1\0\6\2\1\u01ae\46\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u01af\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\3\2\1\u01b0\51\2\1\0\1\2"+
    "\4\0\1\2\1\0\10\2\1\u01b1\44\2\1\0\1\2"+
    "\4\0\1\2\1\0\17\2\1\u01b2\35\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u01b3\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\13\2\1\u01b4\41\2\1\0\1\2"+
    "\4\0\1\2\1\0\16\2\1\u01b5\36\2\1\0\1\2"+
    "\4\0\1\2\1\0\3\2\1\u01b6\51\2\1\0\1\2"+
    "\4\0\1\2\1\0\15\2\1\u01b7\37\2\1\0\1\2"+
    "\4\0\1\2\1\0\50\2\1\u01b8\4\2\1\0\1\2"+
    "\4\0\1\2\1\0\11\2\1\u01b9\43\2\1\0\1\2"+
    "\4\0\1\2\1\0\37\2\1\u01ba\1\u01bb\14\2\1\0"+
    "\1\2\4\0\1\2\1\0\14\2\1\u01bc\40\2\1\0"+
    "\1\2\4\0\1\2\1\0\22\2\1\u01bd\32\2\1\0"+
    "\1\2\4\0\1\2\1\0\10\2\1\u01be\44\2\1\0"+
    "\1\2\4\0\1\2\1\0\24\2\1\u01bf\30\2\1\0"+
    "\1\2\4\0\1\2\1\0\15\2\1\u01c0\37\2\1\0"+
    "\1\2\4\0\1\2\1\0\10\2\1\u01c1\44\2\1\0"+
    "\1\2\4\0\1\2\1\0\3\2\1\u01c2\51\2\1\0"+
    "\1\2\4\0\1\2\1\0\16\2\1\u01c3\36\2\1\0"+
    "\1\2\4\0\1\2\1\0\23\2\1\u01c4\31\2\1\0"+
    "\1\2\4\0\1\2\1\0\22\2\1\u01c5\32\2\1\0"+
    "\1\2\4\0\1\2\1\0\4\2\1\u01c6\50\2\1\0"+
    "\1\2\4\0\1\2\1\0\25\2\1\u01c7\27\2\1\0"+
    "\1\2\4\0\1\2\1\0\1\2\1\u01c8\53\2\1\0"+
    "\1\2\4\0\1\2\1\0\3\2\1\u01c9\51\2\1\0"+
    "\1\2\4\0\1\2\1\0\5\2\1\u01ca\47\2\1\0"+
    "\1\2\4\0\1\2\1\0\54\2\1\u01cb\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u01cc\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\15\2\1\u01cd\37\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u01ce\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\3\2\1\u01cf\51\2\1\0\1\2"+
    "\4\0\1\2\1\0\5\2\1\u01d0\47\2\1\0\1\2"+
    "\4\0\1\2\1\0\5\2\1\u01d1\47\2\1\0\1\2"+
    "\4\0\1\2\1\0\23\2\1\u01d2\31\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u01d3\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\37\2\1\u01d4\15\2\1\0\1\2"+
    "\4\0\1\2\1\0\15\2\1\u01d5\37\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u01d6\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u01d7\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u01d8\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\4\2\1\u01d9\50\2\1\0\1\2"+
    "\4\0\1\2\1\0\10\2\1\u01da\44\2\1\0\1\2"+
    "\4\0\1\2\1\0\5\2\1\u01db\47\2\1\0\1\2"+
    "\4\0\1\2\1\0\4\2\1\u01dc\50\2\1\0\1\2"+
    "\4\0\1\2\1\0\7\2\1\u01dd\45\2\1\0\1\2"+
    "\4\0\1\2\1\0\52\2\1\u01de\2\2\1\0\1\2"+
    "\4\0\1\2\1\0\10\2\1\u01df\44\2\1\0\1\2"+
    "\4\0\1\2\1\0\17\2\1\u01e0\35\2\1\0\1\2"+
    "\4\0\1\2\1\0\10\2\1\u01e1\44\2\1\0\1\2"+
    "\4\0\1\2\1\0\6\2\1\u01e2\46\2\1\0\1\2"+
    "\4\0\1\2\1\0\3\2\1\u01e3\51\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u01e4\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\23\2\1\u01e5\31\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u01e6\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\10\2\1\u01e7\44\2\1\0\1\2"+
    "\4\0\1\2\1\0\14\2\1\u01e8\40\2\1\0\1\2"+
    "\4\0\1\2\1\0\15\2\1\u01e9\37\2\1\0\1\2"+
    "\4\0\1\2\1\0\4\2\1\u01ea\50\2\1\0\1\2"+
    "\4\0\1\2\1\0\3\2\1\u01eb\51\2\1\0\1\2"+
    "\4\0\1\2\1\0\4\2\1\u01ec\50\2\1\0\1\2"+
    "\4\0\1\2\1\0\23\2\1\u01ed\31\2\1\0\1\2"+
    "\4\0\1\2\1\0\17\2\1\u01ee\35\2\1\0\1\2"+
    "\4\0\1\2\1\0\10\2\1\u01ef\44\2\1\0\1\2"+
    "\4\0\1\2\1\0\10\2\1\u01f0\44\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u01f1\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\11\2\1\u01f2\43\2\1\0\1\2"+
    "\4\0\1\2\1\0\4\2\1\u01f3\50\2\1\0\1\2"+
    "\4\0\1\2\1\0\14\2\1\u01f4\40\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u01f5\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\5\2\1\u01f6\47\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u01f7\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\11\2\1\u01f8\43\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u01f9\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\20\2\1\u01fa\34\2\1\0\1\2"+
    "\4\0\1\2\1\0\5\2\1\u01fb\47\2\1\0\1\2"+
    "\4\0\1\2\1\0\27\2\1\u01fc\25\2\1\0\1\2"+
    "\4\0\1\2\1\0\27\2\1\u01fd\25\2\1\0\1\2"+
    "\4\0\1\2\1\0\4\2\1\u01fe\50\2\1\0\1\2"+
    "\4\0\1\2\1\0\11\2\1\u01ff\43\2\1\0\1\2"+
    "\4\0\1\2\1\0\24\2\1\u0200\30\2\1\0\1\2"+
    "\4\0\1\2\1\0\25\2\1\u0201\27\2\1\0\1\2"+
    "\4\0\1\2\1\0\43\2\1\u0202\11\2\1\0\1\2"+
    "\4\0\1\2\1\0\6\2\1\u0203\46\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u0204\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\4\2\1\u0205\50\2\1\0\1\2"+
    "\4\0\1\2\1\0\10\2\1\u0206\44\2\1\0\1\2"+
    "\4\0\1\2\1\0\24\2\1\u0207\30\2\1\0\1\2"+
    "\4\0\1\2\1\0\6\2\1\u0208\46\2\1\0\1\2"+
    "\4\0\1\2\1\0\23\2\1\u0209\31\2\1\0\1\2"+
    "\4\0\1\2\1\0\4\2\1\u020a\50\2\1\0\1\2"+
    "\4\0\1\2\1\0\5\2\1\u020b\47\2\1\0\1\2"+
    "\4\0\1\2\1\0\21\2\1\u020c\33\2\1\0\1\2"+
    "\4\0\1\2\1\0\4\2\1\u020d\50\2\1\0\1\2"+
    "\4\0\1\2\1\0\4\2\1\u020e\50\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u020f\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\6\2\1\u0210\46\2\1\0\1\2"+
    "\4\0\1\2\1\0\23\2\1\u0211\31\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u0212\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\4\2\1\u0213\50\2\1\0\1\2"+
    "\4\0\1\2\1\0\25\2\1\u0214\27\2\1\0\1\2"+
    "\4\0\1\2\1\0\11\2\1\u0215\43\2\1\0\1\2"+
    "\4\0\1\2\1\0\14\2\1\u0216\40\2\1\0\1\2"+
    "\4\0\1\2\1\0\3\2\1\u0217\51\2\1\0\1\2"+
    "\4\0\1\2\1\0\6\2\1\u0218\46\2\1\0\1\2"+
    "\4\0\1\2\1\0\25\2\1\u0219\27\2\1\0\1\2"+
    "\4\0\1\2\1\0\23\2\1\u021a\31\2\1\0\1\2"+
    "\4\0\1\2\1\0\44\2\1\u021b\10\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u021c\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\23\2\1\u021d\31\2\1\0\1\2"+
    "\4\0\1\2\1\0\3\2\1\u021e\51\2\1\0\1\2"+
    "\4\0\1\2\1\0\4\2\1\u021f\50\2\1\0\1\2"+
    "\4\0\1\2\1\0\10\2\1\u0220\44\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u0221\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\30\2\1\u0222\24\2\1\0\1\2"+
    "\4\0\1\2\1\0\14\2\1\u0223\40\2\1\0\1\2"+
    "\4\0\1\2\1\0\24\2\1\u0224\30\2\1\0\1\2"+
    "\4\0\1\2\1\0\22\2\1\u0225\32\2\1\0\1\2"+
    "\4\0\1\2\1\0\10\2\1\u0226\44\2\1\0\1\2"+
    "\4\0\1\2\1\0\3\2\1\u0227\51\2\1\0\1\2"+
    "\4\0\1\2\1\0\3\2\1\u0228\51\2\1\0\1\2"+
    "\4\0\1\2\1\0\22\2\1\u0229\32\2\1\0\1\2"+
    "\4\0\1\2\1\0\3\2\1\u022a\51\2\1\0\1\2"+
    "\4\0\1\2\1\0\5\2\1\u022b\47\2\1\0\1\2"+
    "\4\0\1\2\1\0\27\2\1\u022c\25\2\1\0\1\2"+
    "\4\0\1\2\1\0\30\2\1\u022d\24\2\1\0\1\2"+
    "\4\0\1\2\1\0\6\2\1\u022e\46\2\1\0\1\2"+
    "\4\0\1\2\1\0\3\2\1\u022f\51\2\1\0\1\2"+
    "\4\0\1\2\1\0\36\2\1\u0230\16\2\1\0\1\2"+
    "\4\0\1\2\1\0\3\2\1\u0231\51\2\1\0\1\2"+
    "\4\0\1\2\1\0\15\2\1\u0232\37\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u0233\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\u0234\53\2\1\0\1\2"+
    "\4\0\1\2\1\0\15\2\1\u0235\37\2\1\0\1\2"+
    "\4\0\1\2\1\0\15\2\1\u0236\37\2\1\0\1\2"+
    "\4\0\1\2\1\0\5\2\1\u0237\47\2\1\0\1\2"+
    "\4\0\1\2\1\0\2\2\1\u0238\52\2\1\0\1\2"+
    "\4\0\1\2\1\0\11\2\1\u0239\43\2\1\0\1\2"+
    "\4\0\1\2\1\0\23\2\1\u023a\31\2\1\0\1\2"+
    "\4\0\1\2\1\0\17\2\1\u023b\35\2\1\0\1\2"+
    "\4\0\1\2\1\0\22\2\1\u023c\32\2\1\0\1\2"+
    "\4\0\1\2\1\0\4\2\1\u023d\50\2\1\0\1\2"+
    "\4\0\1\2\1\0\33\2\1\u023e\1\u023f\1\u0240\17\2"+
    "\1\0\1\2\4\0\1\2\1\0\27\2\1\u0241\25\2"+
    "\1\0\1\2\4\0\1\2\1\0\6\2\1\u0242\46\2"+
    "\1\0\1\2\4\0\1\2\1\0\1\2\1\u0243\53\2"+
    "\1\0\1\2\4\0\1\2\1\0\6\2\1\u0244\46\2"+
    "\1\0\1\2\4\0\1\2\1\0\23\2\1\u0245\31\2"+
    "\1\0\1\2\4\0\1\2\1\0\1\2\1\u0246\53\2"+
    "\1\0\1\2\4\0\1\2\1\0\4\2\1\u0247\50\2"+
    "\1\0\1\2\4\0\1\2\1\0\23\2\1\u0248\31\2"+
    "\1\0\1\2\4\0\1\2\1\0\3\2\1\u0249\51\2"+
    "\1\0\1\2\4\0\1\2\1\0\11\2\1\u024a\43\2"+
    "\1\0\1\2\4\0\1\2\1\0\17\2\1\u024b\35\2"+
    "\1\0\1\2\4\0\1\2\1\0\12\2\1\u024c\42\2"+
    "\1\0\1\2\4\0\1\2\1\0\14\2\1\u024d\40\2"+
    "\1\0\1\2\4\0\1\2\1\0\15\2\1\u024e\37\2"+
    "\1\0\1\2\4\0\1\2\1\0\4\2\1\u024f\50\2"+
    "\1\0\1\2\4\0\1\2\1\0\11\2\1\u0250\43\2"+
    "\1\0\1\2\4\0\1\2\1\0\10\2\1\u0251\44\2"+
    "\1\0\1\2\4\0\1\2\1\0\3\2\1\u0252\51\2"+
    "\1\0\1\2\4\0\1\2\1\0\2\2\1\u0253\52\2"+
    "\1\0\1\2\4\0\1\2\1\0\15\2\1\u0254\37\2"+
    "\1\0\1\2\4\0\1\2\1\0\13\2\1\u0255\41\2"+
    "\1\0\1\2\4\0\1\2\1\0\6\2\1\u0256\46\2"+
    "\1\0\1\2\4\0\1\2\1\0\6\2\1\u0257\46\2"+
    "\1\0\1\2\4\0\1\2\1\0\10\2\1\u0258\44\2"+
    "\1\0\1\2\4\0\1\2\1\0\25\2\1\u0259\27\2"+
    "\1\0\1\2\4\0\1\2\1\0\6\2\1\u025a\46\2"+
    "\1\0\1\2\4\0\1\2\1\0\14\2\1\u025b\40\2"+
    "\1\0\1\2\4\0\1\2\1\0\17\2\1\u025c\35\2"+
    "\1\0\1\2\4\0\1\2\1\0\1\2\1\u025d\53\2"+
    "\1\0\1\2\4\0\1\2\1\0\30\2\1\u025e\24\2"+
    "\1\0\1\2\4\0\1\2\1\0\10\2\1\u025f\44\2"+
    "\1\0\1\2\4\0\1\2\1\0\5\2\1\u0260\47\2"+
    "\1\0\1\2\4\0\1\2\1\0\1\2\1\u0261\53\2"+
    "\1\0\1\2\4\0\1\2\1\0\3\2\1\u0262\51\2"+
    "\1\0\1\2\4\0\1\2\1\0\14\2\1\u0263\40\2"+
    "\1\0\1\2\4\0\1\2\1\0\3\2\1\u0264\51\2"+
    "\1\0\1\2\4\0\1\2\1\0\4\2\1\u0265\50\2"+
    "\1\0\1\2\4\0\1\2\1\0\11\2\1\u0266\43\2"+
    "\1\0\1\2\4\0\1\2\1\0\3\2\1\u0267\51\2"+
    "\1\0\1\2\4\0\1\2\1\0\40\2\1\u0268\5\2"+
    "\1\u0269\6\2\1\0\1\2\4\0\1\2\1\0\23\2"+
    "\1\u026a\31\2\1\0\1\2\4\0\1\2\1\0\25\2"+
    "\1\u026b\27\2\1\0\1\2\4\0\1\2\1\0\1\2"+
    "\1\u026c\53\2\1\0\1\2\4\0\1\2\1\0\16\2"+
    "\1\u026d\36\2\1\0\1\2\4\0\1\2\1\0\13\2"+
    "\1\u026e\41\2\1\0\1\2\4\0\1\2\1\0\14\2"+
    "\1\u026f\40\2\1\0\1\2\4\0\1\2\1\0\1\2"+
    "\1\u0270\53\2\1\0\1\2\4\0\1\2\1\0\23\2"+
    "\1\u0271\31\2\1\0\1\2\4\0\1\2\1\0\14\2"+
    "\1\u0272\40\2\1\0\1\2\4\0\1\2\1\0\10\2"+
    "\1\u0273\44\2\1\0\1\2\4\0\1\2\1\0\11\2"+
    "\1\u0274\43\2\1\0\1\2\4\0\1\2\1\0\13\2"+
    "\1\u0275\41\2\1\0\1\2\4\0\1\2\1\0\36\2"+
    "\1\u0276\16\2\1\0\1\2\4\0\1\2\1\0\1\2"+
    "\1\u0277\53\2\1\0\1\2\4\0\1\2\1\0\4\2"+
    "\1\u0278\50\2\1\0\1\2\4\0\1\2\1\0\35\2"+
    "\1\u0279\17\2\1\0\1\2\4\0\1\2\1\0\10\2"+
    "\1\u027a\44\2\1\0\1\2\4\0\1\2\1\0\4\2"+
    "\1\u027b\50\2\1\0\1\2\4\0\1\2\1\0\11\2"+
    "\1\u027c\43\2\1\0\1\2\4\0\1\2\1\0\10\2"+
    "\1\u027d\44\2\1\0\1\2\4\0\1\2\1\0\4\2"+
    "\1\u027e\50\2\1\0\1\2\4\0\1\2\1\0\15\2"+
    "\1\u027f\37\2\1\0\1\2\4\0\1\2\1\0\10\2"+
    "\1\u0280\44\2\1\0\1\2\4\0\1\2\1\0\4\2"+
    "\1\u0281\50\2\1\0\1\2\4\0\1\2\1\0\5\2"+
    "\1\u0282\47\2\1\0\1\2\4\0\1\2\1\0\3\2"+
    "\1\u0283\51\2\1\0\1\2\4\0\1\2\1\0\4\2"+
    "\1\u0284\50\2\1\0\1\2\4\0\1\2\1\0\6\2"+
    "\1\u0285\46\2\1\0\1\2\4\0\1\2\1\0\1\2"+
    "\1\u0286\53\2\1\0\1\2\4\0\1\2\1\0\5\2"+
    "\1\u0287\47\2\1\0\1\2\4\0\1\2\1\0\6\2"+
    "\1\u0288\46\2\1\0\1\2\4\0\1\2\1\0\6\2"+
    "\1\u0289\46\2\1\0\1\2\4\0\1\2\1\0\11\2"+
    "\1\u028a\43\2\1\0\1\2\4\0\1\2\1\0\16\2"+
    "\1\u028b\36\2\1\0\1\2\4\0\1\2\1\0\3\2"+
    "\1\u028c\51\2\1\0\1\2\4\0\1\2\1\0\1\2"+
    "\1\u028d\53\2\1\0\1\2\4\0\1\2\1\0\27\2"+
    "\1\u028e\25\2\1\0\1\2\4\0\1\2\1\0\15\2"+
    "\1\u028f\37\2\1\0\1\2\4\0\1\2\1\0\14\2"+
    "\1\u0290\40\2\1\0\1\2\4\0\1\2\1\0\1\2"+
    "\1\u0291\53\2\1\0\1\2\4\0\1\2\1\0\14\2"+
    "\1\u0292\40\2\1\0\1\2\4\0\1\2\1\0\23\2"+
    "\1\u0293\31\2\1\0\1\2\4\0\1\2\1\0\14\2"+
    "\1\u0294\40\2\1\0\1\2\4\0\1\2\1\0\23\2"+
    "\1\u0295\31\2\1\0\1\2\4\0\1\2\1\0\4\2"+
    "\1\u0296\50\2\1\0\1\2\4\0\1\2\1\0\4\2"+
    "\1\u0297\50\2\1\0\1\2\4\0\1\2\1\0\13\2"+
    "\1\u0298\41\2\1\0\1\2\4\0\1\2\1\0\13\2"+
    "\1\u0299\41\2\1\0\1\2\4\0\1\2\1\0\3\2"+
    "\1\u029a\51\2\1\0\1\2\4\0\1\2\1\0\3\2"+
    "\1\u029b\51\2\1\0\1\2\4\0\1\2\1\0\15\2"+
    "\1\u029c\37\2\1\0\1\2\4\0\1\2\1\0\6\2"+
    "\1\u029d\46\2\1\0\1\2\4\0\1\2\1\0\1\2"+
    "\1\u029e\53\2\1\0\1\2\4\0\1\2\1\0\1\2"+
    "\1\u029f\53\2\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[30104];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\11\1\1\1\11\1\1\1\11\44\1"+
    "\2\11\1\0\111\1\1\0\u0226\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[671];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  StructurizrDslLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return Tokens.UNQUOTED_TEXT;
            } 
            // fall through
          case 113: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 114: break;
          case 3: 
            { return Tokens.LINE_BREAK;
            } 
            // fall through
          case 115: break;
          case 4: 
            { return Tokens.QUOTED_TEXT;
            } 
            // fall through
          case 116: break;
          case 5: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 117: break;
          case 6: 
            { return Tokens.OPEN_PARENS;
            } 
            // fall through
          case 118: break;
          case 7: 
            { return Tokens.CLOSE_PARENS;
            } 
            // fall through
          case 119: break;
          case 8: 
            { return Tokens.STAR;
            } 
            // fall through
          case 120: break;
          case 9: 
            { return Tokens.EQ;
            } 
            // fall through
          case 121: break;
          case 10: 
            { return Tokens.TB;
            } 
            // fall through
          case 122: break;
          case 11: 
            { return Tokens.RL;
            } 
            // fall through
          case 123: break;
          case 12: 
            { return Tokens.LR;
            } 
            // fall through
          case 124: break;
          case 13: 
            { return Tokens.RELATION_ARROW;
            } 
            // fall through
          case 125: break;
          case 14: 
            { return Tokens.BT;
            } 
            // fall through
          case 126: break;
          case 15: 
            { return Tokens.URL;
            } 
            // fall through
          case 127: break;
          case 16: 
            { return Tokens.BOX;
            } 
            // fall through
          case 128: break;
          case 17: 
            { return Tokens.INTERPOLATED_TEXT;
            } 
            // fall through
          case 129: break;
          case 18: 
            { return Tokens.TRUE;
            } 
            // fall through
          case 130: break;
          case 19: 
            { return Tokens.TAGS;
            } 
            // fall through
          case 131: break;
          case 20: 
            { return Tokens.THIS;
            } 
            // fall through
          case 132: break;
          case 21: 
            { return Tokens.NAME;
            } 
            // fall through
          case 133: break;
          case 22: 
            { return Tokens.LOGO;
            } 
            // fall through
          case 134: break;
          case 23: 
            { return Tokens.FONT;
            } 
            // fall through
          case 135: break;
          case 24: 
            { return Tokens.FLAT;
            } 
            // fall through
          case 136: break;
          case 25: 
            { return Tokens.ICON;
            } 
            // fall through
          case 137: break;
          case 26: 
            { return Tokens.REF;
            } 
            // fall through
          case 138: break;
          case 27: 
            { return Tokens.PIPE;
            } 
            // fall through
          case 139: break;
          case 28: 
            { return Tokens.TITLE;
            } 
            // fall through
          case 140: break;
          case 29: 
            { return Tokens.THEME;
            } 
            // fall through
          case 141: break;
          case 30: 
            { return Tokens.SOLID;
            } 
            // fall through
          case 142: break;
          case 31: 
            { return Tokens.SHAPE;
            } 
            // fall through
          case 143: break;
          case 32: 
            { return Tokens.WIDTH;
            } 
            // fall through
          case 144: break;
          case 33: 
            { return Tokens.KROKI;
            } 
            // fall through
          case 145: break;
          case 34: 
            { return Tokens.COLOR;
            } 
            // fall through
          case 146: break;
          case 35: 
            { return Tokens.MODEL;
            } 
            // fall through
          case 147: break;
          case 36: 
            { return Tokens.FALSE;
            } 
            // fall through
          case 148: break;
          case 37: 
            { return Tokens.IMAGE;
            } 
            // fall through
          case 149: break;
          case 38: 
            { return Tokens.GROUP;
            } 
            // fall through
          case 150: break;
          case 39: 
            { return Tokens.DOCS;
            } 
            // fall through
          case 151: break;
          case 40: 
            { return Tokens.ADRS;
            } 
            // fall through
          case 152: break;
          case 41: 
            { return Tokens.VIEWS;
            } 
            // fall through
          case 153: break;
          case 42: 
            { return Tokens.ROBOT;
            } 
            // fall through
          case 154: break;
          case 43: 
            { return Tokens.THEMES;
            } 
            // fall through
          case 155: break;
          case 44: 
            { return Tokens.DOTTED;
            } 
            // fall through
          case 156: break;
          case 45: 
            { return Tokens.DASHED;
            } 
            // fall through
          case 157: break;
          case 46: 
            { return Tokens.STROKE;
            } 
            // fall through
          case 158: break;
          case 47: 
            { return Tokens.STYLES;
            } 
            // fall through
          case 159: break;
          case 48: 
            { return Tokens.PERSON;
            } 
            // fall through
          case 160: break;
          case 49: 
            { return Tokens.CUSTOM;
            } 
            // fall through
          case 161: break;
          case 50: 
            { return Tokens.HEIGHT;
            } 
            // fall through
          case 162: break;
          case 51: 
            { return Tokens.CIRCLE;
            } 
            // fall through
          case 163: break;
          case 52: 
            { return Tokens.CURVED;
            } 
            // fall through
          case 164: break;
          case 53: 
            { return Tokens.BORDER;
            } 
            // fall through
          case 165: break;
          case 54: 
            { return Tokens.PERSON_SHAPE;
            } 
            // fall through
          case 166: break;
          case 55: 
            { return Tokens.FOLDER;
            } 
            // fall through
          case 167: break;
          case 56: 
            { return Tokens.DIRECT;
            } 
            // fall through
          case 168: break;
          case 57: 
            { return Tokens.EXTENDS;
            } 
            // fall through
          case 169: break;
          case 58: 
            { return Tokens.EXCLUDE;
            } 
            // fall through
          case 170: break;
          case 59: 
            { return Tokens.ELEMENT;
            } 
            // fall through
          case 171: break;
          case 60: 
            { return Tokens.DEFAULT;
            } 
            // fall through
          case 172: break;
          case 61: 
            { return Tokens.DYNAMIC;
            } 
            // fall through
          case 173: break;
          case 62: 
            { return Tokens.OPACITY;
            } 
            // fall through
          case 174: break;
          case 63: 
            { return Tokens.ROUTING;
            } 
            // fall through
          case 175: break;
          case 64: 
            { return Tokens.MERMAID;
            } 
            // fall through
          case 176: break;
          case 65: 
            { return Tokens.INCLUDE;
            } 
            // fall through
          case 177: break;
          case 66: 
            { return Tokens.EXTEND;
            } 
            // fall through
          case 178: break;
          case 67: 
            { return Tokens.ELLIPSE;
            } 
            // fall through
          case 179: break;
          case 68: 
            { return Tokens.HEXAGON;
            } 
            // fall through
          case 180: break;
          case 69: 
            { return Tokens.POSITION;
            } 
            // fall through
          case 181: break;
          case 70: 
            { return Tokens.PLANTUML;
            } 
            // fall through
          case 182: break;
          case 71: 
            { return Tokens.METADATA;
            } 
            // fall through
          case 183: break;
          case 72: 
            { return Tokens.FONT_SIZE;
            } 
            // fall through
          case 184: break;
          case 73: 
            { return Tokens.FILTERED;
            } 
            // fall through
          case 185: break;
          case 74: 
            { return Tokens.BANG_INCLUDE;
            } 
            // fall through
          case 186: break;
          case 75: 
            { return Tokens.CYLINDER;
            } 
            // fall through
          case 187: break;
          case 76: 
            { return Tokens.BRANDING;
            } 
            // fall through
          case 188: break;
          case 77: 
            { return Tokens.THICKNESS;
            } 
            // fall through
          case 189: break;
          case 78: 
            { return Tokens.WORKSPACE;
            } 
            // fall through
          case 190: break;
          case 79: 
            { return Tokens.ANIMATION;
            } 
            // fall through
          case 191: break;
          case 80: 
            { return Tokens.CONTAINER;
            } 
            // fall through
          case 192: break;
          case 81: 
            { return Tokens.COMPONENT;
            } 
            // fall through
          case 193: break;
          case 82: 
            { return Tokens.INSTANCES;
            } 
            // fall through
          case 194: break;
          case 83: 
            { return Tokens.COMPONENT_SHAPE;
            } 
            // fall through
          case 195: break;
          case 84: 
            { return Tokens.TECHNOLOGY;
            } 
            // fall through
          case 196: break;
          case 85: 
            { return Tokens.DEPLOYMENT;
            } 
            // fall through
          case 197: break;
          case 86: 
            { return Tokens.PROPERTIES;
            } 
            // fall through
          case 198: break;
          case 87: 
            { return Tokens.AUTOLAYOUT;
            } 
            // fall through
          case 199: break;
          case 88: 
            { return Tokens.BACKGROUND;
            } 
            // fall through
          case 200: break;
          case 89: 
            { return Tokens.ROUNDED_BOX;
            } 
            // fall through
          case 201: break;
          case 90: 
            { return Tokens.WEB_BROWSER;
            } 
            // fall through
          case 202: break;
          case 91: 
            { return Tokens.ORTHOGONAL;
            } 
            // fall through
          case 203: break;
          case 92: 
            { return Tokens.TERMINOLOGY;
            } 
            // fall through
          case 204: break;
          case 93: 
            { return Tokens.DESCRIPTION;
            } 
            // fall through
          case 205: break;
          case 94: 
            { return Tokens.STROKE_WIDTH;
            } 
            // fall through
          case 206: break;
          case 95: 
            { return Tokens.HEALTH_CHECK;
            } 
            // fall through
          case 207: break;
          case 96: 
            { return Tokens.RELATIONSHIP;
            } 
            // fall through
          case 208: break;
          case 97: 
            { return Tokens.PERSPECTIVES;
            } 
            // fall through
          case 209: break;
          case 98: 
            { return Tokens.IDENTIFIERS;
            } 
            // fall through
          case 210: break;
          case 99: 
            { return Tokens.HIERARCHICAL;
            } 
            // fall through
          case 211: break;
          case 100: 
            { return Tokens.SYSTEM_CONTEXT;
            } 
            // fall through
          case 212: break;
          case 101: 
            { return Tokens.CONFIGURATION;
            } 
            // fall through
          case 213: break;
          case 102: 
            { return Tokens.DEPLOYMENT_NODE;
            } 
            // fall through
          case 214: break;
          case 103: 
            { return Tokens.SOFTWARE_SYSTEM;
            } 
            // fall through
          case 215: break;
          case 104: 
            { return Tokens.DEPLOYMENT_GROUP;
            } 
            // fall through
          case 216: break;
          case 105: 
            { return Tokens.SYSTEM_LANDSCAPE;
            } 
            // fall through
          case 217: break;
          case 106: 
            { return Tokens.CONTAINER_INSTANCE;
            } 
            // fall through
          case 218: break;
          case 107: 
            { return Tokens.INFRASTRUCTURE_NODE;
            } 
            // fall through
          case 219: break;
          case 108: 
            { return Tokens.MOBILE_DEVICE_PORTRAIT;
            } 
            // fall through
          case 220: break;
          case 109: 
            { return Tokens.DEPLOYMENT_ENVIRONMENT;
            } 
            // fall through
          case 221: break;
          case 110: 
            { return Tokens.IMPLIED_RELATIONSHIPS;
            } 
            // fall through
          case 222: break;
          case 111: 
            { return Tokens.MOBILE_DEVICE_LANDSCAPE;
            } 
            // fall through
          case 223: break;
          case 112: 
            { return Tokens.SOFTWARE_SYSTEM_INSTANCE;
            } 
            // fall through
          case 224: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
