/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.github.guillaumetaffin.structurizr.intellij.dsl;

import com.github.guillaumetaffin.structurizr.intellij.dsl.psi.Tokens;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;

import static com.intellij.psi.TokenType.WHITE_SPACE;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>structurizr-dsl.flex</tt>
 */
class StructurizrDslLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\1\4\1\1\1\2\22\0\1\1\1\32\1\3\7\0\1\46\2\0\1\35\17\0\1\61\1"+
    "\36\3\0\1\47\1\43\1\56\1\37\1\53\1\40\1\51\1\42\2\0\1\44\1\55\1\41\1\0\1\52"+
    "\1\0\1\50\1\25\3\0\1\54\11\0\1\20\1\45\1\21\1\11\1\5\1\24\1\30\1\33\1\27\1"+
    "\0\1\16\1\23\1\22\1\10\1\14\1\17\1\0\1\15\1\12\1\7\1\31\1\34\1\13\1\6\1\26"+
    "\1\0\1\57\1\0\1\60\7\0\1\4\32\0\1\4\337\0\1\4\177\0\13\4\35\0\2\4\5\0\1\4"+
    "\57\0\1\4\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\30\1\1\6"+
    "\7\1\1\7\1\10\1\11\1\4\6\1\1\12\11\1"+
    "\1\13\12\1\1\14\14\1\1\15\4\1\1\16\54\1"+
    "\1\17\12\1\1\20\14\1\1\21\1\1\1\22\1\23"+
    "\26\1\1\24\24\1\1\25\7\1\1\26\7\1\1\27"+
    "\2\1\1\30\13\1\1\31\4\1\1\32\1\33\1\34"+
    "\1\35\3\1\1\36\5\1\1\37\15\1\1\40\4\1"+
    "\1\41\10\1\1\42\13\1\1\43\2\1\1\44\1\45"+
    "\2\1\1\46\1\47\1\50\3\1\1\51\1\52\15\1"+
    "\1\53\2\1\1\54\4\1\1\55\3\1\1\56\14\1"+
    "\1\57\5\1\1\60\6\1\1\61\11\1\1\62\3\1"+
    "\1\63\1\1\1\64\1\1\1\65\1\66\4\1\1\67"+
    "\3\1\1\70\1\1\1\71\5\1\1\72\1\73\6\1"+
    "\1\74\1\75\1\1\1\76\14\1\1\77\10\1\1\100"+
    "\1\101\3\1\1\102\1\103\5\1\1\104\2\1\1\105"+
    "\5\1\1\106\1\107\6\1\1\110\1\1\1\111\14\1"+
    "\1\112\5\1\1\113\11\1\1\114\1\115\1\1\1\116"+
    "\1\117";

  private static int [] zzUnpackAction() {
    int [] result = new int[492];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\226\0\372\0\u012c"+
    "\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c"+
    "\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\62\0\u05aa"+
    "\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6\0\226\0\62"+
    "\0\226\0\226\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802"+
    "\0\62\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960"+
    "\0\u0992\0\u09c4\0\62\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe"+
    "\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\62\0\u0bea\0\u0c1c"+
    "\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac"+
    "\0\u0dde\0\u0e10\0\62\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\62"+
    "\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068"+
    "\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8"+
    "\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388"+
    "\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518"+
    "\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8"+
    "\0\u16da\0\u170c\0\u173e\0\u1770\0\62\0\u17a2\0\u17d4\0\u1806"+
    "\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964\0\62"+
    "\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4"+
    "\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc\0\62\0\u1bee\0\62\0\62"+
    "\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e"+
    "\0\u1db0\0\u1de2\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e"+
    "\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6\0\u2008\0\u203a\0\62\0\u206c"+
    "\0\u209e\0\u20d0\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc"+
    "\0\u222e\0\u2260\0\u2292\0\u22c4\0\u22f6\0\u2328\0\u235a\0\u238c"+
    "\0\u23be\0\u23f0\0\u2422\0\62\0\u2454\0\u2486\0\u24b8\0\u24ea"+
    "\0\u251c\0\u254e\0\u2580\0\62\0\u25b2\0\u25e4\0\u2616\0\u2648"+
    "\0\u267a\0\u26ac\0\u26de\0\62\0\u2710\0\u2742\0\62\0\u2774"+
    "\0\u27a6\0\u27d8\0\u280a\0\u283c\0\u286e\0\u28a0\0\u28d2\0\u2904"+
    "\0\u2936\0\u2968\0\62\0\u299a\0\u29cc\0\u29fe\0\u2a30\0\62"+
    "\0\62\0\62\0\62\0\u2a62\0\u2a94\0\u2ac6\0\62\0\u2af8"+
    "\0\u2b2a\0\u2b5c\0\u2b8e\0\u2bc0\0\62\0\u2bf2\0\u2c24\0\u2c56"+
    "\0\u2c88\0\u2cba\0\u2cec\0\u2d1e\0\u2d50\0\u2d82\0\u2db4\0\u2de6"+
    "\0\u2e18\0\u2e4a\0\62\0\u2e7c\0\u2eae\0\u2ee0\0\u2f12\0\62"+
    "\0\u2f44\0\u2f76\0\u2fa8\0\u2fda\0\u300c\0\u303e\0\u3070\0\u30a2"+
    "\0\62\0\u30d4\0\u3106\0\u3138\0\u316a\0\u319c\0\u31ce\0\u3200"+
    "\0\u3232\0\u3264\0\u3296\0\u32c8\0\62\0\u32fa\0\u332c\0\62"+
    "\0\62\0\u335e\0\u3390\0\62\0\62\0\62\0\u33c2\0\u33f4"+
    "\0\u3426\0\62\0\62\0\u3458\0\u348a\0\u34bc\0\u34ee\0\u3520"+
    "\0\u3552\0\u3584\0\u35b6\0\u35e8\0\u361a\0\u364c\0\u367e\0\u36b0"+
    "\0\62\0\u36e2\0\u3714\0\62\0\u3746\0\u3778\0\u37aa\0\u37dc"+
    "\0\62\0\u380e\0\u3840\0\u3872\0\62\0\u38a4\0\u38d6\0\u3908"+
    "\0\u393a\0\u396c\0\u399e\0\u39d0\0\u3a02\0\u3a34\0\u3a66\0\u3a98"+
    "\0\u3aca\0\62\0\u3afc\0\u3b2e\0\u3b60\0\u3b92\0\u3bc4\0\62"+
    "\0\u3bf6\0\u3c28\0\u3c5a\0\u3c8c\0\u3cbe\0\u3cf0\0\62\0\u3d22"+
    "\0\u3d54\0\u3d86\0\u3db8\0\u3dea\0\u3e1c\0\u3e4e\0\u3e80\0\u3eb2"+
    "\0\62\0\u3ee4\0\u3f16\0\u3f48\0\62\0\u3f7a\0\u3fac\0\u3fde"+
    "\0\62\0\62\0\u4010\0\u4042\0\u4074\0\u40a6\0\62\0\u40d8"+
    "\0\u410a\0\u413c\0\62\0\u416e\0\u41a0\0\u41d2\0\u4204\0\u4236"+
    "\0\u4268\0\u429a\0\62\0\62\0\u42cc\0\u42fe\0\u4330\0\u4362"+
    "\0\u4394\0\u43c6\0\62\0\62\0\u43f8\0\62\0\u442a\0\u445c"+
    "\0\u448e\0\u44c0\0\u44f2\0\u4524\0\u4556\0\u4588\0\u45ba\0\u45ec"+
    "\0\u461e\0\u4650\0\62\0\u4682\0\u46b4\0\u46e6\0\u4718\0\u474a"+
    "\0\u477c\0\u47ae\0\u47e0\0\62\0\62\0\u4812\0\u4844\0\u4876"+
    "\0\62\0\62\0\u48a8\0\u48da\0\u490c\0\u493e\0\u4970\0\62"+
    "\0\u49a2\0\u49d4\0\62\0\u4a06\0\u4a38\0\u4a6a\0\u4a9c\0\u4ace"+
    "\0\62\0\u4b00\0\u4b32\0\u4b64\0\u4b96\0\u4bc8\0\u4bfa\0\u4c2c"+
    "\0\62\0\u4c5e\0\62\0\u4c90\0\u4cc2\0\u4cf4\0\u4d26\0\u4d58"+
    "\0\u4d8a\0\u4dbc\0\u4dee\0\u4e20\0\u4e52\0\u4e84\0\u4eb6\0\62"+
    "\0\u4ee8\0\u4f1a\0\u4f4c\0\u4f7e\0\u4fb0\0\62\0\u4fe2\0\u5014"+
    "\0\u5046\0\u5078\0\u50aa\0\u50dc\0\u510e\0\u5140\0\u5172\0\62"+
    "\0\62\0\u51a4\0\62\0\62";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[492];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\14\1\2\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\2\2\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\2\1\34\3\2"+
    "\1\35\1\2\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\2\1\47\1\50\1\51\1\2"+
    "\4\0\52\2\1\0\1\2\2\0\1\3\142\0\2\5"+
    "\1\0\1\52\56\5\1\2\4\0\1\2\1\53\14\2"+
    "\1\54\33\2\1\0\1\2\1\0\1\2\4\0\1\55"+
    "\12\2\1\56\6\2\1\57\3\2\1\60\11\2\1\61"+
    "\11\2\1\0\1\2\1\0\1\2\4\0\13\2\1\62"+
    "\36\2\1\0\1\2\1\0\1\2\4\0\1\63\20\2"+
    "\1\64\30\2\1\0\1\2\1\0\1\2\4\0\2\2"+
    "\1\65\4\2\1\66\11\2\1\67\4\2\1\70\23\2"+
    "\1\0\1\2\1\0\1\2\4\0\7\2\1\71\42\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\72\15\2\1\73"+
    "\33\2\1\0\1\2\1\0\1\2\4\0\10\2\1\74"+
    "\41\2\1\0\1\2\1\0\1\2\4\0\1\75\7\2"+
    "\1\76\5\2\1\77\33\2\1\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\100\20\2\1\101\25\2\1\0\1\2"+
    "\1\0\1\2\4\0\7\2\1\102\14\2\1\103\25\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\104\6\2\1\105"+
    "\42\2\1\0\1\2\1\0\1\2\4\0\10\2\1\106"+
    "\41\2\1\0\1\2\1\0\1\2\4\0\16\2\1\107"+
    "\3\2\1\110\27\2\1\0\1\2\1\0\1\2\4\0"+
    "\3\2\1\111\11\2\1\112\34\2\1\0\1\2\1\0"+
    "\1\2\4\0\10\2\1\113\41\2\1\0\1\2\1\0"+
    "\1\2\4\0\10\2\1\114\41\2\1\0\1\2\1\0"+
    "\1\2\4\0\4\2\1\115\6\2\1\116\6\2\1\117"+
    "\27\2\1\0\1\2\1\0\1\2\4\0\1\120\21\2"+
    "\1\121\27\2\1\0\1\2\1\0\1\2\4\0\22\2"+
    "\1\122\27\2\1\0\1\2\1\0\1\2\4\0\31\2"+
    "\1\123\20\2\1\0\1\2\1\0\1\2\4\0\16\2"+
    "\1\124\33\2\1\0\1\2\1\0\1\2\4\0\7\2"+
    "\1\125\11\2\1\126\1\127\27\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\130\47\2\1\0\1\2\1\0"+
    "\1\2\4\0\7\2\1\131\42\2\1\0\1\2\1\0"+
    "\1\2\4\0\7\2\1\132\42\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\133\51\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\134\21\2\1\135\27\2\1\0\1\2\1\0"+
    "\1\2\4\0\7\2\1\136\42\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\137\51\2\1\0\1\2\1\0\1\2"+
    "\4\0\7\2\1\140\42\2\1\0\1\2\1\0\1\2"+
    "\4\0\2\2\1\141\11\2\1\142\35\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\143\51\2\1\0\1\2\1\0"+
    "\1\2\4\0\14\2\1\144\35\2\1\0\1\2\1\0"+
    "\1\2\4\0\23\2\1\145\26\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\146\47\2\1\0\1\2\1\0"+
    "\1\2\4\0\22\2\1\147\27\2\1\0\1\2\1\0"+
    "\1\2\4\0\15\2\1\150\34\2\1\0\1\2\1\0"+
    "\1\2\4\0\5\2\1\151\4\2\1\152\4\2\1\153"+
    "\32\2\1\0\1\2\1\0\1\2\4\0\3\2\1\154"+
    "\46\2\1\0\1\2\1\0\1\2\4\0\21\2\1\155"+
    "\30\2\1\0\1\2\1\0\1\2\4\0\17\2\1\156"+
    "\32\2\1\0\1\2\1\0\1\2\4\0\5\2\1\157"+
    "\44\2\1\0\1\2\1\0\1\2\4\0\13\2\1\160"+
    "\36\2\1\0\1\2\1\0\1\2\4\0\10\2\1\161"+
    "\41\2\1\0\1\2\1\0\1\2\4\0\16\2\1\162"+
    "\33\2\1\0\1\2\1\0\1\2\4\0\7\2\1\163"+
    "\42\2\1\0\1\2\1\0\1\2\4\0\10\2\1\164"+
    "\41\2\1\0\1\2\1\0\1\2\4\0\7\2\1\165"+
    "\42\2\1\0\1\2\1\0\1\2\4\0\13\2\1\166"+
    "\36\2\1\0\1\2\1\0\1\2\4\0\22\2\1\167"+
    "\27\2\1\0\1\2\1\0\1\2\4\0\2\2\1\170"+
    "\47\2\1\0\1\2\1\0\1\2\4\0\3\2\1\171"+
    "\11\2\1\172\34\2\1\0\1\2\1\0\1\2\4\0"+
    "\5\2\1\173\44\2\1\0\1\2\1\0\1\2\4\0"+
    "\10\2\1\174\41\2\1\0\1\2\1\0\1\2\4\0"+
    "\4\2\1\175\45\2\1\0\1\2\1\0\1\2\4\0"+
    "\13\2\1\176\36\2\1\0\1\2\1\0\1\2\4\0"+
    "\16\2\1\177\33\2\1\0\1\2\1\0\1\2\4\0"+
    "\5\2\1\200\6\2\1\201\2\2\1\202\32\2\1\0"+
    "\1\2\1\0\1\2\4\0\13\2\1\203\36\2\1\0"+
    "\1\2\1\0\1\2\4\0\7\2\1\204\42\2\1\0"+
    "\1\2\1\0\1\2\4\0\16\2\1\205\33\2\1\0"+
    "\1\2\1\0\1\2\4\0\7\2\1\206\42\2\1\0"+
    "\1\2\1\0\1\2\4\0\4\2\1\207\45\2\1\0"+
    "\1\2\1\0\1\2\4\0\4\2\1\210\45\2\1\0"+
    "\1\2\1\0\1\2\4\0\13\2\1\211\36\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\212\51\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\213\51\2\1\0\1\2\1\0"+
    "\1\2\4\0\16\2\1\214\33\2\1\0\1\2\1\0"+
    "\1\2\4\0\15\2\1\215\34\2\1\0\1\2\1\0"+
    "\1\2\4\0\16\2\1\216\33\2\1\0\1\2\1\0"+
    "\1\2\4\0\10\2\1\217\41\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\2\1\220\50\2\1\0\1\2\1\0"+
    "\1\2\4\0\24\2\1\221\13\2\1\222\11\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\2\1\223\50\2\1\0"+
    "\1\2\1\0\1\2\4\0\10\2\1\224\41\2\1\0"+
    "\1\2\1\0\1\2\4\0\12\2\1\225\37\2\1\0"+
    "\1\2\1\0\1\2\4\0\16\2\1\226\33\2\1\0"+
    "\1\2\1\0\1\2\4\0\40\2\1\227\11\2\1\0"+
    "\1\2\1\0\1\2\4\0\40\2\1\230\11\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\231\51\2\1\0\1\2"+
    "\1\0\1\2\4\0\16\2\1\232\33\2\1\0\1\2"+
    "\1\0\1\2\4\0\15\2\1\233\34\2\1\0\1\2"+
    "\1\0\1\2\4\0\26\2\1\234\23\2\1\0\1\2"+
    "\1\0\1\2\4\0\5\2\1\235\44\2\1\0\1\2"+
    "\1\0\1\2\4\0\16\2\1\236\33\2\1\0\1\2"+
    "\1\0\1\2\4\0\5\2\1\237\44\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\240\51\2\1\0\1\2\1\0"+
    "\1\2\4\0\14\2\1\241\35\2\1\0\1\2\1\0"+
    "\1\2\4\0\16\2\1\242\33\2\1\0\1\2\1\0"+
    "\1\2\4\0\13\2\1\243\36\2\1\0\1\2\1\0"+
    "\1\2\4\0\13\2\1\244\36\2\1\0\1\2\1\0"+
    "\1\2\4\0\16\2\1\245\33\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\246\47\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\247\47\2\1\0\1\2\1\0"+
    "\1\2\4\0\12\2\1\250\37\2\1\0\1\2\1\0"+
    "\1\2\4\0\11\2\1\251\40\2\1\0\1\2\1\0"+
    "\1\2\4\0\13\2\1\252\36\2\1\0\1\2\1\0"+
    "\1\2\4\0\11\2\1\253\40\2\1\0\1\2\1\0"+
    "\1\2\4\0\5\2\1\254\44\2\1\0\1\2\1\0"+
    "\1\2\4\0\12\2\1\255\37\2\1\0\1\2\1\0"+
    "\1\2\4\0\3\2\1\256\46\2\1\0\1\2\1\0"+
    "\1\2\4\0\15\2\1\257\34\2\1\0\1\2\1\0"+
    "\1\2\4\0\7\2\1\260\42\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\261\14\2\1\262\32\2\1\0"+
    "\1\2\1\0\1\2\4\0\12\2\1\263\37\2\1\0"+
    "\1\2\1\0\1\2\4\0\2\2\1\264\47\2\1\0"+
    "\1\2\1\0\1\2\4\0\15\2\1\265\34\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\266\51\2\1\0\1\2"+
    "\1\0\1\2\4\0\2\2\1\267\47\2\1\0\1\2"+
    "\1\0\1\2\4\0\2\2\1\270\47\2\1\0\1\2"+
    "\1\0\1\2\4\0\2\2\1\271\47\2\1\0\1\2"+
    "\1\0\1\2\4\0\16\2\1\272\33\2\1\0\1\2"+
    "\1\0\1\2\4\0\10\2\1\273\41\2\1\0\1\2"+
    "\1\0\1\2\4\0\23\2\1\274\26\2\1\0\1\2"+
    "\1\0\1\2\4\0\24\2\1\275\25\2\1\0\1\2"+
    "\1\0\1\2\4\0\14\2\1\276\35\2\1\0\1\2"+
    "\1\0\1\2\4\0\10\2\1\277\41\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\300\51\2\1\0\1\2\1\0"+
    "\1\2\4\0\16\2\1\301\33\2\1\0\1\2\1\0"+
    "\1\2\4\0\10\2\1\302\41\2\1\0\1\2\1\0"+
    "\1\2\4\0\6\2\1\303\43\2\1\0\1\2\1\0"+
    "\1\2\4\0\22\2\1\304\27\2\1\0\1\2\1\0"+
    "\1\2\4\0\12\2\1\305\37\2\1\0\1\2\1\0"+
    "\1\2\4\0\22\2\1\306\27\2\1\0\1\2\1\0"+
    "\1\2\4\0\14\2\1\307\35\2\1\0\1\2\1\0"+
    "\1\2\4\0\3\2\1\310\46\2\1\0\1\2\1\0"+
    "\1\2\4\0\7\2\1\311\42\2\1\0\1\2\1\0"+
    "\1\2\4\0\13\2\1\312\36\2\1\0\1\2\1\0"+
    "\1\2\4\0\5\2\1\313\44\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\314\51\2\1\0\1\2\1\0\1\2"+
    "\4\0\4\2\1\315\45\2\1\0\1\2\1\0\1\2"+
    "\4\0\42\2\1\316\7\2\1\0\1\2\1\0\1\2"+
    "\4\0\22\2\1\317\27\2\1\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\320\46\2\1\0\1\2\1\0\1\2"+
    "\4\0\24\2\1\321\25\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\322\51\2\1\0\1\2\1\0\1\2\4\0"+
    "\3\2\1\323\46\2\1\0\1\2\1\0\1\2\4\0"+
    "\1\324\51\2\1\0\1\2\1\0\1\2\4\0\10\2"+
    "\1\325\41\2\1\0\1\2\1\0\1\2\4\0\7\2"+
    "\1\326\42\2\1\0\1\2\1\0\1\2\4\0\24\2"+
    "\1\327\25\2\1\0\1\2\1\0\1\2\4\0\15\2"+
    "\1\330\34\2\1\0\1\2\1\0\1\2\4\0\1\331"+
    "\51\2\1\0\1\2\1\0\1\2\4\0\6\2\1\332"+
    "\43\2\1\0\1\2\1\0\1\2\4\0\1\333\51\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\334\51\2\1\0"+
    "\1\2\1\0\1\2\4\0\5\2\1\335\44\2\1\0"+
    "\1\2\1\0\1\2\4\0\2\2\1\336\47\2\1\0"+
    "\1\2\1\0\1\2\4\0\22\2\1\337\27\2\1\0"+
    "\1\2\1\0\1\2\4\0\7\2\1\340\2\2\1\341"+
    "\37\2\1\0\1\2\1\0\1\2\4\0\1\342\51\2"+
    "\1\0\1\2\1\0\1\2\4\0\2\2\1\343\47\2"+
    "\1\0\1\2\1\0\1\2\4\0\13\2\1\344\36\2"+
    "\1\0\1\2\1\0\1\2\4\0\16\2\1\345\33\2"+
    "\1\0\1\2\1\0\1\2\4\0\13\2\1\346\36\2"+
    "\1\0\1\2\1\0\1\2\4\0\22\2\1\347\27\2"+
    "\1\0\1\2\1\0\1\2\4\0\7\2\1\350\42\2"+
    "\1\0\1\2\1\0\1\2\4\0\7\2\1\351\42\2"+
    "\1\0\1\2\1\0\1\2\4\0\13\2\1\352\36\2"+
    "\1\0\1\2\1\0\1\2\4\0\16\2\1\353\33\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\354\51\2\1\0"+
    "\1\2\1\0\1\2\4\0\13\2\1\355\36\2\1\0"+
    "\1\2\1\0\1\2\4\0\24\2\1\356\25\2\1\0"+
    "\1\2\1\0\1\2\4\0\13\2\1\357\36\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\360\51\2\1\0\1\2"+
    "\1\0\1\2\4\0\12\2\1\361\37\2\1\0\1\2"+
    "\1\0\1\2\4\0\5\2\1\362\44\2\1\0\1\2"+
    "\1\0\1\2\4\0\5\2\1\363\44\2\1\0\1\2"+
    "\1\0\1\2\4\0\3\2\1\364\46\2\1\0\1\2"+
    "\1\0\1\2\4\0\2\2\1\365\47\2\1\0\1\2"+
    "\1\0\1\2\4\0\13\2\1\366\36\2\1\0\1\2"+
    "\1\0\1\2\4\0\5\2\1\367\44\2\1\0\1\2"+
    "\1\0\1\2\4\0\12\2\1\370\37\2\1\0\1\2"+
    "\1\0\1\2\4\0\7\2\1\371\42\2\1\0\1\2"+
    "\1\0\1\2\4\0\3\2\1\372\46\2\1\0\1\2"+
    "\1\0\1\2\4\0\16\2\1\373\33\2\1\0\1\2"+
    "\1\0\1\2\4\0\4\2\1\374\45\2\1\0\1\2"+
    "\1\0\1\2\4\0\2\2\1\375\47\2\1\0\1\2"+
    "\1\0\1\2\4\0\23\2\1\376\26\2\1\0\1\2"+
    "\1\0\1\2\4\0\7\2\1\377\42\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\u0100\51\2\1\0\1\2\1\0"+
    "\1\2\4\0\10\2\1\u0101\41\2\1\0\1\2\1\0"+
    "\1\2\4\0\16\2\1\u0102\33\2\1\0\1\2\1\0"+
    "\1\2\4\0\4\2\1\u0103\45\2\1\0\1\2\1\0"+
    "\1\2\4\0\4\2\1\u0104\45\2\1\0\1\2\1\0"+
    "\1\2\4\0\3\2\1\u0105\46\2\1\0\1\2\1\0"+
    "\1\2\4\0\7\2\1\u0106\42\2\1\0\1\2\1\0"+
    "\1\2\4\0\22\2\1\u0107\27\2\1\0\1\2\1\0"+
    "\1\2\4\0\21\2\1\u0108\30\2\1\0\1\2\1\0"+
    "\1\2\4\0\16\2\1\u0109\33\2\1\0\1\2\1\0"+
    "\1\2\4\0\22\2\1\u010a\27\2\1\0\1\2\1\0"+
    "\1\2\4\0\5\2\1\u010b\44\2\1\0\1\2\1\0"+
    "\1\2\4\0\13\2\1\u010c\36\2\1\0\1\2\1\0"+
    "\1\2\4\0\15\2\1\u010d\34\2\1\0\1\2\1\0"+
    "\1\2\4\0\12\2\1\u010e\37\2\1\0\1\2\1\0"+
    "\1\2\4\0\22\2\1\u010f\27\2\1\0\1\2\1\0"+
    "\1\2\4\0\3\2\1\u0110\46\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\u0111\51\2\1\0\1\2\1\0\1\2"+
    "\4\0\10\2\1\u0112\41\2\1\0\1\2\1\0\1\2"+
    "\4\0\24\2\1\u0113\25\2\1\0\1\2\1\0\1\2"+
    "\4\0\2\2\1\u0114\47\2\1\0\1\2\1\0\1\2"+
    "\4\0\13\2\1\u0115\36\2\1\0\1\2\1\0\1\2"+
    "\4\0\22\2\1\u0116\27\2\1\0\1\2\1\0\1\2"+
    "\4\0\23\2\1\u0117\26\2\1\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\u0118\46\2\1\0\1\2\1\0\1\2"+
    "\4\0\15\2\1\u0119\34\2\1\0\1\2\1\0\1\2"+
    "\4\0\22\2\1\u011a\27\2\1\0\1\2\1\0\1\2"+
    "\4\0\10\2\1\u011b\41\2\1\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\u011c\46\2\1\0\1\2\1\0\1\2"+
    "\4\0\4\2\1\u011d\45\2\1\0\1\2\1\0\1\2"+
    "\4\0\5\2\1\u011e\44\2\1\0\1\2\1\0\1\2"+
    "\4\0\2\2\1\u011f\47\2\1\0\1\2\1\0\1\2"+
    "\4\0\26\2\1\u0120\23\2\1\0\1\2\1\0\1\2"+
    "\4\0\10\2\1\u0121\41\2\1\0\1\2\1\0\1\2"+
    "\4\0\5\2\1\u0122\44\2\1\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\u0123\46\2\1\0\1\2\1\0\1\2"+
    "\4\0\4\2\1\u0124\45\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\u0125\51\2\1\0\1\2\1\0\1\2\4\0"+
    "\1\u0126\51\2\1\0\1\2\1\0\1\2\4\0\7\2"+
    "\1\u0127\42\2\1\0\1\2\1\0\1\2\4\0\3\2"+
    "\1\u0128\46\2\1\0\1\2\1\0\1\2\4\0\10\2"+
    "\1\u0129\41\2\1\0\1\2\1\0\1\2\4\0\7\2"+
    "\1\u012a\42\2\1\0\1\2\1\0\1\2\4\0\1\u012b"+
    "\51\2\1\0\1\2\1\0\1\2\4\0\5\2\1\u012c"+
    "\44\2\1\0\1\2\1\0\1\2\4\0\1\u012d\51\2"+
    "\1\0\1\2\1\0\1\2\4\0\2\2\1\u012e\47\2"+
    "\1\0\1\2\1\0\1\2\4\0\16\2\1\u012f\33\2"+
    "\1\0\1\2\1\0\1\2\4\0\12\2\1\u0130\37\2"+
    "\1\0\1\2\1\0\1\2\4\0\15\2\1\u0131\34\2"+
    "\1\0\1\2\1\0\1\2\4\0\2\2\1\u0132\47\2"+
    "\1\0\1\2\1\0\1\2\4\0\14\2\1\u0133\35\2"+
    "\1\0\1\2\1\0\1\2\4\0\10\2\1\u0134\41\2"+
    "\1\0\1\2\1\0\1\2\4\0\36\2\1\u0135\1\u0136"+
    "\12\2\1\0\1\2\1\0\1\2\4\0\13\2\1\u0137"+
    "\36\2\1\0\1\2\1\0\1\2\4\0\7\2\1\u0138"+
    "\42\2\1\0\1\2\1\0\1\2\4\0\14\2\1\u0139"+
    "\35\2\1\0\1\2\1\0\1\2\4\0\2\2\1\u013a"+
    "\47\2\1\0\1\2\1\0\1\2\4\0\15\2\1\u013b"+
    "\34\2\1\0\1\2\1\0\1\2\4\0\22\2\1\u013c"+
    "\27\2\1\0\1\2\1\0\1\2\4\0\21\2\1\u013d"+
    "\30\2\1\0\1\2\1\0\1\2\4\0\3\2\1\u013e"+
    "\46\2\1\0\1\2\1\0\1\2\4\0\24\2\1\u013f"+
    "\25\2\1\0\1\2\1\0\1\2\4\0\1\u0140\51\2"+
    "\1\0\1\2\1\0\1\2\4\0\4\2\1\u0141\45\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\u0142\51\2\1\0"+
    "\1\2\1\0\1\2\4\0\14\2\1\u0143\35\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\u0144\51\2\1\0\1\2"+
    "\1\0\1\2\4\0\2\2\1\u0145\47\2\1\0\1\2"+
    "\1\0\1\2\4\0\22\2\1\u0146\27\2\1\0\1\2"+
    "\1\0\1\2\4\0\36\2\1\u0147\13\2\1\0\1\2"+
    "\1\0\1\2\4\0\14\2\1\u0148\35\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\u0149\51\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\u014a\51\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\u014b\51\2\1\0\1\2\1\0\1\2\4\0"+
    "\4\2\1\u014c\45\2\1\0\1\2\1\0\1\2\4\0"+
    "\3\2\1\u014d\46\2\1\0\1\2\1\0\1\2\4\0"+
    "\6\2\1\u014e\43\2\1\0\1\2\1\0\1\2\4\0"+
    "\51\2\1\u014f\1\0\1\2\1\0\1\2\4\0\7\2"+
    "\1\u0150\42\2\1\0\1\2\1\0\1\2\4\0\2\2"+
    "\1\u0151\47\2\1\0\1\2\1\0\1\2\4\0\1\u0152"+
    "\51\2\1\0\1\2\1\0\1\2\4\0\1\u0153\51\2"+
    "\1\0\1\2\1\0\1\2\4\0\7\2\1\u0154\42\2"+
    "\1\0\1\2\1\0\1\2\4\0\13\2\1\u0155\36\2"+
    "\1\0\1\2\1\0\1\2\4\0\14\2\1\u0156\35\2"+
    "\1\0\1\2\1\0\1\2\4\0\3\2\1\u0157\46\2"+
    "\1\0\1\2\1\0\1\2\4\0\2\2\1\u0158\47\2"+
    "\1\0\1\2\1\0\1\2\4\0\22\2\1\u0159\27\2"+
    "\1\0\1\2\1\0\1\2\4\0\16\2\1\u015a\33\2"+
    "\1\0\1\2\1\0\1\2\4\0\7\2\1\u015b\42\2"+
    "\1\0\1\2\1\0\1\2\4\0\7\2\1\u015c\42\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\u015d\51\2\1\0"+
    "\1\2\1\0\1\2\4\0\10\2\1\u015e\41\2\1\0"+
    "\1\2\1\0\1\2\4\0\3\2\1\u015f\46\2\1\0"+
    "\1\2\1\0\1\2\4\0\4\2\1\u0160\45\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\u0161\51\2\1\0\1\2"+
    "\1\0\1\2\4\0\10\2\1\u0162\41\2\1\0\1\2"+
    "\1\0\1\2\4\0\17\2\1\u0163\32\2\1\0\1\2"+
    "\1\0\1\2\4\0\26\2\1\u0164\23\2\1\0\1\2"+
    "\1\0\1\2\4\0\26\2\1\u0165\23\2\1\0\1\2"+
    "\1\0\1\2\4\0\3\2\1\u0166\46\2\1\0\1\2"+
    "\1\0\1\2\4\0\10\2\1\u0167\41\2\1\0\1\2"+
    "\1\0\1\2\4\0\42\2\1\u0168\7\2\1\0\1\2"+
    "\1\0\1\2\4\0\5\2\1\u0169\44\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\u016a\51\2\1\0\1\2\1\0"+
    "\1\2\4\0\23\2\1\u016b\26\2\1\0\1\2\1\0"+
    "\1\2\4\0\22\2\1\u016c\27\2\1\0\1\2\1\0"+
    "\1\2\4\0\3\2\1\u016d\46\2\1\0\1\2\1\0"+
    "\1\2\4\0\20\2\1\u016e\31\2\1\0\1\2\1\0"+
    "\1\2\4\0\3\2\1\u016f\46\2\1\0\1\2\1\0"+
    "\1\2\4\0\3\2\1\u0170\46\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\u0171\51\2\1\0\1\2\1\0\1\2"+
    "\4\0\5\2\1\u0172\44\2\1\0\1\2\1\0\1\2"+
    "\4\0\22\2\1\u0173\27\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\u0174\51\2\1\0\1\2\1\0\1\2\4\0"+
    "\3\2\1\u0175\46\2\1\0\1\2\1\0\1\2\4\0"+
    "\24\2\1\u0176\25\2\1\0\1\2\1\0\1\2\4\0"+
    "\10\2\1\u0177\41\2\1\0\1\2\1\0\1\2\4\0"+
    "\13\2\1\u0178\36\2\1\0\1\2\1\0\1\2\4\0"+
    "\2\2\1\u0179\47\2\1\0\1\2\1\0\1\2\4\0"+
    "\5\2\1\u017a\44\2\1\0\1\2\1\0\1\2\4\0"+
    "\24\2\1\u017b\25\2\1\0\1\2\1\0\1\2\4\0"+
    "\22\2\1\u017c\27\2\1\0\1\2\1\0\1\2\4\0"+
    "\1\u017d\51\2\1\0\1\2\1\0\1\2\4\0\22\2"+
    "\1\u017e\27\2\1\0\1\2\1\0\1\2\4\0\2\2"+
    "\1\u017f\47\2\1\0\1\2\1\0\1\2\4\0\7\2"+
    "\1\u0180\42\2\1\0\1\2\1\0\1\2\4\0\1\u0181"+
    "\51\2\1\0\1\2\1\0\1\2\4\0\27\2\1\u0182"+
    "\22\2\1\0\1\2\1\0\1\2\4\0\21\2\1\u0183"+
    "\30\2\1\0\1\2\1\0\1\2\4\0\7\2\1\u0184"+
    "\42\2\1\0\1\2\1\0\1\2\4\0\2\2\1\u0185"+
    "\47\2\1\0\1\2\1\0\1\2\4\0\21\2\1\u0186"+
    "\30\2\1\0\1\2\1\0\1\2\4\0\2\2\1\u0187"+
    "\47\2\1\0\1\2\1\0\1\2\4\0\4\2\1\u0188"+
    "\45\2\1\0\1\2\1\0\1\2\4\0\26\2\1\u0189"+
    "\23\2\1\0\1\2\1\0\1\2\4\0\27\2\1\u018a"+
    "\22\2\1\0\1\2\1\0\1\2\4\0\5\2\1\u018b"+
    "\44\2\1\0\1\2\1\0\1\2\4\0\2\2\1\u018c"+
    "\47\2\1\0\1\2\1\0\1\2\4\0\35\2\1\u018d"+
    "\14\2\1\0\1\2\1\0\1\2\4\0\2\2\1\u018e"+
    "\47\2\1\0\1\2\1\0\1\2\4\0\14\2\1\u018f"+
    "\35\2\1\0\1\2\1\0\1\2\4\0\1\u0190\51\2"+
    "\1\0\1\2\1\0\1\2\4\0\14\2\1\u0191\35\2"+
    "\1\0\1\2\1\0\1\2\4\0\14\2\1\u0192\35\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\2\1\u0193\50\2"+
    "\1\0\1\2\1\0\1\2\4\0\10\2\1\u0194\41\2"+
    "\1\0\1\2\1\0\1\2\4\0\22\2\1\u0195\27\2"+
    "\1\0\1\2\1\0\1\2\4\0\3\2\1\u0196\46\2"+
    "\1\0\1\2\1\0\1\2\4\0\32\2\1\u0197\1\u0198"+
    "\1\u0199\15\2\1\0\1\2\1\0\1\2\4\0\5\2"+
    "\1\u019a\44\2\1\0\1\2\1\0\1\2\4\0\1\u019b"+
    "\51\2\1\0\1\2\1\0\1\2\4\0\5\2\1\u019c"+
    "\44\2\1\0\1\2\1\0\1\2\4\0\22\2\1\u019d"+
    "\27\2\1\0\1\2\1\0\1\2\4\0\1\u019e\51\2"+
    "\1\0\1\2\1\0\1\2\4\0\3\2\1\u019f\46\2"+
    "\1\0\1\2\1\0\1\2\4\0\22\2\1\u01a0\27\2"+
    "\1\0\1\2\1\0\1\2\4\0\2\2\1\u01a1\47\2"+
    "\1\0\1\2\1\0\1\2\4\0\10\2\1\u01a2\41\2"+
    "\1\0\1\2\1\0\1\2\4\0\11\2\1\u01a3\40\2"+
    "\1\0\1\2\1\0\1\2\4\0\13\2\1\u01a4\36\2"+
    "\1\0\1\2\1\0\1\2\4\0\14\2\1\u01a5\35\2"+
    "\1\0\1\2\1\0\1\2\4\0\3\2\1\u01a6\46\2"+
    "\1\0\1\2\1\0\1\2\4\0\10\2\1\u01a7\41\2"+
    "\1\0\1\2\1\0\1\2\4\0\7\2\1\u01a8\42\2"+
    "\1\0\1\2\1\0\1\2\4\0\2\2\1\u01a9\47\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\2\1\u01aa\50\2"+
    "\1\0\1\2\1\0\1\2\4\0\14\2\1\u01ab\35\2"+
    "\1\0\1\2\1\0\1\2\4\0\12\2\1\u01ac\37\2"+
    "\1\0\1\2\1\0\1\2\4\0\5\2\1\u01ad\44\2"+
    "\1\0\1\2\1\0\1\2\4\0\5\2\1\u01ae\44\2"+
    "\1\0\1\2\1\0\1\2\4\0\7\2\1\u01af\42\2"+
    "\1\0\1\2\1\0\1\2\4\0\24\2\1\u01b0\25\2"+
    "\1\0\1\2\1\0\1\2\4\0\5\2\1\u01b1\44\2"+
    "\1\0\1\2\1\0\1\2\4\0\16\2\1\u01b2\33\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\u01b3\51\2\1\0"+
    "\1\2\1\0\1\2\4\0\27\2\1\u01b4\22\2\1\0"+
    "\1\2\1\0\1\2\4\0\7\2\1\u01b5\42\2\1\0"+
    "\1\2\1\0\1\2\4\0\4\2\1\u01b6\45\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\u01b7\51\2\1\0\1\2"+
    "\1\0\1\2\4\0\2\2\1\u01b8\47\2\1\0\1\2"+
    "\1\0\1\2\4\0\13\2\1\u01b9\36\2\1\0\1\2"+
    "\1\0\1\2\4\0\2\2\1\u01ba\47\2\1\0\1\2"+
    "\1\0\1\2\4\0\3\2\1\u01bb\46\2\1\0\1\2"+
    "\1\0\1\2\4\0\10\2\1\u01bc\41\2\1\0\1\2"+
    "\1\0\1\2\4\0\37\2\1\u01bd\5\2\1\u01be\4\2"+
    "\1\0\1\2\1\0\1\2\4\0\22\2\1\u01bf\27\2"+
    "\1\0\1\2\1\0\1\2\4\0\24\2\1\u01c0\25\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\u01c1\51\2\1\0"+
    "\1\2\1\0\1\2\4\0\15\2\1\u01c2\34\2\1\0"+
    "\1\2\1\0\1\2\4\0\12\2\1\u01c3\37\2\1\0"+
    "\1\2\1\0\1\2\4\0\13\2\1\u01c4\36\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\u01c5\51\2\1\0\1\2"+
    "\1\0\1\2\4\0\13\2\1\u01c6\36\2\1\0\1\2"+
    "\1\0\1\2\4\0\7\2\1\u01c7\42\2\1\0\1\2"+
    "\1\0\1\2\4\0\10\2\1\u01c8\41\2\1\0\1\2"+
    "\1\0\1\2\4\0\12\2\1\u01c9\37\2\1\0\1\2"+
    "\1\0\1\2\4\0\35\2\1\u01ca\14\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\u01cb\51\2\1\0\1\2\1\0"+
    "\1\2\4\0\3\2\1\u01cc\46\2\1\0\1\2\1\0"+
    "\1\2\4\0\34\2\1\u01cd\15\2\1\0\1\2\1\0"+
    "\1\2\4\0\3\2\1\u01ce\46\2\1\0\1\2\1\0"+
    "\1\2\4\0\10\2\1\u01cf\41\2\1\0\1\2\1\0"+
    "\1\2\4\0\7\2\1\u01d0\42\2\1\0\1\2\1\0"+
    "\1\2\4\0\3\2\1\u01d1\46\2\1\0\1\2\1\0"+
    "\1\2\4\0\14\2\1\u01d2\35\2\1\0\1\2\1\0"+
    "\1\2\4\0\7\2\1\u01d3\42\2\1\0\1\2\1\0"+
    "\1\2\4\0\4\2\1\u01d4\45\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\u01d5\47\2\1\0\1\2\1\0"+
    "\1\2\4\0\3\2\1\u01d6\46\2\1\0\1\2\1\0"+
    "\1\2\4\0\5\2\1\u01d7\44\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\u01d8\51\2\1\0\1\2\1\0\1\2"+
    "\4\0\4\2\1\u01d9\45\2\1\0\1\2\1\0\1\2"+
    "\4\0\5\2\1\u01da\44\2\1\0\1\2\1\0\1\2"+
    "\4\0\10\2\1\u01db\41\2\1\0\1\2\1\0\1\2"+
    "\4\0\15\2\1\u01dc\34\2\1\0\1\2\1\0\1\2"+
    "\4\0\2\2\1\u01dd\47\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\u01de\51\2\1\0\1\2\1\0\1\2\4\0"+
    "\14\2\1\u01df\35\2\1\0\1\2\1\0\1\2\4\0"+
    "\13\2\1\u01e0\36\2\1\0\1\2\1\0\1\2\4\0"+
    "\1\u01e1\51\2\1\0\1\2\1\0\1\2\4\0\13\2"+
    "\1\u01e2\36\2\1\0\1\2\1\0\1\2\4\0\13\2"+
    "\1\u01e3\36\2\1\0\1\2\1\0\1\2\4\0\22\2"+
    "\1\u01e4\27\2\1\0\1\2\1\0\1\2\4\0\3\2"+
    "\1\u01e5\46\2\1\0\1\2\1\0\1\2\4\0\3\2"+
    "\1\u01e6\46\2\1\0\1\2\1\0\1\2\4\0\12\2"+
    "\1\u01e7\37\2\1\0\1\2\1\0\1\2\4\0\2\2"+
    "\1\u01e8\47\2\1\0\1\2\1\0\1\2\4\0\2\2"+
    "\1\u01e9\47\2\1\0\1\2\1\0\1\2\4\0\14\2"+
    "\1\u01ea\35\2\1\0\1\2\1\0\1\2\4\0\1\u01eb"+
    "\51\2\1\0\1\2\1\0\1\2\4\0\1\u01ec\51\2"+
    "\1\0\1\2\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20950];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\11\1\1\1\11\40\1\1\11\1\1"+
    "\2\11\u01c2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[492];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  StructurizrDslLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return Tokens.UNQUOTED_TEXT;
            } 
            // fall through
          case 80: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 81: break;
          case 3: 
            { return Tokens.LINE_BREAK;
            } 
            // fall through
          case 82: break;
          case 4: 
            { return Tokens.QUOTED_TEXT;
            } 
            // fall through
          case 83: break;
          case 5: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 84: break;
          case 6: 
            { return Tokens.STAR;
            } 
            // fall through
          case 85: break;
          case 7: 
            { return Tokens.OPEN_PARENS;
            } 
            // fall through
          case 86: break;
          case 8: 
            { return Tokens.CLOSE_PARENS;
            } 
            // fall through
          case 87: break;
          case 9: 
            { return Tokens.EQ;
            } 
            // fall through
          case 88: break;
          case 10: 
            { return Tokens.TB;
            } 
            // fall through
          case 89: break;
          case 11: 
            { return Tokens.RL;
            } 
            // fall through
          case 90: break;
          case 12: 
            { return Tokens.LR;
            } 
            // fall through
          case 91: break;
          case 13: 
            { return Tokens.RELATION_ARROW;
            } 
            // fall through
          case 92: break;
          case 14: 
            { return Tokens.BT;
            } 
            // fall through
          case 93: break;
          case 15: 
            { return Tokens.URL;
            } 
            // fall through
          case 94: break;
          case 16: 
            { return Tokens.BOX;
            } 
            // fall through
          case 95: break;
          case 17: 
            { return Tokens.TAGS;
            } 
            // fall through
          case 96: break;
          case 18: 
            { return Tokens.THIS;
            } 
            // fall through
          case 97: break;
          case 19: 
            { return Tokens.NAME;
            } 
            // fall through
          case 98: break;
          case 20: 
            { return Tokens.FLAT;
            } 
            // fall through
          case 99: break;
          case 21: 
            { return Tokens.PIPE;
            } 
            // fall through
          case 100: break;
          case 22: 
            { return Tokens.TITLE;
            } 
            // fall through
          case 101: break;
          case 23: 
            { return Tokens.SHAPE;
            } 
            // fall through
          case 102: break;
          case 24: 
            { return Tokens.KROKI;
            } 
            // fall through
          case 103: break;
          case 25: 
            { return Tokens.MODEL;
            } 
            // fall through
          case 104: break;
          case 26: 
            { return Tokens.IMAGE;
            } 
            // fall through
          case 105: break;
          case 27: 
            { return Tokens.GROUP;
            } 
            // fall through
          case 106: break;
          case 28: 
            { return Tokens.DOCS;
            } 
            // fall through
          case 107: break;
          case 29: 
            { return Tokens.ADRS;
            } 
            // fall through
          case 108: break;
          case 30: 
            { return Tokens.VIEWS;
            } 
            // fall through
          case 109: break;
          case 31: 
            { return Tokens.ROBOT;
            } 
            // fall through
          case 110: break;
          case 32: 
            { return Tokens.STYLES;
            } 
            // fall through
          case 111: break;
          case 33: 
            { return Tokens.PERSON;
            } 
            // fall through
          case 112: break;
          case 34: 
            { return Tokens.CUSTOM;
            } 
            // fall through
          case 113: break;
          case 35: 
            { return Tokens.CIRCLE;
            } 
            // fall through
          case 114: break;
          case 36: 
            { return Tokens.PERSON_SHAPE;
            } 
            // fall through
          case 115: break;
          case 37: 
            { return Tokens.FOLDER;
            } 
            // fall through
          case 116: break;
          case 38: 
            { return Tokens.EXTENDS;
            } 
            // fall through
          case 117: break;
          case 39: 
            { return Tokens.EXCLUDE;
            } 
            // fall through
          case 118: break;
          case 40: 
            { return Tokens.ELEMENT;
            } 
            // fall through
          case 119: break;
          case 41: 
            { return Tokens.DEFAULT;
            } 
            // fall through
          case 120: break;
          case 42: 
            { return Tokens.DYNAMIC;
            } 
            // fall through
          case 121: break;
          case 43: 
            { return Tokens.MERMAID;
            } 
            // fall through
          case 122: break;
          case 44: 
            { return Tokens.INCLUDE;
            } 
            // fall through
          case 123: break;
          case 45: 
            { return Tokens.ELLIPSE;
            } 
            // fall through
          case 124: break;
          case 46: 
            { return Tokens.HEXAGON;
            } 
            // fall through
          case 125: break;
          case 47: 
            { return Tokens.PLANTUML;
            } 
            // fall through
          case 126: break;
          case 48: 
            { return Tokens.FILTERED;
            } 
            // fall through
          case 127: break;
          case 49: 
            { return Tokens.CYLINDER;
            } 
            // fall through
          case 128: break;
          case 50: 
            { return Tokens.WORKSPACE;
            } 
            // fall through
          case 129: break;
          case 51: 
            { return Tokens.ANIMATION;
            } 
            // fall through
          case 130: break;
          case 52: 
            { return Tokens.CONTAINER;
            } 
            // fall through
          case 131: break;
          case 53: 
            { return Tokens.COMPONENT;
            } 
            // fall through
          case 132: break;
          case 54: 
            { return Tokens.INSTANCES;
            } 
            // fall through
          case 133: break;
          case 55: 
            { return Tokens.COMPONENT_SHAPE;
            } 
            // fall through
          case 134: break;
          case 56: 
            { return Tokens.TECHNOLOGY;
            } 
            // fall through
          case 135: break;
          case 57: 
            { return Tokens.DEPLOYMENT;
            } 
            // fall through
          case 136: break;
          case 58: 
            { return Tokens.PROPERTIES;
            } 
            // fall through
          case 137: break;
          case 59: 
            { return Tokens.AUTOLAYOUT;
            } 
            // fall through
          case 138: break;
          case 60: 
            { return Tokens.ROUNDED_BOX;
            } 
            // fall through
          case 139: break;
          case 61: 
            { return Tokens.WEB_BROWSER;
            } 
            // fall through
          case 140: break;
          case 62: 
            { return Tokens.DESCRIPTION;
            } 
            // fall through
          case 141: break;
          case 63: 
            { return Tokens.HEALTH_CHECK;
            } 
            // fall through
          case 142: break;
          case 64: 
            { return Tokens.RELATIONSHIP;
            } 
            // fall through
          case 143: break;
          case 65: 
            { return Tokens.PERSPECTIVES;
            } 
            // fall through
          case 144: break;
          case 66: 
            { return Tokens.IDENTIFIERS;
            } 
            // fall through
          case 145: break;
          case 67: 
            { return Tokens.HIERARCHICAL;
            } 
            // fall through
          case 146: break;
          case 68: 
            { return Tokens.SYSTEM_CONTEXT;
            } 
            // fall through
          case 147: break;
          case 69: 
            { return Tokens.CONFIGURATION;
            } 
            // fall through
          case 148: break;
          case 70: 
            { return Tokens.DEPLOYMENT_NODE;
            } 
            // fall through
          case 149: break;
          case 71: 
            { return Tokens.SOFTWARE_SYSTEM;
            } 
            // fall through
          case 150: break;
          case 72: 
            { return Tokens.DEPLOYMENT_GROUP;
            } 
            // fall through
          case 151: break;
          case 73: 
            { return Tokens.SYSTEM_LANDSCAPE;
            } 
            // fall through
          case 152: break;
          case 74: 
            { return Tokens.CONTAINER_INSTANCE;
            } 
            // fall through
          case 153: break;
          case 75: 
            { return Tokens.INFRASTRUCTURE_NODE;
            } 
            // fall through
          case 154: break;
          case 76: 
            { return Tokens.MOBILE_DEVICE_PORTRAIT;
            } 
            // fall through
          case 155: break;
          case 77: 
            { return Tokens.DEPLOYMENT_ENVIRONMENT;
            } 
            // fall through
          case 156: break;
          case 78: 
            { return Tokens.MOBILE_DEVICE_LANDSCAPE;
            } 
            // fall through
          case 157: break;
          case 79: 
            { return Tokens.SOFTWARE_SYSTEM_INSTANCE;
            } 
            // fall through
          case 158: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
