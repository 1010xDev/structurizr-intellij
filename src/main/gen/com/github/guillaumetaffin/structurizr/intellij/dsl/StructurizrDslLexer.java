/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.github.guillaumetaffin.structurizr.intellij.dsl;

import com.github.guillaumetaffin.structurizr.intellij.dsl.psi.Tokens;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;

import static com.intellij.psi.TokenType.WHITE_SPACE;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>structurizr-dsl.flex</tt>
 */
class StructurizrDslLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\1\4\1\1\1\2\22\0\1\1\1\32\1\3\12\0\1\35\17\0\1\46\1\36\4\0\1"+
    "\43\1\0\1\37\1\0\1\40\1\0\1\42\4\0\1\41\4\0\1\25\15\0\1\20\1\0\1\21\1\11\1"+
    "\5\1\24\1\30\1\33\1\27\1\0\1\16\1\23\1\22\1\10\1\14\1\17\1\0\1\15\1\12\1\7"+
    "\1\31\1\34\1\13\1\6\1\26\1\0\1\44\1\0\1\45\7\0\1\4\32\0\1\4\337\0\1\4\177"+
    "\0\13\4\35\0\2\4\5\0\1\4\57\0\1\4\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\21\1\1\6"+
    "\1\7\1\10\1\4\27\1\1\11\23\1\1\12\11\1"+
    "\1\13\1\14\1\15\12\1\1\16\26\1\1\17\2\1"+
    "\1\20\1\21\1\22\3\1\1\23\7\1\1\24\12\1"+
    "\1\25\1\26\42\1\1\27\2\1\1\30\1\1\1\31"+
    "\1\32\4\1\1\33\4\1\1\34\6\1\1\35\11\1"+
    "\1\36\5\1\1\37\3\1\1\40\1\41\5\1\1\42"+
    "\3\1\1\43\1\44\3\1\1\45\11\1\1\46\3\1"+
    "\1\47\4\1\1\50\1\1\1\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\165\0\303\0\352"+
    "\0\u0111\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222"+
    "\0\u0249\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333\0\165"+
    "\0\47\0\165\0\165\0\u035a\0\u0381\0\u03a8\0\u03cf\0\u03f6"+
    "\0\u041d\0\u0444\0\u046b\0\u0492\0\u04b9\0\u04e0\0\u0507\0\u052e"+
    "\0\u0555\0\u057c\0\u05a3\0\u05ca\0\u05f1\0\u0618\0\u063f\0\u0666"+
    "\0\u068d\0\u06b4\0\47\0\u06db\0\u0702\0\u0729\0\u0750\0\u0777"+
    "\0\u079e\0\u07c5\0\u07ec\0\u0813\0\u083a\0\u0861\0\u0888\0\u08af"+
    "\0\u08d6\0\u08fd\0\u0924\0\u094b\0\u0972\0\u0999\0\47\0\u09c0"+
    "\0\u09e7\0\u0a0e\0\u0a35\0\u0a5c\0\u0a83\0\u0aaa\0\u0ad1\0\u0af8"+
    "\0\47\0\47\0\47\0\u0b1f\0\u0b46\0\u0b6d\0\u0b94\0\u0bbb"+
    "\0\u0be2\0\u0c09\0\u0c30\0\u0c57\0\u0c7e\0\47\0\u0ca5\0\u0ccc"+
    "\0\u0cf3\0\u0d1a\0\u0d41\0\u0d68\0\u0d8f\0\u0db6\0\u0ddd\0\u0e04"+
    "\0\u0e2b\0\u0e52\0\u0e79\0\u0ea0\0\u0ec7\0\u0eee\0\u0f15\0\u0f3c"+
    "\0\u0f63\0\u0f8a\0\u0fb1\0\u0fd8\0\47\0\u0fff\0\u1026\0\47"+
    "\0\47\0\47\0\u104d\0\u1074\0\u109b\0\47\0\u10c2\0\u10e9"+
    "\0\u1110\0\u1137\0\u115e\0\u1185\0\u11ac\0\47\0\u11d3\0\u11fa"+
    "\0\u1221\0\u1248\0\u126f\0\u1296\0\u12bd\0\u12e4\0\u130b\0\u1332"+
    "\0\47\0\47\0\u1359\0\u1380\0\u13a7\0\u13ce\0\u13f5\0\u141c"+
    "\0\u1443\0\u146a\0\u1491\0\u14b8\0\u14df\0\u1506\0\u152d\0\u1554"+
    "\0\u157b\0\u15a2\0\u15c9\0\u15f0\0\u1617\0\u163e\0\u1665\0\u168c"+
    "\0\u16b3\0\u16da\0\u1701\0\u1728\0\u174f\0\u1776\0\u179d\0\u17c4"+
    "\0\u17eb\0\u1812\0\u1839\0\u1860\0\47\0\u1887\0\u18ae\0\u18d5"+
    "\0\u18fc\0\47\0\47\0\u1923\0\u194a\0\u1971\0\u1998\0\47"+
    "\0\u19bf\0\u19e6\0\u1a0d\0\u1a34\0\47\0\u1a5b\0\u1a82\0\u1aa9"+
    "\0\u1ad0\0\u1af7\0\u1b1e\0\47\0\u1b45\0\u1b6c\0\u1b93\0\u1bba"+
    "\0\u1be1\0\u1c08\0\u1c2f\0\u1c56\0\u1c7d\0\47\0\u1ca4\0\u1ccb"+
    "\0\u1cf2\0\u1d19\0\u1d40\0\47\0\u1d67\0\u1d8e\0\u1db5\0\47"+
    "\0\47\0\u1ddc\0\u1e03\0\u1e2a\0\u1e51\0\u1e78\0\47\0\u1e9f"+
    "\0\u1ec6\0\u1eed\0\47\0\u1f14\0\u1f3b\0\u1f62\0\u1f89\0\47"+
    "\0\u1fb0\0\u1fd7\0\u1ffe\0\u2025\0\u204c\0\u2073\0\u209a\0\u20c1"+
    "\0\u20e8\0\47\0\u210f\0\u2136\0\u215d\0\47\0\u2184\0\u21ab"+
    "\0\u21d2\0\u21f9\0\47\0\u2220\0\47";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\14\3\2\1\15\1\2\1\16"+
    "\1\17\1\2\1\20\2\2\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\6\2\1\30\1\31\1\32\1\2"+
    "\4\0\37\2\1\0\1\2\2\0\1\3\114\0\2\5"+
    "\1\0\1\33\43\5\1\2\4\0\1\2\1\34\14\2"+
    "\1\35\20\2\1\0\1\2\1\0\1\2\4\0\1\36"+
    "\12\2\1\37\12\2\1\40\10\2\1\0\1\2\1\0"+
    "\1\2\4\0\13\2\1\41\23\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\42\36\2\1\0\1\2\1\0\1\2"+
    "\4\0\7\2\1\43\27\2\1\0\1\2\1\0\1\2"+
    "\4\0\7\2\1\44\27\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\45\7\2\1\46\26\2\1\0\1\2\1\0"+
    "\1\2\4\0\7\2\1\47\27\2\1\0\1\2\1\0"+
    "\1\2\4\0\7\2\1\50\27\2\1\0\1\2\1\0"+
    "\1\2\4\0\16\2\1\51\20\2\1\0\1\2\1\0"+
    "\1\2\4\0\3\2\1\52\33\2\1\0\1\2\1\0"+
    "\1\2\4\0\10\2\1\53\26\2\1\0\1\2\1\0"+
    "\1\2\4\0\10\2\1\54\26\2\1\0\1\2\1\0"+
    "\1\2\4\0\4\2\1\55\6\2\1\56\6\2\1\57"+
    "\14\2\1\0\1\2\1\0\1\2\4\0\1\60\21\2"+
    "\1\61\14\2\1\0\1\2\1\0\1\2\4\0\22\2"+
    "\1\62\14\2\1\0\1\2\1\0\1\2\4\0\31\2"+
    "\1\63\5\2\1\0\1\2\1\0\1\2\4\0\2\2"+
    "\1\64\34\2\1\0\1\2\1\0\1\2\4\0\1\65"+
    "\36\2\1\0\1\2\1\0\1\2\4\0\14\2\1\66"+
    "\22\2\1\0\1\2\1\0\1\2\4\0\23\2\1\67"+
    "\13\2\1\0\1\2\1\0\1\2\4\0\22\2\1\70"+
    "\14\2\1\0\1\2\1\0\1\2\4\0\15\2\1\71"+
    "\21\2\1\0\1\2\1\0\1\2\4\0\5\2\1\72"+
    "\4\2\1\73\24\2\1\0\1\2\1\0\1\2\4\0"+
    "\17\2\1\74\17\2\1\0\1\2\1\0\1\2\4\0"+
    "\10\2\1\75\26\2\1\0\1\2\1\0\1\2\4\0"+
    "\10\2\1\76\26\2\1\0\1\2\1\0\1\2\4\0"+
    "\7\2\1\77\27\2\1\0\1\2\1\0\1\2\4\0"+
    "\3\2\1\100\11\2\1\101\21\2\1\0\1\2\1\0"+
    "\1\2\4\0\4\2\1\102\32\2\1\0\1\2\1\0"+
    "\1\2\4\0\13\2\1\103\23\2\1\0\1\2\1\0"+
    "\1\2\4\0\5\2\1\104\11\2\1\105\17\2\1\0"+
    "\1\2\1\0\1\2\4\0\7\2\1\106\27\2\1\0"+
    "\1\2\1\0\1\2\4\0\16\2\1\107\20\2\1\0"+
    "\1\2\1\0\1\2\4\0\7\2\1\110\27\2\1\0"+
    "\1\2\1\0\1\2\4\0\4\2\1\111\32\2\1\0"+
    "\1\2\1\0\1\2\4\0\4\2\1\112\32\2\1\0"+
    "\1\2\1\0\1\2\4\0\13\2\1\113\23\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\114\36\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\115\36\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\116\36\2\1\0\1\2\1\0\1\2"+
    "\4\0\15\2\1\117\21\2\1\0\1\2\1\0\1\2"+
    "\4\0\26\2\1\120\10\2\1\0\1\2\1\0\1\2"+
    "\4\0\5\2\1\121\31\2\1\0\1\2\1\0\1\2"+
    "\4\0\5\2\1\122\31\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\123\36\2\1\0\1\2\1\0\1\2\4\0"+
    "\14\2\1\124\22\2\1\0\1\2\1\0\1\2\4\0"+
    "\16\2\1\125\20\2\1\0\1\2\1\0\1\2\4\0"+
    "\2\2\1\126\34\2\1\0\1\2\1\0\1\2\4\0"+
    "\11\2\1\127\25\2\1\0\1\2\1\0\1\2\4\0"+
    "\5\2\1\130\31\2\1\0\1\2\1\0\1\2\4\0"+
    "\12\2\1\131\24\2\1\0\1\2\1\0\1\2\4\0"+
    "\2\2\1\132\14\2\1\133\17\2\1\0\1\2\1\0"+
    "\1\2\4\0\12\2\1\134\24\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\135\36\2\1\0\1\2\1\0\1\2"+
    "\4\0\2\2\1\136\34\2\1\0\1\2\1\0\1\2"+
    "\4\0\2\2\1\137\34\2\1\0\1\2\1\0\1\2"+
    "\4\0\10\2\1\140\26\2\1\0\1\2\1\0\1\2"+
    "\4\0\24\2\1\141\12\2\1\0\1\2\1\0\1\2"+
    "\4\0\14\2\1\142\22\2\1\0\1\2\1\0\1\2"+
    "\4\0\10\2\1\143\26\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\144\36\2\1\0\1\2\1\0\1\2\4\0"+
    "\16\2\1\145\20\2\1\0\1\2\1\0\1\2\4\0"+
    "\10\2\1\146\26\2\1\0\1\2\1\0\1\2\4\0"+
    "\6\2\1\147\30\2\1\0\1\2\1\0\1\2\4\0"+
    "\3\2\1\150\33\2\1\0\1\2\1\0\1\2\4\0"+
    "\1\151\36\2\1\0\1\2\1\0\1\2\4\0\3\2"+
    "\1\152\33\2\1\0\1\2\1\0\1\2\4\0\10\2"+
    "\1\153\26\2\1\0\1\2\1\0\1\2\4\0\7\2"+
    "\1\154\27\2\1\0\1\2\1\0\1\2\4\0\6\2"+
    "\1\155\30\2\1\0\1\2\1\0\1\2\4\0\5\2"+
    "\1\156\31\2\1\0\1\2\1\0\1\2\4\0\7\2"+
    "\1\157\2\2\1\160\24\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\161\36\2\1\0\1\2\1\0\1\2\4\0"+
    "\13\2\1\162\23\2\1\0\1\2\1\0\1\2\4\0"+
    "\22\2\1\163\14\2\1\0\1\2\1\0\1\2\4\0"+
    "\7\2\1\164\27\2\1\0\1\2\1\0\1\2\4\0"+
    "\16\2\1\165\20\2\1\0\1\2\1\0\1\2\4\0"+
    "\13\2\1\166\23\2\1\0\1\2\1\0\1\2\4\0"+
    "\13\2\1\167\23\2\1\0\1\2\1\0\1\2\4\0"+
    "\12\2\1\170\24\2\1\0\1\2\1\0\1\2\4\0"+
    "\5\2\1\171\31\2\1\0\1\2\1\0\1\2\4\0"+
    "\5\2\1\172\31\2\1\0\1\2\1\0\1\2\4\0"+
    "\3\2\1\173\33\2\1\0\1\2\1\0\1\2\4\0"+
    "\2\2\1\174\34\2\1\0\1\2\1\0\1\2\4\0"+
    "\13\2\1\175\23\2\1\0\1\2\1\0\1\2\4\0"+
    "\5\2\1\176\31\2\1\0\1\2\1\0\1\2\4\0"+
    "\4\2\1\177\32\2\1\0\1\2\1\0\1\2\4\0"+
    "\3\2\1\200\33\2\1\0\1\2\1\0\1\2\4\0"+
    "\7\2\1\201\27\2\1\0\1\2\1\0\1\2\4\0"+
    "\22\2\1\202\14\2\1\0\1\2\1\0\1\2\4\0"+
    "\21\2\1\203\15\2\1\0\1\2\1\0\1\2\4\0"+
    "\13\2\1\204\23\2\1\0\1\2\1\0\1\2\4\0"+
    "\12\2\1\205\24\2\1\0\1\2\1\0\1\2\4\0"+
    "\3\2\1\206\33\2\1\0\1\2\1\0\1\2\4\0"+
    "\1\207\36\2\1\0\1\2\1\0\1\2\4\0\10\2"+
    "\1\210\26\2\1\0\1\2\1\0\1\2\4\0\22\2"+
    "\1\211\14\2\1\0\1\2\1\0\1\2\4\0\23\2"+
    "\1\212\13\2\1\0\1\2\1\0\1\2\4\0\3\2"+
    "\1\213\33\2\1\0\1\2\1\0\1\2\4\0\3\2"+
    "\1\214\33\2\1\0\1\2\1\0\1\2\4\0\5\2"+
    "\1\215\31\2\1\0\1\2\1\0\1\2\4\0\2\2"+
    "\1\216\34\2\1\0\1\2\1\0\1\2\4\0\26\2"+
    "\1\217\10\2\1\0\1\2\1\0\1\2\4\0\10\2"+
    "\1\220\26\2\1\0\1\2\1\0\1\2\4\0\5\2"+
    "\1\221\31\2\1\0\1\2\1\0\1\2\4\0\2\2"+
    "\1\222\34\2\1\0\1\2\1\0\1\2\4\0\16\2"+
    "\1\223\20\2\1\0\1\2\1\0\1\2\4\0\12\2"+
    "\1\224\24\2\1\0\1\2\1\0\1\2\4\0\15\2"+
    "\1\225\21\2\1\0\1\2\1\0\1\2\4\0\10\2"+
    "\1\226\26\2\1\0\1\2\1\0\1\2\4\0\13\2"+
    "\1\227\23\2\1\0\1\2\1\0\1\2\4\0\14\2"+
    "\1\230\22\2\1\0\1\2\1\0\1\2\4\0\2\2"+
    "\1\231\34\2\1\0\1\2\1\0\1\2\4\0\3\2"+
    "\1\232\33\2\1\0\1\2\1\0\1\2\4\0\24\2"+
    "\1\233\12\2\1\0\1\2\1\0\1\2\4\0\1\234"+
    "\36\2\1\0\1\2\1\0\1\2\4\0\14\2\1\235"+
    "\22\2\1\0\1\2\1\0\1\2\4\0\2\2\1\236"+
    "\34\2\1\0\1\2\1\0\1\2\4\0\22\2\1\237"+
    "\14\2\1\0\1\2\1\0\1\2\4\0\36\2\1\240"+
    "\1\0\1\2\1\0\1\2\4\0\14\2\1\241\22\2"+
    "\1\0\1\2\1\0\1\2\4\0\7\2\1\242\27\2"+
    "\1\0\1\2\1\0\1\2\4\0\2\2\1\243\34\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\244\36\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\245\36\2\1\0\1\2"+
    "\1\0\1\2\4\0\14\2\1\246\22\2\1\0\1\2"+
    "\1\0\1\2\4\0\2\2\1\247\34\2\1\0\1\2"+
    "\1\0\1\2\4\0\22\2\1\250\14\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\251\36\2\1\0\1\2\1\0"+
    "\1\2\4\0\10\2\1\252\26\2\1\0\1\2\1\0"+
    "\1\2\4\0\3\2\1\253\33\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\254\36\2\1\0\1\2\1\0\1\2"+
    "\4\0\10\2\1\255\26\2\1\0\1\2\1\0\1\2"+
    "\4\0\17\2\1\256\17\2\1\0\1\2\1\0\1\2"+
    "\4\0\26\2\1\257\10\2\1\0\1\2\1\0\1\2"+
    "\4\0\26\2\1\260\10\2\1\0\1\2\1\0\1\2"+
    "\4\0\23\2\1\261\13\2\1\0\1\2\1\0\1\2"+
    "\4\0\22\2\1\262\14\2\1\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\263\33\2\1\0\1\2\1\0\1\2"+
    "\4\0\20\2\1\264\16\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\265\36\2\1\0\1\2\1\0\1\2\4\0"+
    "\22\2\1\266\14\2\1\0\1\2\1\0\1\2\4\0"+
    "\1\267\36\2\1\0\1\2\1\0\1\2\4\0\10\2"+
    "\1\270\26\2\1\0\1\2\1\0\1\2\4\0\13\2"+
    "\1\271\23\2\1\0\1\2\1\0\1\2\4\0\2\2"+
    "\1\272\34\2\1\0\1\2\1\0\1\2\4\0\5\2"+
    "\1\273\31\2\1\0\1\2\1\0\1\2\4\0\24\2"+
    "\1\274\12\2\1\0\1\2\1\0\1\2\4\0\22\2"+
    "\1\275\14\2\1\0\1\2\1\0\1\2\4\0\1\276"+
    "\36\2\1\0\1\2\1\0\1\2\4\0\22\2\1\277"+
    "\14\2\1\0\1\2\1\0\1\2\4\0\21\2\1\300"+
    "\15\2\1\0\1\2\1\0\1\2\4\0\7\2\1\301"+
    "\27\2\1\0\1\2\1\0\1\2\4\0\2\2\1\302"+
    "\34\2\1\0\1\2\1\0\1\2\4\0\21\2\1\303"+
    "\15\2\1\0\1\2\1\0\1\2\4\0\27\2\1\304"+
    "\7\2\1\0\1\2\1\0\1\2\4\0\5\2\1\305"+
    "\31\2\1\0\1\2\1\0\1\2\4\0\35\2\1\306"+
    "\1\2\1\0\1\2\1\0\1\2\4\0\2\2\1\307"+
    "\34\2\1\0\1\2\1\0\1\2\4\0\14\2\1\310"+
    "\22\2\1\0\1\2\1\0\1\2\4\0\1\311\36\2"+
    "\1\0\1\2\1\0\1\2\4\0\14\2\1\312\22\2"+
    "\1\0\1\2\1\0\1\2\4\0\14\2\1\313\22\2"+
    "\1\0\1\2\1\0\1\2\4\0\3\2\1\314\33\2"+
    "\1\0\1\2\1\0\1\2\4\0\32\2\1\315\1\316"+
    "\1\317\2\2\1\0\1\2\1\0\1\2\4\0\5\2"+
    "\1\320\31\2\1\0\1\2\1\0\1\2\4\0\1\321"+
    "\36\2\1\0\1\2\1\0\1\2\4\0\3\2\1\322"+
    "\33\2\1\0\1\2\1\0\1\2\4\0\22\2\1\323"+
    "\14\2\1\0\1\2\1\0\1\2\4\0\2\2\1\324"+
    "\34\2\1\0\1\2\1\0\1\2\4\0\10\2\1\325"+
    "\26\2\1\0\1\2\1\0\1\2\4\0\11\2\1\326"+
    "\25\2\1\0\1\2\1\0\1\2\4\0\13\2\1\327"+
    "\23\2\1\0\1\2\1\0\1\2\4\0\3\2\1\330"+
    "\33\2\1\0\1\2\1\0\1\2\4\0\10\2\1\331"+
    "\26\2\1\0\1\2\1\0\1\2\4\0\7\2\1\332"+
    "\27\2\1\0\1\2\1\0\1\2\4\0\2\2\1\333"+
    "\34\2\1\0\1\2\1\0\1\2\4\0\5\2\1\334"+
    "\31\2\1\0\1\2\1\0\1\2\4\0\5\2\1\335"+
    "\31\2\1\0\1\2\1\0\1\2\4\0\7\2\1\336"+
    "\27\2\1\0\1\2\1\0\1\2\4\0\24\2\1\337"+
    "\12\2\1\0\1\2\1\0\1\2\4\0\5\2\1\340"+
    "\31\2\1\0\1\2\1\0\1\2\4\0\16\2\1\341"+
    "\20\2\1\0\1\2\1\0\1\2\4\0\27\2\1\342"+
    "\7\2\1\0\1\2\1\0\1\2\4\0\7\2\1\343"+
    "\27\2\1\0\1\2\1\0\1\2\4\0\4\2\1\344"+
    "\32\2\1\0\1\2\1\0\1\2\4\0\1\345\36\2"+
    "\1\0\1\2\1\0\1\2\4\0\2\2\1\346\34\2"+
    "\1\0\1\2\1\0\1\2\4\0\3\2\1\347\33\2"+
    "\1\0\1\2\1\0\1\2\4\0\10\2\1\350\26\2"+
    "\1\0\1\2\1\0\1\2\4\0\22\2\1\351\14\2"+
    "\1\0\1\2\1\0\1\2\4\0\24\2\1\352\12\2"+
    "\1\0\1\2\1\0\1\2\4\0\1\353\36\2\1\0"+
    "\1\2\1\0\1\2\4\0\15\2\1\354\21\2\1\0"+
    "\1\2\1\0\1\2\4\0\13\2\1\355\23\2\1\0"+
    "\1\2\1\0\1\2\4\0\1\356\36\2\1\0\1\2"+
    "\1\0\1\2\4\0\10\2\1\357\26\2\1\0\1\2"+
    "\1\0\1\2\4\0\12\2\1\360\24\2\1\0\1\2"+
    "\1\0\1\2\4\0\35\2\1\361\1\2\1\0\1\2"+
    "\1\0\1\2\4\0\3\2\1\362\33\2\1\0\1\2"+
    "\1\0\1\2\4\0\34\2\1\363\2\2\1\0\1\2"+
    "\1\0\1\2\4\0\7\2\1\364\27\2\1\0\1\2"+
    "\1\0\1\2\4\0\3\2\1\365\33\2\1\0\1\2"+
    "\1\0\1\2\4\0\14\2\1\366\22\2\1\0\1\2"+
    "\1\0\1\2\4\0\7\2\1\367\27\2\1\0\1\2"+
    "\1\0\1\2\4\0\3\2\1\370\33\2\1\0\1\2"+
    "\1\0\1\2\4\0\5\2\1\371\31\2\1\0\1\2"+
    "\1\0\1\2\4\0\1\372\36\2\1\0\1\2\1\0"+
    "\1\2\4\0\4\2\1\373\32\2\1\0\1\2\1\0"+
    "\1\2\4\0\15\2\1\374\21\2\1\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\375\34\2\1\0\1\2\1\0"+
    "\1\2\4\0\1\376\36\2\1\0\1\2\1\0\1\2"+
    "\4\0\1\377\36\2\1\0\1\2\1\0\1\2\4\0"+
    "\13\2\1\u0100\23\2\1\0\1\2\1\0\1\2\4\0"+
    "\3\2\1\u0101\33\2\1\0\1\2\1\0\1\2\4\0"+
    "\3\2\1\u0102\33\2\1\0\1\2\1\0\1\2\4\0"+
    "\2\2\1\u0103\34\2\1\0\1\2\1\0\1\2\4\0"+
    "\14\2\1\u0104\22\2\1\0\1\2\1\0\1\2\4\0"+
    "\1\u0105\36\2\1\0\1\2\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8775];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\11\1\1\1\11\21\1\1\11\1\1"+
    "\2\11\352\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  StructurizrDslLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return Tokens.UNQUOTED_TEXT;
            } 
            // fall through
          case 42: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 43: break;
          case 3: 
            { return Tokens.LINE_BREAK;
            } 
            // fall through
          case 44: break;
          case 4: 
            { return Tokens.QUOTED_TEXT;
            } 
            // fall through
          case 45: break;
          case 5: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 46: break;
          case 6: 
            { return Tokens.OPEN_PARENS;
            } 
            // fall through
          case 47: break;
          case 7: 
            { return Tokens.CLOSE_PARENS;
            } 
            // fall through
          case 48: break;
          case 8: 
            { return Tokens.EQ;
            } 
            // fall through
          case 49: break;
          case 9: 
            { return Tokens.RELATION_ARROW;
            } 
            // fall through
          case 50: break;
          case 10: 
            { return Tokens.URL;
            } 
            // fall through
          case 51: break;
          case 11: 
            { return Tokens.TAGS;
            } 
            // fall through
          case 52: break;
          case 12: 
            { return Tokens.THIS;
            } 
            // fall through
          case 53: break;
          case 13: 
            { return Tokens.NAME;
            } 
            // fall through
          case 54: break;
          case 14: 
            { return Tokens.FLAT;
            } 
            // fall through
          case 55: break;
          case 15: 
            { return Tokens.MODEL;
            } 
            // fall through
          case 56: break;
          case 16: 
            { return Tokens.GROUP;
            } 
            // fall through
          case 57: break;
          case 17: 
            { return Tokens.DOCS;
            } 
            // fall through
          case 58: break;
          case 18: 
            { return Tokens.ADRS;
            } 
            // fall through
          case 59: break;
          case 19: 
            { return Tokens.VIEWS;
            } 
            // fall through
          case 60: break;
          case 20: 
            { return Tokens.PERSON;
            } 
            // fall through
          case 61: break;
          case 21: 
            { return Tokens.EXTENDS;
            } 
            // fall through
          case 62: break;
          case 22: 
            { return Tokens.ELEMENT;
            } 
            // fall through
          case 63: break;
          case 23: 
            { return Tokens.WORKSPACE;
            } 
            // fall through
          case 64: break;
          case 24: 
            { return Tokens.CONTAINER;
            } 
            // fall through
          case 65: break;
          case 25: 
            { return Tokens.COMPONENT;
            } 
            // fall through
          case 66: break;
          case 26: 
            { return Tokens.INSTANCES;
            } 
            // fall through
          case 67: break;
          case 27: 
            { return Tokens.TECHNOLOGY;
            } 
            // fall through
          case 68: break;
          case 28: 
            { return Tokens.PROPERTIES;
            } 
            // fall through
          case 69: break;
          case 29: 
            { return Tokens.DESCRIPTION;
            } 
            // fall through
          case 70: break;
          case 30: 
            { return Tokens.HEALTH_CHECK;
            } 
            // fall through
          case 71: break;
          case 31: 
            { return Tokens.PERSPECTIVES;
            } 
            // fall through
          case 72: break;
          case 32: 
            { return Tokens.IDENTIFIERS;
            } 
            // fall through
          case 73: break;
          case 33: 
            { return Tokens.HIERARCHICAL;
            } 
            // fall through
          case 74: break;
          case 34: 
            { return Tokens.CONFIGURATION;
            } 
            // fall through
          case 75: break;
          case 35: 
            { return Tokens.DEPLOYMENT_NODE;
            } 
            // fall through
          case 76: break;
          case 36: 
            { return Tokens.SOFTWARE_SYSTEM;
            } 
            // fall through
          case 77: break;
          case 37: 
            { return Tokens.DEPLOYMENT_GROUP;
            } 
            // fall through
          case 78: break;
          case 38: 
            { return Tokens.CONTAINER_INSTANCE;
            } 
            // fall through
          case 79: break;
          case 39: 
            { return Tokens.INFRASTRUCTURE_NODE;
            } 
            // fall through
          case 80: break;
          case 40: 
            { return Tokens.DEPLOYMENT_ENVIRONMENT;
            } 
            // fall through
          case 81: break;
          case 41: 
            { return Tokens.SOFTWARE_SYSTEM_INSTANCE;
            } 
            // fall through
          case 82: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
